        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:* Author: Ju An
        -:    3:* Date: May 12, 2018
        -:    4:* OSU CS 362 - Assignment 4: Random Tester for Adventurer Card
        -:    5:* This is a random tester for Adventurer card. 
        -:    6:* It tests to see if the implemented code actually reveals 2 Treasure cards from deck and 
        -:    7:* put those Treasure cards into current player's hand and discard the other revealed cards.
        -:    8:*/
        -:    9:
        -:   10:#include "dominion.h"
        -:   11:#include "dominion_helpers.h"
        -:   12:#include "rngs.h"
        -:   13:#include <string.h>
        -:   14:#include <stdio.h>
        -:   15:#include <stdlib.h>
        -:   16:#include <time.h>
        -:   17:
        -:   18:#define NUM_TRIES 1000		// number of tests 
        -:   19:
function main called 1 returned 100% blocks executed 100%
        1:   20:int main(){
        -:   21:	int i, j, r;
        1:   22:	int failed = 0;
        -:   23:	
        1:   24:	int handpos = 0;
        1:   25:	int choice1 = 0;
        1:   26:	int choice2 = 0;
        1:   27:	int choice3 = 0;
        1:   28:	int bonus = 0;
        -:   29:	
        -:   30:	int numPlayers;
        1:   31:	int player1 = 0; // current player
        -:   32:	
        -:   33:	int treasure_pre;  // num of treasures before adventurer card used
        -:   34:	int treasure_post; // num of treasures after adventurer card used
        1:   35:	int goldCount = 0;
        1:   36:    int silverCount = 0;
        1:   37:    int copperCount = 0;
        -:   38:        
        1:   39:	int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   40:               remodel, smithy, village, baron, great_hall};
        -:   41:    
        -:   42:	struct gameState G;
        -:   43:	
        1:   44:	srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        -:   45:	
        -:   46:
     1001:   47:	for (i = 0; i < NUM_TRIES; i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
     1000:   48:		printf("\n************ Testing Adventurer Card: %d/%d ****************\n", i+1, NUM_TRIES);
call    0 returned 100%
        -:   49:		// randomize and setup the variables 
     1000:   50:		numPlayers = rand() % 3 + 2;
call    0 returned 100%
     1000:   51:		int seed = rand()%RAND_MAX;
call    0 returned 100%
     1000:   52:		memset(&G, 23, sizeof(struct gameState));	//clean gamestate
     1000:   53:		r = initializeGame (numPlayers, k, seed, &G);	
call    0 returned 100%
        -:   54:		
     1000:   55:		player1 = rand() % numPlayers;	// current player
call    0 returned 100%
     1000:   56:		G.whoseTurn = player1;
        -:   57:		
        -:   58:		// randomize deck count and the player's deck 
     1000:   59:		G.deckCount[player1] = rand() % MAX_DECK;
call    0 returned 100%
   251034:   60:		for(j = 0; j < G.deckCount[player1]; j++){			
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   250034:   61:			if (j % 5 == 0)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -:   62:			{
        -:   63:				// treasure cards start with 4(copper), 5(silver) and 6(gold)
    50419:   64:				G.deck[player1][j] = rand() % 3 + 4; 
call    0 returned 100%
        -:   65:			} 
        -:   66:			else 
        -:   67:			{
        -:   68:				// place randomly chosen kingdom cards to the deck
   199615:   69:				G.deck[player1][j] = k[rand()%10];
call    0 returned 100%
        -:   70:			}
        -:   71:		}
        -:   72:
        -:   73:		// randomize hand count and the player's hand
     1000:   74:		treasure_pre = 0;
     1000:   75:		G.handCount[player1] = rand() % MAX_HAND;
call    0 returned 100%
     1000:   76:		G.hand[player1][0] = adventurer;	// first card on hand will be adventurer card
   244479:   77:		for (j = 1; j < G.handCount[player1]; j++) 
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   78:		{
        -:   79:			// fill the player's hand with random cards
   243479:   80:			G.hand[player1][j] = rand() % 27;
call    0 returned 100%
        -:   81:			
        -:   82:			// count treasures
   243479:   83:			if (G.hand[player1][j] == copper) copperCount++;
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
   243479:   84:			if (G.hand[player1][j] == silver) silverCount++;
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
   243479:   85:			if (G.hand[player1][j] == gold) goldCount++;
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
   243479:   86:        	if ((G.hand[player1][j] == gold) ||(G.hand[player1][j] == silver)||(G.hand[player1][j] == copper)) 
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
branch  2 taken 96% (fallthrough)
branch  3 taken 4%
branch  4 taken 4% (fallthrough)
branch  5 taken 96%
        -:   87:        	{
    27036:   88:        		treasure_pre++;
        -:   89:        	}
        -:   90:        }
        -:   91:
        -:   92:		//adventurer card effect	
     1000:   93:		cardEffect(adventurer, choice1, choice2, choice3, &G, handpos, &bonus);
call    0 returned 100%
        -:   94:
        -:   95:		//check number of treasures in hand after adventurer card
     1000:   96:		treasure_post = 0;
   250799:   97:		for(j = 0; j < G.handCount[player1]; j++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   249799:   98:			if ((G.hand[player1][j] == gold) ||(G.hand[player1][j] == silver)||(G.hand[player1][j] == copper)) 
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
branch  2 taken 95% (fallthrough)
branch  3 taken 5%
branch  4 taken 5% (fallthrough)
branch  5 taken 95%
        -:   99:        	{
    32807:  100:        		treasure_post++;
        -:  101:			}
        -:  102:		}
        -:  103:		
     1000:  104:		printf("Treasures in Player %d's HAND before using the adventurer card: %d\n", player1, treasure_pre);
call    0 returned 100%
     1000:  105:		printf("Treasures in Player %d's HAND after using the adventurer card: %d\n", player1, treasure_post);
call    0 returned 100%
     1000:  106:		if(treasure_pre+2 < treasure_post)
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
        -:  107:    	{
      977:  108:           failed++;
      977:  109:           printf(" ! TEST FAILED: Player %d added %d cards to hand, instead of 2.\n\n", player1, (treasure_post-treasure_pre));
call    0 returned 100%
        -:  110:        }
        -:  111:	}
        1:  112:	printf("\n***************** RANDOM TESTING RESULTS *******************\n");
call    0 returned 100%
        1:  113:	printf("\nFailed Tests: %d \n", failed);
call    0 returned 100%
        1:  114:	printf("\nPassed Tests: %d \n", (NUM_TRIES-failed));
call    0 returned 100%
        1:  115:	printf("\n***************** END OF RANDOM TESTING ********************\n");
call    0 returned 100%
        1:  116:	return 0;
        -:  117:}
