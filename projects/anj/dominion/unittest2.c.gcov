        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:* Author: Ju An
        -:    3:* Date: April 29, 2018
        -:    4:* OSU CS 362 - Assignment 3: Unit Test 2
        -:    5:* This program is a unit test for getCost() function in dominion.c
        -:    6:*/
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include "rngs.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:
        -:   14:// for more detailed results, use NOISY_TEST 1
        -:   15:#define NOISY_TEST 1
        -:   16:
        -:   17:// asserttrue function instead of the standard C assert
        -:   18:// if assert is not true return 1
       29:   19:int asserttrue (int testedVal, int expectedVal) 
        -:   20:{
       29:   21:	if (expectedVal == testedVal) {
        -:   22:		#if (NOISY_TEST == 1)
       29:   23:			printf("\n	Actual value: %d, Expected value: %d\n", testedVal, expectedVal);
       29:   24:			printf("\n	PASS (assertion true)\n");
        -:   25:		#endif
       29:   26:		return 0;
        -:   27:	} else {
        -:   28:		#if (NOISY_TEST == 1)
    #####:   29:			printf("\n	Actual value: %d, Expected value: %d\n", testedVal, expectedVal);	
    #####:   30:			printf("\n	FAIL (assertion false)\n");
        -:   31:		#endif
    #####:   32:		return 1;
        -:   33:	}
        -:   34:}
        -:   35:
        -:   36:
        -:   37:// testing the updateCoins() from dominion.c
        1:   38:int main()
        -:   39:{
        -:   40:    // counts failed tests
        1:   41:	int failure = 0;
        -:   42:    
        -:   43:    // check to see if the getCost() function returns correct cost value of all the cards used in the game
        1:   44:	printf("**********************************************\n");
        1:   45:    printf("Testing -> getCost()\n");
        1:   46:	printf("\nTest 1: curse card \n");
        1:   47:	failure  += asserttrue (getCost(0), 0); 
        -:   48:	
        1:   49:	printf("\nTest 2: estate card \n");
        1:   50:	failure  += asserttrue (getCost(1), 2); 
        -:   51:	
        1:   52:	printf("\nTest 3:  duchy card \n");
        1:   53:	failure  += asserttrue (getCost(2), 5); 
        -:   54:	
        1:   55:	printf("\nTest 4:  province card \n");
        1:   56:	failure  += asserttrue (getCost(3), 8); 
        -:   57:	
        1:   58:	printf("\nTest 5:  copper card \n");
        1:   59:	failure  += asserttrue (getCost(4), 0); 
        -:   60:	
        1:   61:	printf("\nTest 6:  silver card \n");
        1:   62:	failure  += asserttrue (getCost(5), 3); 
        -:   63:
        1:   64:	printf("\nTest 7:  gold card \n");
        1:   65:	failure  += asserttrue (getCost(6), 6); 
        -:   66:	
        1:   67:	printf("\nTest 8:  adventurer card \n");
        1:   68:	failure  += asserttrue (getCost(7), 6); 
        -:   69:
        1:   70:	printf("\nTest 9:  council_room card \n");
        1:   71:	failure  += asserttrue (getCost(8), 5); 
        -:   72:	
        1:   73:	printf("\nTest 10:  feast card \n");
        1:   74:	failure  += asserttrue (getCost(9), 4); 
        -:   75:	
        1:   76:	printf("\nTest 11:  gardens card \n");
        1:   77:	failure  += asserttrue (getCost(10), 4); 
        -:   78:	
        1:   79:	printf("\nTest 12:  mine card \n");
        1:   80:	failure  += asserttrue (getCost(11), 5); 
        -:   81:	
        1:   82:	printf("\nTest 13:  remodel card \n");
        1:   83:	failure  += asserttrue (getCost(12), 4); 
        -:   84:	
        1:   85:	printf("\nTest 14:  smithy card \n");
        1:   86:	failure  += asserttrue (getCost(13), 4); 
        -:   87:	
        1:   88:	printf("\nTest 15:  village card \n");
        1:   89:	failure  += asserttrue (getCost(14), 3); 
        -:   90:	
        1:   91:	printf("\nTest 16:  baron card \n");
        1:   92:	failure  += asserttrue (getCost(15), 4);
        -:   93:
        1:   94:	printf("\nTest 17:  great_hall card \n");
        1:   95:	failure  += asserttrue (getCost(16), 3); 
        -:   96:	
        1:   97:	printf("\nTest 18:  minion card \n");
        1:   98:	failure  += asserttrue (getCost(17), 5); 
        -:   99:
        1:  100:	printf("\nTest 19:  steward card \n");
        1:  101:	failure  += asserttrue (getCost(18), 3); 
        -:  102:	
        1:  103:	printf("\nTest 20:  tribute card \n");
        1:  104:	failure  += asserttrue (getCost(19), 5); 
        -:  105:
        1:  106:	printf("\nTest 21:  ambassador card \n");
        1:  107:	failure  += asserttrue (getCost(20), 3); 
        -:  108:	
        1:  109:	printf("\nTest 22:  cutpurse card \n");
        1:  110:	failure  += asserttrue (getCost(21), 4); 
        -:  111:	
        1:  112:	printf("\nTest 23:  embargo card \n");
        1:  113:	failure  += asserttrue (getCost(22), 2); 
        -:  114:	
        1:  115:	printf("\nTest 24:  outpost card \n");
        1:  116:	failure  += asserttrue (getCost(23), 5); 
        -:  117:	
        1:  118:	printf("\nTest 25:  salvager card \n");
        1:  119:	failure  += asserttrue (getCost(24), 4); 
        -:  120:	
        1:  121:	printf("\nTest 26:  sea_hag card \n");
        1:  122:	failure  += asserttrue (getCost(25), 4); 
        -:  123:	
        1:  124:	printf("\nTest 27:  treasure_map card \n");
        1:  125:	failure  += asserttrue (getCost(26), 4); 
        -:  126:	
        1:  127:	printf("\nTest 28:  Invalid card number. Card number of -1 should return -1\n");
        1:  128:	failure  += asserttrue (getCost(-1), -1);  	
        -:  129:	
        1:  130:	printf("\nTest 29:  Invalid card number card. Card number of 30 should return -1\n");
        1:  131:	failure  += asserttrue (getCost(30), -1); 
        -:  132:	
        1:  133:	printf("\n***************** RESULTS *********************\n");
        1:  134:    if (failure > 0) {
    #####:  135:        printf("\nTEST FAILED\n");
    #####:  136:        printf("Count of failed tests: %d\n",failure);
        -:  137:    }
        -:  138:    else {
        1:  139:    	printf("\nPASSED ALL THE TESTS\n");
        1:  140:        printf("\nTEST SUCCESSFULLY COMPLETED\n\n");
        -:  141:    }
        1:  142:    printf("**********************************************\n");
        1:  143:	return 0;
        -:  144:}
        -:  145:
