        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:* Author: Ju An
        -:    3:* Date: April 29, 2018
        -:    4:* OSU CS 362 - Assignment 3: Unit Test 3
        -:    5:* This program is a unit test for gainCard() function in dominion.c
        -:    6:*/
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include "rngs.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:
        -:   14:// for more detailed results, use NOISY_TEST 1
        -:   15:#define NOISY_TEST 0
        -:   16:
        -:   17:// asserttrue function instead of the standard C assert
        -:   18:// if assert is not true return 1
       17:   19:int asserttrue (int testedVal, int expectedVal) 
        -:   20:{
       17:   21:	if (expectedVal == testedVal) {
        -:   22:		#if (NOISY_TEST == 1)
        -:   23:			printf("\n	Actual value: %d, Expected value: %d\n", testedVal, expectedVal);
        -:   24:			printf("\n	PASS (assertion true)\n");
        -:   25:		#endif
       17:   26:		return 0;
        -:   27:	} else {
        -:   28:		#if (NOISY_TEST == 1)
        -:   29:			printf("\n	Actual value: %d, Expected value: %d\n", testedVal, expectedVal);	
        -:   30:			printf("\n	FAIL (assertion false)\n");
        -:   31:		#endif
    #####:   32:		return 1;
        -:   33:	}
        -:   34:}
        -:   35:
        -:   36:// runs the tests
        1:   37:int main () {
        -:   38:    // counts failed tests
        1:   39:	int failure = 0;
        -:   40:        
        -:   41:    // test game variable initialization
        1:   42:	int seed = 12321;
        1:   43:	int numPlayer = 2;
        1:   44:	int curPlayer = 1;
        1:   45:	int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   46:               remodel, smithy, village, baron, great_hall};
        -:   47:	struct gameState G;
        -:   48:    
        1:   49:	printf("**********************************************\n");
        1:   50:    printf("Testing -> gainCard()\n");
        -:   51:    
        -:   52:    // (int supplyPos, struct gameState, int toFlag, int player)
        -:   53:    // check to see if supply pile ie empty or card is not used in the game -> returns -1
        1:   54:    printf("\nTest 1: empty supply pile\n");
        1:   55:    memset(&G, 23, sizeof(struct gameState));   		 // clear the game state
        1:   56:    initializeGame(numPlayer, k, seed, &G);   // initialize a new game
        1:   57:    printf("\n   1-A Ran out of copper card\n");
        1:   58:    G.supplyCount[copper] = 0;
        1:   59:    failure  += asserttrue(gainCard(copper,&G,0,curPlayer),-1);
        -:   60:    
        1:   61:    printf("\n   1-B Ran out of silver card\n");
        1:   62:    G.supplyCount[silver] = 0;
        1:   63:    failure  += asserttrue(gainCard(silver,&G,0,curPlayer),-1);
        -:   64:    
        1:   65:    printf("\n   1-C Ran out of gold card\n");
        1:   66:    G.supplyCount[gold] = 0;
        1:   67:    failure  += asserttrue(gainCard(gold,&G,0,curPlayer),-1);
        -:   68:    
        1:   69:    printf("\n\nTest 2: supply card not used in the game\n");
        1:   70:    memset(&G, 23, sizeof(struct gameState));   		 // clear the game state
        1:   71:    initializeGame(numPlayer, k, seed, &G);   			 // initialize a new game
        -:   72:    // fill up the supply card
        1:   73:    G.supplyCount[copper] = 30;
        1:   74:    G.supplyCount[silver] = 30;
        1:   75:    G.supplyCount[gold] = 30;
        1:   76:    printf("\n   2-A Copper card not used in the game\n");
        1:   77:    G.supplyCount[copper] = -1;
        1:   78:    failure  += asserttrue(gainCard(copper,&G,0,curPlayer),-1);
        -:   79:    
        1:   80:    printf("\n   2-B Silver card not used in the game\n");
        1:   81:    G.supplyCount[silver] = -1;
        1:   82:    failure  += asserttrue(gainCard(silver,&G,0,curPlayer),-1);
        -:   83:    
        1:   84:    printf("\n   2-C Gold card not used in the game \n");
        1:   85:    G.supplyCount[gold] = -1;
        1:   86:    failure  += asserttrue(gainCard(gold,&G,0,curPlayer),-1);
        -:   87:	
        1:   88:	printf("\n\nTest 3: check if flags work correctly\n");
        1:   89:    memset(&G, 23, sizeof(struct gameState));   		 // clear the game state
        1:   90:    initializeGame(numPlayer, k, seed, &G);   			 // initialize a new game
        -:   91:    
        1:   92:    printf("\n   3-A check if toFlag == 0, then add a card to discard on current player. \n    Return value should be 0.\n");
        1:   93:    G.supplyCount[gold] = 30;
        -:   94:    #if (NOISY_TEST == 1)
        -:   95:    	printf("\n  Initial discardCount = %d\n", G.discardCount[curPlayer]);
        -:   96:    	printf("\n  Initial # of gold card = %d (should be 30)\n", G.supplyCount[gold]);
        -:   97:    #endif
        1:   98:    failure  += asserttrue(gainCard(gold,&G,0,curPlayer),0);
        -:   99:    #if (NOISY_TEST == 1)
        -:  100:		printf("\n  New discardCount = %d\n", G.discardCount[curPlayer]);
        -:  101:    	printf("\n  New # of gold card = %d\n", G.supplyCount[gold]);
        -:  102:    #endif
        -:  103:    
        1:  104:    printf("\n   3-B check if toFlag == 1, then add a card to deck on current player. \n    Return value should be 0.\n");
        1:  105:    G.supplyCount[gold] = 30;    
        -:  106:    #if (NOISY_TEST == 1)
        -:  107:    	printf("\n  Initial deckCount = %d\n", G.deckCount[curPlayer]);
        -:  108:    	//printf("\n  Initial # of gold card = %d (should be 30)\n", G.supplyCount[gold]);
        -:  109:    #endif
        1:  110:    failure  += asserttrue(gainCard(gold,&G,1,curPlayer),0);
        -:  111:	#if (NOISY_TEST == 1)
        -:  112:		printf("\n  New deckCount = %d\n", G.deckCount[curPlayer]);
        -:  113:    	//printf("\n  New # of gold card = %d\n", G.supplyCount[gold]);
        -:  114:    #endif
        -:  115:    
        1:  116:    printf("\n   3-C check if toFlag == 2, then add a card to hand on current player. \n    Return value should be 0. \n");
        1:  117:    G.supplyCount[gold] = 30;
        -:  118:    #if (NOISY_TEST == 1)
        -:  119:    	printf("\n  Initial handCount = %d\n", G.handCount[curPlayer]);
        -:  120:    	//printf("\n  Initial # of gold card = %d (should be 30)\n", G.supplyCount[gold]);
        -:  121:    #endif
        1:  122:    failure  += asserttrue(gainCard(gold,&G,2,curPlayer),0);
        -:  123:	#if (NOISY_TEST == 1)
        -:  124:		printf("\n  New handCount = %d\n", G.handCount[curPlayer]);
        -:  125:    	//printf("\n  New # of gold card = %d\n", G.supplyCount[gold]);
        -:  126:    #endif
        -:  127:    
        1:  128:    printf("\n   3-D if toFlag < 0 (i.e. invalid), then discard a card and return 0.\n");
        -:  129:    #if (NOISY_TEST == 1)
        -:  130:    	printf("\n  Initial discardCount = %d\n", G.discardCount[curPlayer]);
        -:  131:    	printf("\n  Initial deckCount = %d\n", G.deckCount[curPlayer]);
        -:  132:    	printf("\n  Initial handCount = %d\n", G.handCount[curPlayer]);
        -:  133:    	printf("\n  Initial # of gold card = %d (should be 30)\n", G.supplyCount[gold]);
        -:  134:    #endif
        1:  135:    failure  += asserttrue(gainCard(gold,&G,-1,curPlayer), 0);
        -:  136:    #if (NOISY_TEST == 1)
        -:  137:    	printf("\n  New discardCount = %d\n", G.discardCount[curPlayer]);
        -:  138:    	printf("\n  New deckCount = %d\n", G.deckCount[curPlayer]);
        -:  139:    	printf("\n  New handCount = %d\n", G.handCount[curPlayer]);
        -:  140:    	printf("\n  New # of gold card = %d (should be 30)\n", G.supplyCount[gold]);
        -:  141:    #endif
        -:  142:    
        1:  143:    printf("\n   3-E if toFlag > 2 (i.e. invalid) return 0.\n");
        -:  144:    #if (NOISY_TEST == 1)
        -:  145:    	printf("\n  Initial discardCount = %d\n", G.discardCount[curPlayer]);
        -:  146:    	printf("\n  Initial deckCount = %d\n", G.deckCount[curPlayer]);
        -:  147:    	printf("\n  Initial handCount = %d\n", G.handCount[curPlayer]);
        -:  148:    	printf("\n  Initial # of gold card = %d (should be 30)\n", G.supplyCount[gold]);
        -:  149:    #endif
        1:  150:    failure  += asserttrue(gainCard(gold,&G,3,curPlayer), 0);
        -:  151:    #if (NOISY_TEST == 1)
        -:  152:    	printf("\n  New discardCount = %d\n", G.discardCount[curPlayer]);
        -:  153:    	printf("\n  New deckCount = %d\n", G.deckCount[curPlayer]);
        -:  154:    	printf("\n  New handCount = %d\n", G.handCount[curPlayer]);
        -:  155:    	printf("\n  New # of gold card = %d (should be 30)\n", G.supplyCount[gold]);
        -:  156:    #endif
        -:  157:    
        1:  158:	printf("\n\nTest 4: check if the function decrease the number in supply pile and return 0\n");
        1:  159:    memset(&G, 23, sizeof(struct gameState));   		 // clear the game state
        1:  160:    initializeGame(numPlayer, k, seed, &G);   			 // initialize a new game
        -:  161:    // fill up the supply card
        1:  162:    G.supplyCount[copper] = 30;
        1:  163:    G.supplyCount[silver] = 30;
        1:  164:    G.supplyCount[gold] = 30;
        -:  165:    
        1:  166:    printf("\n   4-A Check to see if number of copper card decreased\n");
        1:  167:    int copperSupply = G.supplyCount[copper];
        1:  168:    failure  += asserttrue(gainCard(copper,&G,0,0), 0);
        1:  169:    failure  += asserttrue(copperSupply-1,G.supplyCount[copper]);
        -:  170:    
        1:  171:    printf("\n   4-B Check to see if number of silver card decreased\n");
        1:  172:    int silverSupply = G.supplyCount[silver];
        1:  173:    failure  += asserttrue(gainCard(silver,&G,0,0), 0);
        1:  174:    failure  += asserttrue(silverSupply-1,G.supplyCount[silver]);
        -:  175:    
        1:  176:    printf("\n   4-C Check to see if number of gold card decreased\n");
        1:  177:    int goldSupply = G.supplyCount[gold];
        1:  178:    failure  += asserttrue(gainCard(gold,&G,0,0), 0);
        1:  179:    failure  += asserttrue(goldSupply-1,G.supplyCount[gold]);
        -:  180:
        1:  181:	printf("\n***************** RESULTS *********************\n");
        1:  182:    if (failure) {
    #####:  183:        printf("\nTEST FAILED\n");
    #####:  184:        printf("Fails: %d\n",failure);
        -:  185:    }
        -:  186:    else {
        1:  187:        printf("\nPASSED ALL THE TESTS\n");
        1:  188:        printf("\nTEST SUCCESSFULLY COMPLETED\n\n");
        -:  189:    }
        1:  190:	printf("**********************************************\n");
        1:  191:    return 0;
        -:  192:}
