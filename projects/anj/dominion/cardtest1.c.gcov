        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:* Author: Ju An
        -:    3:* Date: April 29, 2018
        -:    4:* OSU CS 362 - Assignment 3: Card Test 1
        -:    5:* This is a unit test for Adventurer card in dominion.c
        -:    6:*/
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include "rngs.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:
        -:   14:// for more detailed results, use NOISY_TEST 1
        -:   15:#define NOISY_TEST 1
        -:   16:
        -:   17:// asserttrue function instead of the standard C assert
        -:   18:// if assert is not true return 1
       18:   19:int asserttrue (int expectedVal, int testedVal) 
        -:   20:{
       18:   21:	if (testedVal == expectedVal) {
        -:   22:		#if (NOISY_TEST == 1)
       17:   23:			printf("\n	Expected value: %d, actual value: %d\n", expectedVal, testedVal);
       17:   24:			printf("\n	PASS (assertion true)\n");
        -:   25:		#endif
       17:   26:		return 0;
        -:   27:	} else {
        -:   28:		#if (NOISY_TEST == 1)
        1:   29:			printf("\n	Expected value: %d, actual value: %d\n", expectedVal, testedVal);	
        1:   30:			printf("\n	FAIL (assertion false)\n");
        -:   31:		#endif
        1:   32:		return 1;
        -:   33:	}
        -:   34:}
        -:   35:
        -:   36:// testing the cardEffect() function (refactored) from dominion.c
        -:   37:// test should work whether a card is implemented inside cardEffect or in its own function
        1:   38:int main()
        -:   39:{
        -:   40:    // counts failed tests
        1:   41:	int failure = 0;
        -:   42:    
        -:   43:    // test variable initialization
        -:   44:	int i;
        1:   45:	int handpos = 0;
        1:   46:	int choice1 = 0;
        1:   47:	int choice2 = 0;
        1:   48:	int choice3 = 0;
        1:   49:	int bonus = 0;
        -:   50:	
        1:   51:	int numPlayer = 2;
        1:   52:	int player1 = 0;
        1:   53:	int player2 = 1;
        -:   54:	
        -:   55:	int card;
        1:   56:	int origTreasureCount = 0;
        1:   57:	int newTreasureCount = 0;
        -:   58:
        1:   59:	int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   60:               remodel, smithy, village, baron, great_hall};
        -:   61:	struct gameState G, savedData;
        -:   62:	
        1:   63:	int seed = 72645;
        -:   64:	
        1:   65:	printf("**********************************************\n");
        1:   66:    printf("Testing -> Adventurer Card\n");
        1:   67:    memset(&G, 23, sizeof(struct gameState));   		 // clear the game state
        1:   68:    initializeGame(numPlayer, k, seed, &G);   // initialize a new game
        1:   69:    memcpy(&savedData, &G, sizeof(struct gameState));
        -:   70:    
        1:   71:	printf("\n< P1 Data BEFORE Adventurer Card is Played >\n");
        -:   72:	// 1. check player 1's # of card in hand
        1:   73:	printf("Player 1 has %d cards in hand.\n", savedData.handCount[player1]);
        -:   74:	
        -:   75:	// 2. check player 1's # of card in deck
        1:   76:	printf("Player 1 has %d cards in deck.\n", savedData.deckCount[player1]);
        1:   77:	int numDeckCards = savedData.deckCount[player1];
        -:   78:	// 3. check player 1's # of treasure cards in hand
        6:   79:	for (i = 0; i < savedData.handCount[player1]; i++) {
        5:   80:		card = savedData.hand[player1][i];
        5:   81:		if (card == copper || card == silver || card == gold) {
        5:   82:			origTreasureCount++;
        -:   83:		}
        -:   84:	}
        1:   85:	int origHandTreasure = origTreasureCount;
        1:   86:	printf("Player 1 has %d treasure cards in hand.\n", origHandTreasure);
        -:   87:	
        -:   88:	
        -:   89:	
        1:   90:	origTreasureCount = 0;
        -:   91:	// 4. check player 1's # of treasure cards in hand
        6:   92:	for (i = 0; i < savedData.deckCount[player1]; i++) {
        5:   93:		card = savedData.deck[player1][i];
        5:   94:		if (card == copper || card == silver || card == gold) {
        2:   95:			origTreasureCount++;
        -:   96:		}
        -:   97:	}
        1:   98:	int origDeckTreasure = origTreasureCount;
        1:   99:	printf("Player 1 has %d treasure cards in deck.\n", origDeckTreasure);
        -:  100:	
        -:  101:	// 5. check player 1's # of actions left to do
        1:  102:	printf("Player 1 has %d actions.\n", savedData.numActions);
        -:  103:	
        -:  104:	// 6. Play Adventurer Card
        1:  105:	cardEffect(adventurer, choice1, choice2, choice3, &G, handpos, &bonus);
        -:  106:	
        1:  107:	printf("\n< P1 Data AFTER Adventurer Card is Played >\n");
        -:  108:	// 7. check player 1's # of card in hand
        1:  109:	printf("Player 1 has %d cards in hand.\n", G.handCount[player1]);
        -:  110:	
        -:  111:	// 8. check player 1's # of card in deck
        1:  112:	printf("Player 1 has %d cards in deck.\n", G.deckCount[player1]);
        -:  113:	
        -:  114:	// 9. check player 1's # of treasure cards in hand
        8:  115:	for (i = 0; i < G.handCount[player1]; i++) {
        7:  116:		card = G.hand[player1][i];
        7:  117:		if (card == copper || card == silver || card == gold) {
        7:  118:			newTreasureCount++;
        -:  119:		}
        -:  120:	}
        1:  121:	int newHandTreasure = newTreasureCount;
        1:  122:	printf("Player 1 has %d treasure cards in hand.\n", newHandTreasure);
        -:  123:	
        1:  124:	newTreasureCount = 0;
        -:  125:	// 10. check player 1's # of treasure cards in hand
        1:  126:	for (i = 0; i < G.deckCount[player1]; i++) {
    #####:  127:		card = G.deck[player1][i];
    #####:  128:		if (card == copper || card == silver || card == gold) {
    #####:  129:			newTreasureCount++;
        -:  130:		}
        -:  131:	}
        1:  132:	int newDeckTreasure = newTreasureCount;
        1:  133:	printf("Player 1 has %d treasure cards in deck.\n", newDeckTreasure);
        -:  134:	
        -:  135:	// 11. check player 1's # of actions left to do
        1:  136:	printf("Player 1 has %d actions.\n", G.numActions);
        -:  137:	
        1:  138:	printf("\n***************** RESULTS *********************\n");
        -:  139:	
        1:  140:	printf("\nTEST 1. Player 1's Treasure counts should increase by 2 after card is played \n");
        1:  141:	printf("\n   Checking Player 1's handCount\n");
        1:  142:	failure  += asserttrue (savedData.handCount[player1]+2,G.handCount[player1]);
        1:  143:	printf("\n   Checking Player 1's deckCount\n");
        1:  144:	failure  += asserttrue (savedData.deckCount[player1],G.deckCount[player1] + 2);
        1:  145:	printf("\n   Checking Player 1's treasure count in hand\n");
        1:  146:	failure  += asserttrue (newHandTreasure,origHandTreasure+2);
        -:  147:	
        1:  148:	printf("\nTEST 2. Player 2's handCount and deckCount remains the same\n");
        1:  149:	printf("\n   Checking Player 2's handCount\n");
        1:  150:	failure  += asserttrue (savedData.handCount[player2],G.handCount[player2]);
        1:  151:	printf("\n   Checking Player 2's deckCount\n");
        1:  152:	failure  += asserttrue (savedData.deckCount[player2],G.deckCount[player2]);
        -:  153:	
        1:  154:	printf("\nTEST 3. Check if kingdom and victory cards have any bugs\n");
        1:  155:	printf("\n   Checking kingdom cards' supply piles\n");
       11:  156:	for (i = 0; i < 10; i++) {
       10:  157:		failure  += asserttrue (savedData.supplyCount[k[i]], G.supplyCount[k[i]]);
        -:  158:	}
        1:  159:	printf("\n   Checking province card pile:\n");
        1:  160:	failure  += asserttrue (savedData.supplyCount[province], G.supplyCount[province]);
        1:  161:	printf("\n   Checking duchy card pile:\n");
        1:  162:	failure  += asserttrue (savedData.supplyCount[duchy], G.supplyCount[duchy]);
        1:  163:	printf("\n   Checking estate card pile:\n");
        1:  164:	failure  += asserttrue (savedData.supplyCount[estate], G.supplyCount[estate]);
        -:  165:	
        1:  166:    if (failure > 0) {
        1:  167:        printf("\nTEST FAILED\n");
        1:  168:        printf("Count of failed tests: %d\n",failure);
        -:  169:    }
        -:  170:    else {
    #####:  171:    	printf("\nPASSED ALL THE TESTS\n");
    #####:  172:        printf("\nTEST SUCCESSFULLY COMPLETED\n\n");
        -:  173:    }
        1:  174:    printf("**********************************************\n");
        1:  175:	return 0;
        -:  176:}
