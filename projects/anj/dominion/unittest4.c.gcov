        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:* Author: Ju An
        -:    3:* Date: April 29, 2018
        -:    4:* OSU CS 362 - Assignment 3: Unit Test 4
        -:    5:* This program is a unit test for updateCoin() function in dominion.c
        -:    6:* Modified version of testUpdateCoins.c (provided by the instructor)
        -:    7:*/
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include "rngs.h"
        -:   12:#include <string.h>
        -:   13:#include <stdio.h>
        -:   14:
        -:   15:// for more detailed results, use NOISY_TEST 1
        -:   16:#define NOISY_TEST 0
        -:   17:
        -:   18:// asserttrue function instead of the standard C assert
        -:   19:// if assert is not true return 1
      300:   20:int asserttrue (int testedVal, int expectedVal) 
        -:   21:{
      300:   22:	if (expectedVal == testedVal) {
        -:   23:		#if (NOISY_TEST == 1)
        -:   24:			//printf("\n	Actual value: %d, Expected value: %d\n", testedVal, expectedVal);
        -:   25:			printf("\n	PASS (assertion true)\n");
        -:   26:		#endif
      300:   27:		return 0;
        -:   28:	} else {
        -:   29:		#if (NOISY_TEST == 1)
        -:   30:			//printf("\n	Actual value: %d, Expected value: %d\n", testedVal, expectedVal);	
        -:   31:			printf("\n	FAIL (assertion false)\n");
        -:   32:		#endif
    #####:   33:		return 1;
        -:   34:	}
        -:   35:}
        -:   36:
        -:   37:// testing the updateCoins() from dominion.c
        1:   38:int main()
        -:   39:{
        -:   40:    // counts failed tests
        1:   41:	int failure = 0;
        -:   42:    
        -:   43:    // test game variable initialization
        -:   44:    int i;
        1:   45:    int seed = 12321;	
        1:   46:    int numPlayer = 2;
        1:   47:    int bonus, maxBonus = 10;
        1:   48:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   49:               remodel, smithy, village, baron, great_hall};
        -:   50:    struct gameState G;
        1:   51:    int handCount, maxHandCount = 5;
        -:   52:    
        -:   53:	// arrays of all coppers, silvers, and golds
        -:   54:    int coppers[MAX_HAND];
        -:   55:    int silvers[MAX_HAND];
        -:   56:    int golds[MAX_HAND];
      501:   57:    for (i = 0; i < MAX_HAND; i++) {
      500:   58:        coppers[i] = copper;
      500:   59:        silvers[i] = silver;
      500:   60:        golds[i] = gold;
        -:   61:    }
        -:   62:    
        1:   63:	printf("**********************************************\n");
        1:   64:    printf("Testing -> updateCoins()\n");
        1:   65:    int j = 0;
        3:   66:	for (i = 0; i < numPlayer; i++) {
       12:   67:		for (handCount = 1; handCount <= maxHandCount; handCount++) {
      110:   68:			for (bonus = 1; bonus <= maxBonus; bonus++){
      100:   69:                memset(&G, 23, sizeof(struct gameState));   		 // clear the game state
      100:   70:                initializeGame(numPlayer, k, seed, &G);   // initialize a new game
        -:   71:				
        -:   72:				
      100:   73:                printf("\nTest %d: Test player %d with %d treasure card(s) and %d bonus.\n", j++,  i+1, handCount, bonus);
        -:   74:				
      100:   75:                G.handCount[i] = handCount;                 		 // set the number of cards on hand
        -:   76:                
        -:   77:                // TEST 1
      100:   78:                memcpy(G.hand[i], coppers, sizeof(int) * handCount); // set all the cards to copper
      100:   79:                updateCoins(i, &G, bonus);
        -:   80:				#if (NOISY_TEST == 1)
        -:   81:					printf("All Copper:  ");
        -:   82:                	printf("G.coins = %d, expected = %d\n", G.coins, handCount * 1 + bonus);
        -:   83:				#endif
      100:   84:                failure += asserttrue(G.coins, (handCount * 1 + bonus)); // check if the number of coins is correct
        -:   85:                
        -:   86:                // TEST 2
      100:   87:                memcpy(G.hand[i], silvers, sizeof(int) * handCount); // set all the cards to silver
      100:   88:                updateCoins(i, &G, bonus);
        -:   89:				#if (NOISY_TEST == 1)
        -:   90:					printf("All Silver:  ");
        -:   91:                	printf("G.coins = %d, expected = %d\n", G.coins, handCount * 2 + bonus);
        -:   92:				#endif
      100:   93:                failure += asserttrue(G.coins, (handCount * 2 + bonus)); // check if the number of coins is correct
        -:   94:				
        -:   95:				// TEST 3
      100:   96:                memcpy(G.hand[i], golds, sizeof(int) * handCount); // set all the cards to gold
      100:   97:                updateCoins(i, &G, bonus);
        -:   98:				#if (NOISY_TEST == 1)
        -:   99:					printf("All   Gold:  ");
        -:  100:					printf("G.coins = %d, expected = %d\n", G.coins, handCount * 3 + bonus);
        -:  101:				#endif
      100:  102:                failure += asserttrue(G.coins, (handCount * 3 + bonus)); // check if the number of coins is correct
        -:  103:                }
        -:  104:            }
        -:  105:		}
        1:  106:	printf("\n***************** RESULTS *********************\n");
        1:  107:    if (failure > 0) {
    #####:  108:        printf("\nTEST FAILED\n");
    #####:  109:        printf("Count of failed tests: %d\n",failure);
        -:  110:    }
        -:  111:    else {
        1:  112:    	printf("\nPASSED ALL THE TESTS\n");
        1:  113:        printf("\nTEST SUCCESSFULLY COMPLETED\n\n");
        -:  114:    }
        1:  115:    printf("**********************************************\n");
        1:  116:	return 0;
        -:  117:}
