ASSIGNMENT 3: UNIT TEST RESULTS
unittest1.c:
**********************************************
Testing -> isGameOver()

Test 1: No more province cards + money supply available

	Actual value: 1, Expected value: 1

	PASS (assertion true)

Test 2: Province cards available + no money supply left

	Actual value: 1, Expected value: 1

	PASS (assertion true)

Test 3: No province cards left and empty money supply

	Actual value: 1, Expected value: 1

	PASS (assertion true)

Test 4: There is a province card and at least one money card available from money supply piles

	Actual value: 0, Expected value: 0

	PASS (assertion true)

Test 5: There is a province card and non-empty supply piles

	Actual value: 0, Expected value: 0

	PASS (assertion true)

Test 6: Invalid number of cards (negative numbers)

	Actual value: 0, Expected value: 0

	PASS (assertion true)

***************** RESULTS *********************

PASSED ALL THE TESTS

TEST SUCCESSFULLY COMPLETED

**********************************************
File 'unittest1.c'
Lines executed:91.80% of 61
Branches executed:100.00% of 4
Taken at least once:50.00% of 4
Calls executed:87.10% of 31
Creating 'unittest1.c.gcov'

        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:* Author: Ju An
        -:    3:* Date: April 29, 2018
        -:    4:* OSU CS 362 - Assignment 3: Unit Test 1
        -:    5:* This program is a unit test for isGameOver() function in dominion.c
        -:    6:*/
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include "rngs.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:
        -:   14:// for more detailed results, use NOISY_TEST 1
        -:   15:#define NOISY_TEST 1
        -:   16:
        -:   17:// asserttrue function instead of the standard C assert
        -:   18:// if assert is not true return 1
function asserttrue called 6 returned 100% blocks executed 63%
        6:   19:int asserttrue (int testedVal, int expectedVal) 
        -:   20:{
        6:   21:	if (expectedVal == testedVal) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   22:		#if (NOISY_TEST == 1)
        6:   23:			printf("\n	Actual value: %d, Expected value: %d\n", testedVal, expectedVal);
call    0 returned 100%
        6:   24:			printf("\n	PASS (assertion true)\n");
call    0 returned 100%
        -:   25:		#endif
        6:   26:		return 0;
        -:   27:	} else {
        -:   28:		#if (NOISY_TEST == 1)
    #####:   29:			printf("\n	Actual value: %d, Expected value: %d\n", testedVal, expectedVal);	
call    0 never executed
    #####:   30:			printf("\n	FAIL (assertion false)\n");
call    0 never executed
        -:   31:		#endif
    #####:   32:		return 1;
        -:   33:	}
        -:   34:}
        -:   35:
        -:   36:// testing the isGameOver() from dominion.c
function main called 1 returned 100% blocks executed 93%
        1:   37:int main()
        -:   38:{
        -:   39:    // counts failed tests
        1:   40:	int failure = 0;
        -:   41:    
        -:   42:    // test game variable initialization
        -:   43:    int i;
        1:   44:	int seed = 12321;
        1:   45:	int numPlayer = 2;
        1:   46:	int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   47:               remodel, smithy, village, baron, great_hall};
        -:   48:	struct gameState G;
        -:   49:
        1:   50:	printf("**********************************************\n");
call    0 returned 100%
        1:   51:    printf("Testing -> isGameOver()\n");
call    0 returned 100%
        1:   52:	memset(&G, 23, sizeof(struct gameState));   		 // clear the game state
        1:   53:    i = initializeGame(numPlayer, k, seed, &G);   // initialize a new game
call    0 returned 100%
        -:   54:	
        -:   55:	// TEST 1: check to see if game is over when there are no more Province cards
        1:   56:	printf("\nTest 1: No more province cards + money supply available\n");
call    0 returned 100%
        1:   57:	G.supplyCount[province] = 0;
        1:   58:	G.supplyCount[0] = 1;
        1:   59:	G.supplyCount[1] = 1;
        1:   60:	G.supplyCount[2] = 1;
        1:   61:	failure  += asserttrue (isGameOver(&G), 1); 
call    0 returned 100%
call    1 returned 100%
        -:   62:	
        -:   63:	// TEST 2: check to see if game is over when there are no more money (copper, silver, AND gold) supply
        1:   64:	printf("\nTest 2: Province cards available + no money supply left\n");
call    0 returned 100%
        1:   65:	G.supplyCount[province] = 1;
        1:   66:	G.supplyCount[0] = 0;
        1:   67:	G.supplyCount[1] = 0;
        1:   68:	G.supplyCount[2] = 0;
        1:   69:	failure  += asserttrue (isGameOver(&G), 1); 
call    0 returned 100%
call    1 returned 100%
        -:   70:	
        -:   71:	// TEST 3: check to see if game is over when both ending conditions are met (no province cards & no money supply)
        1:   72:	printf("\nTest 3: No province cards left and empty money supply\n");
call    0 returned 100%
        1:   73:	G.supplyCount[province] = 0;
        1:   74:	G.supplyCount[0] = 0;
        1:   75:	G.supplyCount[1] = 0;
        1:   76:	G.supplyCount[2] = 0;
        1:   77:	failure  += asserttrue (isGameOver(&G), 1); 
call    0 returned 100%
call    1 returned 100%
        -:   78:	
        -:   79:	// TEST 4: check to see if game is over when one of three money supply is still available
        1:   80:	printf("\nTest 4: There is a province card and at least one money card available from money supply piles\n");
call    0 returned 100%
        1:   81:	G.supplyCount[province] = 1;
        1:   82:	G.supplyCount[0] = 0;
        1:   83:	G.supplyCount[1] = 1;
        1:   84:	G.supplyCount[2] = 0;
        1:   85:	failure  += asserttrue (isGameOver(&G), 0); 
call    0 returned 100%
call    1 returned 100%
        -:   86:	
        -:   87:	// TEST 5: check to see if game doesn't finish when ending conditions are not met
        1:   88:	printf("\nTest 5: There is a province card and non-empty supply piles\n");
call    0 returned 100%
        1:   89:	G.supplyCount[province] = 1;
        1:   90:	G.supplyCount[0] = 1;
        1:   91:	G.supplyCount[1] = 1;
        1:   92:	G.supplyCount[2] = 1;
        1:   93:	failure  += asserttrue (isGameOver(&G), 0); 
call    0 returned 100%
call    1 returned 100%
        -:   94:	
        -:   95:	// TEST 6: check to see if game is over when supply piles have invalid numbers
        1:   96:	printf("\nTest 6: Invalid number of cards (negative numbers)\n");
call    0 returned 100%
        1:   97:	G.supplyCount[province] = -1;
        1:   98:	G.supplyCount[0] = -6;
        1:   99:	G.supplyCount[1] = 0;
        1:  100:	G.supplyCount[2] = -3;
        1:  101:	failure  += asserttrue (isGameOver(&G), 0); 
call    0 returned 100%
call    1 returned 100%
        -:  102:	
        1:  103:	printf("\n***************** RESULTS *********************\n");
call    0 returned 100%
        1:  104:    if (failure > 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  105:        printf("\nTEST FAILED\n");
call    0 never executed
    #####:  106:        printf("Count of failed tests: %d\n",failure);
call    0 never executed
        -:  107:    }
        -:  108:    else {
        1:  109:    	printf("\nPASSED ALL THE TESTS\n");
call    0 returned 100%
        1:  110:        printf("\nTEST SUCCESSFULLY COMPLETED\n\n");
call    0 returned 100%
        -:  111:    }
        1:  112:    printf("**********************************************\n");
call    0 returned 100%
        1:  113:	return 0;
        -:  114:}
File 'dominion.c'
Lines executed:17.74% of 558
Branches executed:17.75% of 417
Taken at least once:14.87% of 417
Calls executed:7.37% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 30 returned 100% blocks executed 83%
       30:    8:int compare(const void* a, const void* b) {
       30:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
       30:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
        8:   12:    return -1;
       22:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 1 returned 100% blocks executed 88%
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        1:   44:  SelectStream(1);
call    0 returned 100%
        1:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
        1:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        1:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       11:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      110:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        1:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        1:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        1:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        1:   89:      state->supplyCount[estate] = 8;
        1:   90:      state->supplyCount[duchy] = 8;
        1:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        1:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:  state->supplyCount[silver] = 40;
        1:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       21:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
      165:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
      155:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       10:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
        4:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
        8:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       10:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      145:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        3:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
        2:  140:      state->deckCount[i] = 0;
        8:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
        6:  143:	  state->deck[i][j] = estate;
        6:  144:	  state->deckCount[i]++;
        -:  145:	}
       16:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
       14:  148:	  state->deck[i][j] = copper;
       14:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        3:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
        2:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        3:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        2:  166:      state->handCount[i] = 0;
        2:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
       28:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
       27:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        1:  182:  state->outpostPlayed = 0;
        1:  183:  state->phase = 0;
        1:  184:  state->numActions = 1;
        1:  185:  state->numBuys = 1;
        1:  186:  state->playedCardCount = 0;
        1:  187:  state->whoseTurn = 0;
        1:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
        6:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        1:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        1:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 2 returned 100% blocks executed 94%
        2:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        2:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        2:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
        2:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       24:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       20:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
       20:  216:    newDeck[newDeckPos] = state->deck[player][card];
       20:  217:    newDeckPos++;
       71:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
       51:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       20:  221:    state->deckCount[player]--;
        -:  222:  }
       22:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       20:  224:    state->deck[player][i] = newDeck[i];
       20:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        2:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 6 returned 100% blocks executed 100%
        6:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        6:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        4:  401:  j = 0;
      104:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
      100:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  405:	{
        6:  406:	  j++;
        -:  407:	}
        -:  408:    }
        4:  409:  if ( j >= 3)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        3:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 5 returned 100% blocks executed 38%
        5:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
        5:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
        5:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
        5:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
        5:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        5:  576:    state->deckCount[player]--;
        5:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
        5:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int index;
    #####:  652:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  653:  int nextPlayer = currentPlayer + 1;
    #####:  654:  int tributeRevealedCards[2] = {-1, -1};
    #####:  655:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  656:    nextPlayer = 0;
        -:  657:  }
        -:  658:  // variables NOT needed after refactoring
        -:  659:  //int x;
        -:  660:  //int temphand[MAX_HAND];// moved above the if statement
        -:  661:  //int drawntreasure=0;
        -:  662:  //int cardDrawn;
        -:  663:  //int z = 0;// this is the counter for the temp hand
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
    #####:  667:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  668:    {
        -:  669:    // Code Refactored with Bugs
        -:  670:    case adventurer:
    #####:  671:      return cardEffect_adventurer (currentPlayer, state);
call    0 never executed
        -:  672:	
        -:  673:	// Code Refactored with Bugs
        -:  674:    case council_room:
    #####:  675:      return cardEffect_council_room (currentPlayer, state, handPos);
call    0 never executed
        -:  676:	
        -:  677:	// Code Refactored		
        -:  678:    case feast:
    #####:  679:      return cardEffect_feast (currentPlayer, state, handPos, choice1);
call    0 never executed
        -:  680:     
        -:  681:    case gardens:
    #####:  682:      return -1;
        -:  683:			
        -:  684:    case mine:
    #####:  685:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  686:
    #####:  687:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  688:	{
    #####:  689:	  return -1;
        -:  690:	}
        -:  691:		
    #####:  692:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  693:	{
    #####:  694:	  return -1;
        -:  695:	}
        -:  696:
    #####:  697:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  698:	{
    #####:  699:	  return -1;
        -:  700:	}
        -:  701:
    #####:  702:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  703:
        -:  704:      //discard card from hand
    #####:  705:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  706:
        -:  707:      //discard trashed card
    #####:  708:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  709:	{
    #####:  710:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  711:	    {
    #####:  712:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  713:	      break;
        -:  714:	    }
        -:  715:	}
        -:  716:			
    #####:  717:      return 0;
        -:  718:			
        -:  719:    case remodel:
    #####:  720:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  721:
    #####:  722:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  723:	{
    #####:  724:	  return -1;
        -:  725:	}
        -:  726:
    #####:  727:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  728:
        -:  729:      //discard card from hand
    #####:  730:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  731:
        -:  732:      //discard trashed card
    #####:  733:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  734:	{
    #####:  735:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  736:	    {
    #####:  737:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  738:	      break;
        -:  739:	    }
        -:  740:	}
    #####:  741:      return 0;
        -:  742:		
        -:  743:    // Code Refactored with Bugs
        -:  744:    case smithy:
    #####:  745:    	return cardEffect_smithy(currentPlayer, state, handPos);
call    0 never executed
        -:  746:		
        -:  747:    // Code Refactored with Bugs
        -:  748:    case village:
    #####:  749:    	return cardEffect_village (currentPlayer, state, handPos);
call    0 never executed
        -:  750:		
        -:  751:    case baron:
    #####:  752:      state->numBuys++;//Increase buys by 1!
    #####:  753:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  754:	int p = 0;//Iterator for hand!
    #####:  755:	int card_not_discarded = 1;//Flag for discard set!
    #####:  756:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  757:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  758:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  759:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  760:	    state->discardCount[currentPlayer]++;
    #####:  761:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  762:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  763:	    }
    #####:  764:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  765:	    state->handCount[currentPlayer]--;
    #####:  766:	    card_not_discarded = 0;//Exit the loop
        -:  767:	  }
    #####:  768:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  769:	    if(DEBUG) {
        -:  770:	      printf("No estate cards in your hand, invalid choice\n");
        -:  771:	      printf("Must gain an estate if there are any\n");
        -:  772:	    }
    #####:  773:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  774:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  775:	      state->supplyCount[estate]--;//Decrement estates
    #####:  776:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  777:		isGameOver(state);
call    0 never executed
        -:  778:	      }
        -:  779:	    }
    #####:  780:	    card_not_discarded = 0;//Exit the loop
        -:  781:	  }
        -:  782:			    
        -:  783:	  else{
    #####:  784:	    p++;//Next card
        -:  785:	  }
        -:  786:	}
        -:  787:      }
        -:  788:			    
        -:  789:      else{
    #####:  790:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  791:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  792:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  793:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  794:	    isGameOver(state);
call    0 never executed
        -:  795:	  }
        -:  796:	}
        -:  797:      }
        -:  798:	    
        -:  799:      
    #####:  800:      return 0;
        -:  801:		
        -:  802:    case great_hall:
        -:  803:      //+1 Card
    #####:  804:      drawCard(currentPlayer, state);
call    0 never executed
        -:  805:			
        -:  806:      //+1 Actions
    #####:  807:      state->numActions++;
        -:  808:			
        -:  809:      //discard card from hand
    #####:  810:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  811:      return 0;
        -:  812:		
        -:  813:    case minion:
        -:  814:      //+1 action
    #####:  815:      state->numActions++;
        -:  816:			
        -:  817:      //discard card from hand
    #####:  818:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  819:			
    #####:  820:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  821:	{
    #####:  822:	  state->coins = state->coins + 2;
        -:  823:	}
        -:  824:			
    #####:  825:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  826:	{
        -:  827:	  //discard hand
    #####:  828:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  829:	    {
    #####:  830:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  831:	    }
        -:  832:				
        -:  833:	  //draw 4
    #####:  834:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  835:	    {
    #####:  836:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  837:	    }
        -:  838:				
        -:  839:	  //other players discard hand and redraw if hand size > 4
    #####:  840:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  841:	    {
    #####:  842:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  843:		{
    #####:  844:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  845:		    {
        -:  846:		      //discard hand
    #####:  847:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  848:			{
    #####:  849:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  850:			}
        -:  851:							
        -:  852:		      //draw 4
    #####:  853:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  854:			{
    #####:  855:			  drawCard(i, state);
call    0 never executed
        -:  856:			}
        -:  857:		    }
        -:  858:		}
        -:  859:	    }
        -:  860:				
        -:  861:	}
    #####:  862:      return 0;
        -:  863:		
        -:  864:    case steward:
    #####:  865:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  866:	{
        -:  867:	  //+2 cards
    #####:  868:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  869:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  870:	}
    #####:  871:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  872:	{
        -:  873:	  //+2 coins
    #####:  874:	  state->coins = state->coins + 2;
        -:  875:	}
        -:  876:      else
        -:  877:	{
        -:  878:	  //trash 2 cards in hand
    #####:  879:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  880:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  881:	}
        -:  882:			
        -:  883:      //discard card from hand
    #####:  884:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  885:      return 0;
        -:  886:		
        -:  887:    case tribute:
    #####:  888:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  889:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  890:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  891:	  state->deckCount[nextPlayer]--;
        -:  892:	}
    #####:  893:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  894:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  895:	  state->discardCount[nextPlayer]--;
        -:  896:	}
        -:  897:	else{
        -:  898:	  //No Card to Reveal
        -:  899:	  if (DEBUG){
        -:  900:	    printf("No cards to reveal\n");
        -:  901:	  }
        -:  902:	}
        -:  903:      }
        -:  904:	    
        -:  905:      else{
    #####:  906:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  907:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  908:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  909:	    state->deckCount[nextPlayer]++;
    #####:  910:	    state->discard[nextPlayer][i] = -1;
    #####:  911:	    state->discardCount[nextPlayer]--;
        -:  912:	  }
        -:  913:			    
    #####:  914:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  915:	} 
    #####:  916:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  917:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  918:	state->deckCount[nextPlayer]--;
    #####:  919:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  920:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  921:	state->deckCount[nextPlayer]--;
        -:  922:      }    
        -:  923:		       
    #####:  924:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  925:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  926:	state->playedCardCount++;
    #####:  927:	tributeRevealedCards[1] = -1;
        -:  928:      }
        -:  929:
    #####:  930:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  931:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  932:	  state->coins += 2;
        -:  933:	}
        -:  934:		    
    #####:  935:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  936:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  937:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  938:	}
        -:  939:	else{//Action Card
    #####:  940:	  state->numActions = state->numActions + 2;
        -:  941:	}
        -:  942:      }
        -:  943:	    
    #####:  944:      return 0;
        -:  945:		
        -:  946:    case ambassador:
    #####:  947:      j = 0;		//used to check if player has enough cards to discard
        -:  948:
    #####:  949:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  950:	{
    #####:  951:	  return -1;				
        -:  952:	}
        -:  953:
    #####:  954:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  955:	{
    #####:  956:	  return -1;
        -:  957:	}
        -:  958:
    #####:  959:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  960:	{
    #####:  961:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  962:	    {
    #####:  963:	      j++;
        -:  964:	    }
        -:  965:	}
    #####:  966:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  967:	{
    #####:  968:	  return -1;				
        -:  969:	}
        -:  970:
        -:  971:      if (DEBUG) 
        -:  972:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  973:
        -:  974:      //increase supply count for choosen card by amount being discarded
    #####:  975:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  976:			
        -:  977:      //each other player gains a copy of revealed card
    #####:  978:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  979:	{
    #####:  980:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  981:	    {
    #####:  982:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  983:	    }
        -:  984:	}
        -:  985:
        -:  986:      //discard played card from hand
    #####:  987:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  988:
        -:  989:      //trash copies of cards returned to supply
    #####:  990:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  991:	{
    #####:  992:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  993:	    {
    #####:  994:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  995:		{
    #####:  996:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  997:		  break;
        -:  998:		}
        -:  999:	    }
        -: 1000:	}			
        -: 1001:
    #####: 1002:      return 0;
        -: 1003:		
        -: 1004:    case cutpurse:
        -: 1005:
    #####: 1006:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1007:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1008:	{
    #####: 1009:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1010:	    {
    #####: 1011:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1012:		{
    #####: 1013:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1014:		    {
    #####: 1015:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1016:		      break;
        -: 1017:		    }
    #####: 1018:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1019:		    {
    #####: 1020:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1021:			{
        -: 1022:			  if (DEBUG)
        -: 1023:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1024:			}	
    #####: 1025:		      break;
        -: 1026:		    }		
        -: 1027:		}
        -: 1028:					
        -: 1029:	    }
        -: 1030:				
        -: 1031:	}				
        -: 1032:
        -: 1033:      //discard played card from hand
    #####: 1034:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1035:
    #####: 1036:      return 0;
        -: 1037:
        -: 1038:		
        -: 1039:    case embargo: 
        -: 1040:      //+2 Coins
    #####: 1041:      state->coins = state->coins + 2;
        -: 1042:			
        -: 1043:      //see if selected pile is in play
    #####: 1044:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1045:	{
    #####: 1046:	  return -1;
        -: 1047:	}
        -: 1048:			
        -: 1049:      //add embargo token to selected supply pile
    #####: 1050:      state->embargoTokens[choice1]++;
        -: 1051:			
        -: 1052:      //trash card
    #####: 1053:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1054:      return 0;
        -: 1055:		
        -: 1056:    case outpost:
        -: 1057:      //set outpost flag
    #####: 1058:      state->outpostPlayed++;
        -: 1059:			
        -: 1060:      //discard card
    #####: 1061:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1062:      return 0;
        -: 1063:		
        -: 1064:    case salvager:
        -: 1065:      //+1 buy
    #####: 1066:      state->numBuys++;
        -: 1067:			
    #####: 1068:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1069:	{
        -: 1070:	  //gain coins equal to trashed card
    #####: 1071:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1072:	  //trash card
    #####: 1073:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1074:	}
        -: 1075:			
        -: 1076:      //discard card
    #####: 1077:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1078:      return 0;
        -: 1079:		
        -: 1080:    case sea_hag:
    #####: 1081:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1082:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1083:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1084:	  state->discardCount[i]++;
    #####: 1085:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1086:	}
        -: 1087:      }
    #####: 1088:      return 0;
        -: 1089:		
        -: 1090:    case treasure_map:
        -: 1091:      //search hand for another treasure_map
    #####: 1092:      index = -1;
    #####: 1093:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1094:	{
    #####: 1095:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1096:	    {
    #####: 1097:	      index = i;
    #####: 1098:	      break;
        -: 1099:	    }
        -: 1100:	}
    #####: 1101:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1102:	{
        -: 1103:	  //trash both treasure cards
    #####: 1104:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1105:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1106:
        -: 1107:	  //gain 4 Gold cards
    #####: 1108:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1109:	    {
    #####: 1110:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1111:	    }
        -: 1112:				
        -: 1113:	  //return success
    #####: 1114:	  return 1;
        -: 1115:	}
        -: 1116:			
        -: 1117:      //no second treasure_map found in hand
    #####: 1118:      return -1;
        -: 1119:    }
        -: 1120:	
    #####: 1121:  return -1;
        -: 1122:}
        -: 1123:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1124:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1125:{
        -: 1126:	
        -: 1127:  //if card is not trashed, added to Played pile 
    #####: 1128:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1129:    {
        -: 1130:      //add card to played pile
    #####: 1131:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1132:      state->playedCardCount++;
        -: 1133:    }
        -: 1134:	
        -: 1135:  //set played card to -1
    #####: 1136:  state->hand[currentPlayer][handPos] = -1;
        -: 1137:	
        -: 1138:  //remove card from player's hand
    #####: 1139:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1140:    {
        -: 1141:      //reduce number of cards in hand
    #####: 1142:      state->handCount[currentPlayer]--;
        -: 1143:    }
    #####: 1144:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1145:    {
        -: 1146:      //reduce number of cards in hand
    #####: 1147:      state->handCount[currentPlayer]--;
        -: 1148:    }
        -: 1149:  else 	
        -: 1150:    {
        -: 1151:      //replace discarded card with last card in hand
    #####: 1152:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1153:      //set last card to -1
    #####: 1154:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1155:      //reduce number of cards in hand
    #####: 1156:      state->handCount[currentPlayer]--;
        -: 1157:    }
        -: 1158:	
    #####: 1159:  return 0;
        -: 1160:}
        -: 1161:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1162:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1163:{
        -: 1164:  //Note: supplyPos is enum of choosen card
        -: 1165:	
        -: 1166:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1167:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1168:    {
    #####: 1169:      return -1;
        -: 1170:    }
        -: 1171:	
        -: 1172:  //added card for [whoseTurn] current player:
        -: 1173:  // toFlag = 0 : add to discard
        -: 1174:  // toFlag = 1 : add to deck
        -: 1175:  // toFlag = 2 : add to hand
        -: 1176:
    #####: 1177:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1178:    {
    #####: 1179:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1180:      state->deckCount[player]++;
        -: 1181:    }
    #####: 1182:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1183:    {
    #####: 1184:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1185:      state->handCount[player]++;
        -: 1186:    }
        -: 1187:  else
        -: 1188:    {
    #####: 1189:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1190:      state->discardCount[player]++;
        -: 1191:    }
        -: 1192:	
        -: 1193:  //decrease number in supply pile
    #####: 1194:  state->supplyCount[supplyPos]--;
        -: 1195:	 
    #####: 1196:  return 0;
        -: 1197:}
        -: 1198:
function updateCoins called 1 returned 100% blocks executed 82%
        1: 1199:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1200:{
        -: 1201:  int i;
        -: 1202:	
        -: 1203:  //reset coin count
        1: 1204:  state->coins = 0;
        -: 1205:
        -: 1206:  //add coins for each Treasure card in player's hand
        6: 1207:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1208:    {
        5: 1209:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1210:	{
        4: 1211:	  state->coins += 1;
        -: 1212:	}
        1: 1213:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1214:	{
    #####: 1215:	  state->coins += 2;
        -: 1216:	}
        1: 1217:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1218:	{
    #####: 1219:	  state->coins += 3;
        -: 1220:	}	
        -: 1221:    }	
        -: 1222:
        -: 1223:  //add bonus
        1: 1224:  state->coins += bonus;
        -: 1225:
        1: 1226:  return 0;
        -: 1227:}
        -: 1228:
        -: 1229:/*** CS 362 Assignment 2 ***/
        -: 1230:
        -: 1231:/** Card #1. Adventurer
        -: 1232: * Function: cardEffect_adventurer
        -: 1233: * Refactored switch statements into function for adventurer card
        -: 1234: * Inputs: int currentPlayer, struct gameState *state
        -: 1235: * Outputs: returns 0
        -: 1236: * Bug: while(drawntreasure<6){ ... 
        -: 1237: *      Changed drawntreasure<2 to drawntreasure<6
        -: 1238: *      This bug causes the current player to draw more treasure cards. 
        -: 1239: */
function cardEffect_adventurer called 0 returned 0% blocks executed 0%
    #####: 1240:int cardEffect_adventurer (int currentPlayer, struct gameState *state)
        -: 1241:{
        -: 1242:	int temphand[MAX_HAND], // moved above the if statement
    #####: 1243:		z = 0, // this is the counter for the temp hand
    #####: 1244:	    drawntreasure = 0,
        -: 1245:	    cardDrawn;
        -: 1246:	
    #####: 1247:	while(drawntreasure<6){ //BUG: changed drawntreasure<2 to drawntreasure<6
branch  0 never executed
branch  1 never executed
    #####: 1248:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####: 1249:	  		shuffle(currentPlayer, state);
call    0 never executed
        -: 1250:		}
    #####: 1251:		drawCard(currentPlayer, state);
call    0 never executed
    #####: 1252:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1253:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1254:	  		drawntreasure++;
        -: 1255:		else{
    #####: 1256:	  		temphand[z]=cardDrawn;
    #####: 1257:	  		state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1258:	  		z++;
        -: 1259:		}
        -: 1260:      }
    #####: 1261:    while(z-1>=0) { 
branch  0 never executed
branch  1 never executed
    #####: 1262:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1263:		z=z-1;
        -: 1264:    }
    #####: 1265:    return 0;
        -: 1266:}
        -: 1267:
        -: 1268:/** Card #2. Council Room
        -: 1269: * Function: cardEffect_council_room
        -: 1270: * Refactored switch statements into function for council room card
        -: 1271: * Inputs: int currentPlayer, struct gameState *state, int handPos
        -: 1272: * Outputs: returns 0
        -: 1273: * Bugs: 
        -: 1274: * 1)for (i = 0; i < 2; i++){ ... 
        -: 1275: *   Changed from "for (i = 0; i < 4; i++){ ... "
        -: 1276: * 2)if ( i == currentPlayer )
        -: 1277: *	 Changed from i != currentPlayer
        -: 1278: */
function cardEffect_council_room called 0 returned 0% blocks executed 0%
    #####: 1279:int cardEffect_council_room (int currentPlayer, struct gameState *state, int handPos)
        -: 1280:{
        -: 1281:	int i;
        -: 1282:	
        -: 1283:	//+4 Cards
    #####: 1284:	for (i = 0; i < 2; i++) // BUG: i < 2 changed from for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1285:	{
    #####: 1286:		drawCard(currentPlayer, state);
call    0 never executed
        -: 1287:	}
        -: 1288:	
        -: 1289:	//+1 Buy
    #####: 1290:    state->numBuys++;
        -: 1291:			
        -: 1292:    //Each other player draws a card
    #####: 1293:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1294:	{
    #####: 1295:		if ( i == currentPlayer ) //BUG: changed to i ++ currentPlayerfrom i != currentPlayer
branch  0 never executed
branch  1 never executed
        -: 1296:	    {
    #####: 1297:	    	drawCard(i, state);
call    0 never executed
        -: 1298:	    }
        -: 1299:	}
        -: 1300:			
        -: 1301:    //put played card in played card pile
    #####: 1302:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1303:			
    #####: 1304:    return 0;
        -: 1305:}
        -: 1306:
        -: 1307:/** Card #3. Feast
        -: 1308: * Function: cardEffect_feast
        -: 1309: * Refactored switch statements into function for feast card
        -: 1310: * Inputs: int currentPlayer, struct gameState *state, int handPos, int choice1
        -: 1311: * Outputs: returns 0
        -: 1312: */
function cardEffect_feast called 0 returned 0% blocks executed 0%
    #####: 1313:int cardEffect_feast (int currentPlayer, struct gameState *state, int handPos, int choice1)
        -: 1314:{
        -: 1315:	int i, x;
        -: 1316:	int temphand[MAX_HAND];
        -: 1317:	
        -: 1318:	//gain card with cost up to 5
        -: 1319:	//Backup hand
    #####: 1320:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1321:		temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1322:		state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1323:    }
        -: 1324:    //Backup hand
        -: 1325:
        -: 1326:    //Update Coins for Buy
    #####: 1327:    updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####: 1328:    x = 1;//Condition to loop on
    #####: 1329:    while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####: 1330:		if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1331:	  		if (DEBUG){
        -: 1332:	    		printf("None of that card left, sorry!\n");
        -: 1333:	    	}
        -: 1334:	  		if (DEBUG){
        -: 1335:	    		printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1336:	  		}
        -: 1337:		}
    #####: 1338:		else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1339:	  		printf("That card is too expensive!\n");
call    0 never executed
        -: 1340:	  		if (DEBUG){
        -: 1341:	    		printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1342:	  		}
        -: 1343:		}
        -: 1344:		else{
        -: 1345:			if (DEBUG){
        -: 1346:	    		printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1347:	  		}
    #####: 1348:			gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####: 1349:			x = 0;//No more buying cards
        -: 1350:			if (DEBUG){
        -: 1351:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1352:			}
        -: 1353:		}
        -: 1354:    }     
        -: 1355:
        -: 1356:    //Reset Hand
    #####: 1357:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1358:		state->hand[currentPlayer][i] = temphand[i];
    #####: 1359:		temphand[i] = -1;
        -: 1360:    }
        -: 1361:    //Reset Hand		
    #####: 1362:    return 0;
        -: 1363:}
        -: 1364:
        -: 1365:/** Card #4. Smithy
        -: 1366: * Function: cardEffect_smithy
        -: 1367: * Refactored switch statements into function for smithy card
        -: 1368: * Inputs: int currentPlayer, struct gameState *state, int handPos
        -: 1369: * Outputs: returns 0
        -: 1370: * Bugs: for (i = 0; i < 1; i++) changed from "for (i = 0; i < 3; i++)"
        -: 1371: */
function cardEffect_smithy called 0 returned 0% blocks executed 0%
    #####: 1372:int cardEffect_smithy(int currentPlayer, struct gameState *state, int handPos)
        -: 1373:{
        -: 1374:	int i;
        -: 1375:	
        -: 1376:	//+3 Cards
    #####: 1377:	for (i = 0; i < 4; i++) // Bug: changed from "for (i = 0; i < 3; i++)"
branch  0 never executed
branch  1 never executed
        -: 1378:	{
    #####: 1379:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1380:	}
        -: 1381:			
        -: 1382:    //discard card from hand
    #####: 1383:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1384:    return 0;	
        -: 1385:}
        -: 1386:
        -: 1387:/** Card #5. Village
        -: 1388: * Function: cardEffect_village
        -: 1389: * Refactored switch statements into function for village card
        -: 1390: * Inputs: int currentPlayer, struct gameState *state, int handPos
        -: 1391: * Outputs: returns 0
        -: 1392: * Bugs: Code for +2 actions changed to +4 actions
        -: 1393: */
function cardEffect_village called 0 returned 0% blocks executed 0%
    #####: 1394:int cardEffect_village (int currentPlayer, struct gameState *state, int handPos)
        -: 1395:{
        -: 1396:	//+1 Card
    #####: 1397:    drawCard(currentPlayer, state);
call    0 never executed
        -: 1398:			
        -: 1399:     //+2 Actions
    #####: 1400:    state->numActions = state->numActions + 4; //Bug: 2 changed to 4
        -: 1401:			
        -: 1402:    //discard played card from hand
    #####: 1403:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1404:    return 0;
        -: 1405:}
        -: 1406:
        -: 1407:
        -: 1408://end of dominion.c
        -: 1409:
unittest2.c:
**********************************************
Testing -> getCost()

Test 1: curse card 

	Actual value: 0, Expected value: 0

	PASS (assertion true)

Test 2: estate card 

	Actual value: 2, Expected value: 2

	PASS (assertion true)

Test 3:  duchy card 

	Actual value: 5, Expected value: 5

	PASS (assertion true)

Test 4:  province card 

	Actual value: 8, Expected value: 8

	PASS (assertion true)

Test 5:  copper card 

	Actual value: 0, Expected value: 0

	PASS (assertion true)

Test 6:  silver card 

	Actual value: 3, Expected value: 3

	PASS (assertion true)

Test 7:  gold card 

	Actual value: 6, Expected value: 6

	PASS (assertion true)

Test 8:  adventurer card 

	Actual value: 6, Expected value: 6

	PASS (assertion true)

Test 9:  council_room card 

	Actual value: 5, Expected value: 5

	PASS (assertion true)

Test 10:  feast card 

	Actual value: 4, Expected value: 4

	PASS (assertion true)

Test 11:  gardens card 

	Actual value: 4, Expected value: 4

	PASS (assertion true)

Test 12:  mine card 

	Actual value: 5, Expected value: 5

	PASS (assertion true)

Test 13:  remodel card 

	Actual value: 4, Expected value: 4

	PASS (assertion true)

Test 14:  smithy card 

	Actual value: 4, Expected value: 4

	PASS (assertion true)

Test 15:  village card 

	Actual value: 3, Expected value: 3

	PASS (assertion true)

Test 16:  baron card 

	Actual value: 4, Expected value: 4

	PASS (assertion true)

Test 17:  great_hall card 

	Actual value: 3, Expected value: 3

	PASS (assertion true)

Test 18:  minion card 

	Actual value: 5, Expected value: 5

	PASS (assertion true)

Test 19:  steward card 

	Actual value: 3, Expected value: 3

	PASS (assertion true)

Test 20:  tribute card 

	Actual value: 5, Expected value: 5

	PASS (assertion true)

Test 21:  ambassador card 

	Actual value: 3, Expected value: 3

	PASS (assertion true)

Test 22:  cutpurse card 

	Actual value: 4, Expected value: 4

	PASS (assertion true)

Test 23:  embargo card 

	Actual value: 2, Expected value: 2

	PASS (assertion true)

Test 24:  outpost card 

	Actual value: 5, Expected value: 5

	PASS (assertion true)

Test 25:  salvager card 

	Actual value: 4, Expected value: 4

	PASS (assertion true)

Test 26:  sea_hag card 

	Actual value: 4, Expected value: 4

	PASS (assertion true)

Test 27:  treasure_map card 

	Actual value: 4, Expected value: 4

	PASS (assertion true)

Test 28:  Invalid card number. Card number of -1 should return -1

	Actual value: -1, Expected value: -1

	PASS (assertion true)

Test 29:  Invalid card number card. Card number of 30 should return -1

	Actual value: -1, Expected value: -1

	PASS (assertion true)

***************** RESULTS *********************

PASSED ALL THE TESTS

TEST SUCCESSFULLY COMPLETED

**********************************************
File 'unittest2.c'
Lines executed:93.59% of 78
Branches executed:100.00% of 4
Taken at least once:50.00% of 4
Calls executed:95.96% of 99
Creating 'unittest2.c.gcov'

        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:* Author: Ju An
        -:    3:* Date: April 29, 2018
        -:    4:* OSU CS 362 - Assignment 3: Unit Test 2
        -:    5:* This program is a unit test for getCost() function in dominion.c
        -:    6:*/
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include "rngs.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:
        -:   14:// for more detailed results, use NOISY_TEST 1
        -:   15:#define NOISY_TEST 1
        -:   16:
        -:   17:// asserttrue function instead of the standard C assert
        -:   18:// if assert is not true return 1
function asserttrue called 29 returned 100% blocks executed 63%
       29:   19:int asserttrue (int testedVal, int expectedVal) 
        -:   20:{
       29:   21:	if (expectedVal == testedVal) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   22:		#if (NOISY_TEST == 1)
       29:   23:			printf("\n	Actual value: %d, Expected value: %d\n", testedVal, expectedVal);
call    0 returned 100%
       29:   24:			printf("\n	PASS (assertion true)\n");
call    0 returned 100%
        -:   25:		#endif
       29:   26:		return 0;
        -:   27:	} else {
        -:   28:		#if (NOISY_TEST == 1)
    #####:   29:			printf("\n	Actual value: %d, Expected value: %d\n", testedVal, expectedVal);	
call    0 never executed
    #####:   30:			printf("\n	FAIL (assertion false)\n");
call    0 never executed
        -:   31:		#endif
    #####:   32:		return 1;
        -:   33:	}
        -:   34:}
        -:   35:
        -:   36:
        -:   37:// testing the updateCoins() from dominion.c
function main called 1 returned 100% blocks executed 98%
        1:   38:int main()
        -:   39:{
        -:   40:    // counts failed tests
        1:   41:	int failure = 0;
        -:   42:    
        -:   43:    // check to see if the getCost() function returns correct cost value of all the cards used in the game
        1:   44:	printf("**********************************************\n");
call    0 returned 100%
        1:   45:    printf("Testing -> getCost()\n");
call    0 returned 100%
        1:   46:	printf("\nTest 1: curse card \n");
call    0 returned 100%
        1:   47:	failure  += asserttrue (getCost(0), 0); 
call    0 returned 100%
call    1 returned 100%
        -:   48:	
        1:   49:	printf("\nTest 2: estate card \n");
call    0 returned 100%
        1:   50:	failure  += asserttrue (getCost(1), 2); 
call    0 returned 100%
call    1 returned 100%
        -:   51:	
        1:   52:	printf("\nTest 3:  duchy card \n");
call    0 returned 100%
        1:   53:	failure  += asserttrue (getCost(2), 5); 
call    0 returned 100%
call    1 returned 100%
        -:   54:	
        1:   55:	printf("\nTest 4:  province card \n");
call    0 returned 100%
        1:   56:	failure  += asserttrue (getCost(3), 8); 
call    0 returned 100%
call    1 returned 100%
        -:   57:	
        1:   58:	printf("\nTest 5:  copper card \n");
call    0 returned 100%
        1:   59:	failure  += asserttrue (getCost(4), 0); 
call    0 returned 100%
call    1 returned 100%
        -:   60:	
        1:   61:	printf("\nTest 6:  silver card \n");
call    0 returned 100%
        1:   62:	failure  += asserttrue (getCost(5), 3); 
call    0 returned 100%
call    1 returned 100%
        -:   63:
        1:   64:	printf("\nTest 7:  gold card \n");
call    0 returned 100%
        1:   65:	failure  += asserttrue (getCost(6), 6); 
call    0 returned 100%
call    1 returned 100%
        -:   66:	
        1:   67:	printf("\nTest 8:  adventurer card \n");
call    0 returned 100%
        1:   68:	failure  += asserttrue (getCost(7), 6); 
call    0 returned 100%
call    1 returned 100%
        -:   69:
        1:   70:	printf("\nTest 9:  council_room card \n");
call    0 returned 100%
        1:   71:	failure  += asserttrue (getCost(8), 5); 
call    0 returned 100%
call    1 returned 100%
        -:   72:	
        1:   73:	printf("\nTest 10:  feast card \n");
call    0 returned 100%
        1:   74:	failure  += asserttrue (getCost(9), 4); 
call    0 returned 100%
call    1 returned 100%
        -:   75:	
        1:   76:	printf("\nTest 11:  gardens card \n");
call    0 returned 100%
        1:   77:	failure  += asserttrue (getCost(10), 4); 
call    0 returned 100%
call    1 returned 100%
        -:   78:	
        1:   79:	printf("\nTest 12:  mine card \n");
call    0 returned 100%
        1:   80:	failure  += asserttrue (getCost(11), 5); 
call    0 returned 100%
call    1 returned 100%
        -:   81:	
        1:   82:	printf("\nTest 13:  remodel card \n");
call    0 returned 100%
        1:   83:	failure  += asserttrue (getCost(12), 4); 
call    0 returned 100%
call    1 returned 100%
        -:   84:	
        1:   85:	printf("\nTest 14:  smithy card \n");
call    0 returned 100%
        1:   86:	failure  += asserttrue (getCost(13), 4); 
call    0 returned 100%
call    1 returned 100%
        -:   87:	
        1:   88:	printf("\nTest 15:  village card \n");
call    0 returned 100%
        1:   89:	failure  += asserttrue (getCost(14), 3); 
call    0 returned 100%
call    1 returned 100%
        -:   90:	
        1:   91:	printf("\nTest 16:  baron card \n");
call    0 returned 100%
        1:   92:	failure  += asserttrue (getCost(15), 4);
call    0 returned 100%
call    1 returned 100%
        -:   93:
        1:   94:	printf("\nTest 17:  great_hall card \n");
call    0 returned 100%
        1:   95:	failure  += asserttrue (getCost(16), 3); 
call    0 returned 100%
call    1 returned 100%
        -:   96:	
        1:   97:	printf("\nTest 18:  minion card \n");
call    0 returned 100%
        1:   98:	failure  += asserttrue (getCost(17), 5); 
call    0 returned 100%
call    1 returned 100%
        -:   99:
        1:  100:	printf("\nTest 19:  steward card \n");
call    0 returned 100%
        1:  101:	failure  += asserttrue (getCost(18), 3); 
call    0 returned 100%
call    1 returned 100%
        -:  102:	
        1:  103:	printf("\nTest 20:  tribute card \n");
call    0 returned 100%
        1:  104:	failure  += asserttrue (getCost(19), 5); 
call    0 returned 100%
call    1 returned 100%
        -:  105:
        1:  106:	printf("\nTest 21:  ambassador card \n");
call    0 returned 100%
        1:  107:	failure  += asserttrue (getCost(20), 3); 
call    0 returned 100%
call    1 returned 100%
        -:  108:	
        1:  109:	printf("\nTest 22:  cutpurse card \n");
call    0 returned 100%
        1:  110:	failure  += asserttrue (getCost(21), 4); 
call    0 returned 100%
call    1 returned 100%
        -:  111:	
        1:  112:	printf("\nTest 23:  embargo card \n");
call    0 returned 100%
        1:  113:	failure  += asserttrue (getCost(22), 2); 
call    0 returned 100%
call    1 returned 100%
        -:  114:	
        1:  115:	printf("\nTest 24:  outpost card \n");
call    0 returned 100%
        1:  116:	failure  += asserttrue (getCost(23), 5); 
call    0 returned 100%
call    1 returned 100%
        -:  117:	
        1:  118:	printf("\nTest 25:  salvager card \n");
call    0 returned 100%
        1:  119:	failure  += asserttrue (getCost(24), 4); 
call    0 returned 100%
call    1 returned 100%
        -:  120:	
        1:  121:	printf("\nTest 26:  sea_hag card \n");
call    0 returned 100%
        1:  122:	failure  += asserttrue (getCost(25), 4); 
call    0 returned 100%
call    1 returned 100%
        -:  123:	
        1:  124:	printf("\nTest 27:  treasure_map card \n");
call    0 returned 100%
        1:  125:	failure  += asserttrue (getCost(26), 4); 
call    0 returned 100%
call    1 returned 100%
        -:  126:	
        1:  127:	printf("\nTest 28:  Invalid card number. Card number of -1 should return -1\n");
call    0 returned 100%
        1:  128:	failure  += asserttrue (getCost(-1), -1);  	
call    0 returned 100%
call    1 returned 100%
        -:  129:	
        1:  130:	printf("\nTest 29:  Invalid card number card. Card number of 30 should return -1\n");
call    0 returned 100%
        1:  131:	failure  += asserttrue (getCost(30), -1); 
call    0 returned 100%
call    1 returned 100%
        -:  132:	
        1:  133:	printf("\n***************** RESULTS *********************\n");
call    0 returned 100%
        1:  134:    if (failure > 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  135:        printf("\nTEST FAILED\n");
call    0 never executed
    #####:  136:        printf("Count of failed tests: %d\n",failure);
call    0 never executed
        -:  137:    }
        -:  138:    else {
        1:  139:    	printf("\nPASSED ALL THE TESTS\n");
call    0 returned 100%
        1:  140:        printf("\nTEST SUCCESSFULLY COMPLETED\n\n");
call    0 returned 100%
        -:  141:    }
        1:  142:    printf("**********************************************\n");
call    0 returned 100%
        1:  143:	return 0;
        -:  144:}
        -:  145:
File 'dominion.c'
Lines executed:23.12% of 558
Branches executed:24.46% of 417
Taken at least once:21.58% of 417
Calls executed:7.37% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:2
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 30 returned 100% blocks executed 83%
       30:    8:int compare(const void* a, const void* b) {
       30:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
       30:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
        8:   12:    return -1;
       22:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 1 returned 100% blocks executed 88%
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        1:   44:  SelectStream(1);
call    0 returned 100%
        1:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
        1:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        1:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       11:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      110:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        1:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        1:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        1:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        1:   89:      state->supplyCount[estate] = 8;
        1:   90:      state->supplyCount[duchy] = 8;
        1:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        1:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:  state->supplyCount[silver] = 40;
        1:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       21:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
      165:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
      155:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       10:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
        4:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
        8:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       10:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      145:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        3:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
        2:  140:      state->deckCount[i] = 0;
        8:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
        6:  143:	  state->deck[i][j] = estate;
        6:  144:	  state->deckCount[i]++;
        -:  145:	}
       16:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
       14:  148:	  state->deck[i][j] = copper;
       14:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        3:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
        2:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        3:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        2:  166:      state->handCount[i] = 0;
        2:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
       28:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
       27:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        1:  182:  state->outpostPlayed = 0;
        1:  183:  state->phase = 0;
        1:  184:  state->numActions = 1;
        1:  185:  state->numBuys = 1;
        1:  186:  state->playedCardCount = 0;
        1:  187:  state->whoseTurn = 0;
        1:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
        6:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        1:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        1:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 2 returned 100% blocks executed 94%
        2:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        2:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        2:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
        2:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       24:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       20:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
       20:  216:    newDeck[newDeckPos] = state->deck[player][card];
       20:  217:    newDeckPos++;
       71:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
       51:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       20:  221:    state->deckCount[player]--;
        -:  222:  }
       22:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       20:  224:    state->deck[player][i] = newDeck[i];
       20:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        2:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 6 returned 100% blocks executed 100%
        6:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        6:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        4:  401:  j = 0;
      104:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
      100:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  405:	{
        6:  406:	  j++;
        -:  407:	}
        -:  408:    }
        4:  409:  if ( j >= 3)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        3:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 5 returned 100% blocks executed 38%
        5:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
        5:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
        5:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
        5:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
        5:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        5:  576:    state->deckCount[player]--;
        5:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
        5:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 29 returned 100% blocks executed 100%
       29:  583:int getCost(int cardNumber)
        -:  584:{
       29:  585:  switch( cardNumber ) 
branch  0 taken 3%
branch  1 taken 3%
branch  2 taken 3%
branch  3 taken 3%
branch  4 taken 3%
branch  5 taken 3%
branch  6 taken 3%
branch  7 taken 3%
branch  8 taken 3%
branch  9 taken 3%
branch 10 taken 3%
branch 11 taken 3%
branch 12 taken 3%
branch 13 taken 3%
branch 14 taken 3%
branch 15 taken 3%
branch 16 taken 3%
branch 17 taken 3%
branch 18 taken 3%
branch 19 taken 3%
branch 20 taken 3%
branch 21 taken 3%
branch 22 taken 3%
branch 23 taken 3%
branch 24 taken 3%
branch 25 taken 3%
branch 26 taken 3%
branch 27 taken 7%
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
        1:  590:      return 2;
        -:  591:    case duchy:
        1:  592:      return 5;
        -:  593:    case province:
        1:  594:      return 8;
        -:  595:    case copper:
        1:  596:      return 0;
        -:  597:    case silver:
        1:  598:      return 3;
        -:  599:    case gold:
        1:  600:      return 6;
        -:  601:    case adventurer:
        1:  602:      return 6;
        -:  603:    case council_room:
        1:  604:      return 5;
        -:  605:    case feast:
        1:  606:      return 4;
        -:  607:    case gardens:
        1:  608:      return 4;
        -:  609:    case mine:
        1:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
        1:  614:      return 4;
        -:  615:    case village:
        1:  616:      return 3;
        -:  617:    case baron:
        1:  618:      return 4;
        -:  619:    case great_hall:
        1:  620:      return 3;
        -:  621:    case minion:
        1:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
        1:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
        1:  630:      return 4;
        -:  631:    case embargo: 
        1:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
        1:  636:      return 4;
        -:  637:    case sea_hag:
        1:  638:      return 4;
        -:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:	
        2:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int index;
    #####:  652:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  653:  int nextPlayer = currentPlayer + 1;
    #####:  654:  int tributeRevealedCards[2] = {-1, -1};
    #####:  655:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  656:    nextPlayer = 0;
        -:  657:  }
        -:  658:  // variables NOT needed after refactoring
        -:  659:  //int x;
        -:  660:  //int temphand[MAX_HAND];// moved above the if statement
        -:  661:  //int drawntreasure=0;
        -:  662:  //int cardDrawn;
        -:  663:  //int z = 0;// this is the counter for the temp hand
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
    #####:  667:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  668:    {
        -:  669:    // Code Refactored with Bugs
        -:  670:    case adventurer:
    #####:  671:      return cardEffect_adventurer (currentPlayer, state);
call    0 never executed
        -:  672:	
        -:  673:	// Code Refactored with Bugs
        -:  674:    case council_room:
    #####:  675:      return cardEffect_council_room (currentPlayer, state, handPos);
call    0 never executed
        -:  676:	
        -:  677:	// Code Refactored		
        -:  678:    case feast:
    #####:  679:      return cardEffect_feast (currentPlayer, state, handPos, choice1);
call    0 never executed
        -:  680:     
        -:  681:    case gardens:
    #####:  682:      return -1;
        -:  683:			
        -:  684:    case mine:
    #####:  685:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  686:
    #####:  687:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  688:	{
    #####:  689:	  return -1;
        -:  690:	}
        -:  691:		
    #####:  692:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  693:	{
    #####:  694:	  return -1;
        -:  695:	}
        -:  696:
    #####:  697:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  698:	{
    #####:  699:	  return -1;
        -:  700:	}
        -:  701:
    #####:  702:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  703:
        -:  704:      //discard card from hand
    #####:  705:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  706:
        -:  707:      //discard trashed card
    #####:  708:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  709:	{
    #####:  710:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  711:	    {
    #####:  712:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  713:	      break;
        -:  714:	    }
        -:  715:	}
        -:  716:			
    #####:  717:      return 0;
        -:  718:			
        -:  719:    case remodel:
    #####:  720:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  721:
    #####:  722:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  723:	{
    #####:  724:	  return -1;
        -:  725:	}
        -:  726:
    #####:  727:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  728:
        -:  729:      //discard card from hand
    #####:  730:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  731:
        -:  732:      //discard trashed card
    #####:  733:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  734:	{
    #####:  735:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  736:	    {
    #####:  737:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  738:	      break;
        -:  739:	    }
        -:  740:	}
    #####:  741:      return 0;
        -:  742:		
        -:  743:    // Code Refactored with Bugs
        -:  744:    case smithy:
    #####:  745:    	return cardEffect_smithy(currentPlayer, state, handPos);
call    0 never executed
        -:  746:		
        -:  747:    // Code Refactored with Bugs
        -:  748:    case village:
    #####:  749:    	return cardEffect_village (currentPlayer, state, handPos);
call    0 never executed
        -:  750:		
        -:  751:    case baron:
    #####:  752:      state->numBuys++;//Increase buys by 1!
    #####:  753:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  754:	int p = 0;//Iterator for hand!
    #####:  755:	int card_not_discarded = 1;//Flag for discard set!
    #####:  756:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  757:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  758:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  759:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  760:	    state->discardCount[currentPlayer]++;
    #####:  761:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  762:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  763:	    }
    #####:  764:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  765:	    state->handCount[currentPlayer]--;
    #####:  766:	    card_not_discarded = 0;//Exit the loop
        -:  767:	  }
    #####:  768:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  769:	    if(DEBUG) {
        -:  770:	      printf("No estate cards in your hand, invalid choice\n");
        -:  771:	      printf("Must gain an estate if there are any\n");
        -:  772:	    }
    #####:  773:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  774:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  775:	      state->supplyCount[estate]--;//Decrement estates
    #####:  776:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  777:		isGameOver(state);
call    0 never executed
        -:  778:	      }
        -:  779:	    }
    #####:  780:	    card_not_discarded = 0;//Exit the loop
        -:  781:	  }
        -:  782:			    
        -:  783:	  else{
    #####:  784:	    p++;//Next card
        -:  785:	  }
        -:  786:	}
        -:  787:      }
        -:  788:			    
        -:  789:      else{
    #####:  790:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  791:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  792:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  793:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  794:	    isGameOver(state);
call    0 never executed
        -:  795:	  }
        -:  796:	}
        -:  797:      }
        -:  798:	    
        -:  799:      
    #####:  800:      return 0;
        -:  801:		
        -:  802:    case great_hall:
        -:  803:      //+1 Card
    #####:  804:      drawCard(currentPlayer, state);
call    0 never executed
        -:  805:			
        -:  806:      //+1 Actions
    #####:  807:      state->numActions++;
        -:  808:			
        -:  809:      //discard card from hand
    #####:  810:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  811:      return 0;
        -:  812:		
        -:  813:    case minion:
        -:  814:      //+1 action
    #####:  815:      state->numActions++;
        -:  816:			
        -:  817:      //discard card from hand
    #####:  818:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  819:			
    #####:  820:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  821:	{
    #####:  822:	  state->coins = state->coins + 2;
        -:  823:	}
        -:  824:			
    #####:  825:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  826:	{
        -:  827:	  //discard hand
    #####:  828:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  829:	    {
    #####:  830:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  831:	    }
        -:  832:				
        -:  833:	  //draw 4
    #####:  834:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  835:	    {
    #####:  836:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  837:	    }
        -:  838:				
        -:  839:	  //other players discard hand and redraw if hand size > 4
    #####:  840:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  841:	    {
    #####:  842:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  843:		{
    #####:  844:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  845:		    {
        -:  846:		      //discard hand
    #####:  847:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  848:			{
    #####:  849:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  850:			}
        -:  851:							
        -:  852:		      //draw 4
    #####:  853:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  854:			{
    #####:  855:			  drawCard(i, state);
call    0 never executed
        -:  856:			}
        -:  857:		    }
        -:  858:		}
        -:  859:	    }
        -:  860:				
        -:  861:	}
    #####:  862:      return 0;
        -:  863:		
        -:  864:    case steward:
    #####:  865:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  866:	{
        -:  867:	  //+2 cards
    #####:  868:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  869:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  870:	}
    #####:  871:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  872:	{
        -:  873:	  //+2 coins
    #####:  874:	  state->coins = state->coins + 2;
        -:  875:	}
        -:  876:      else
        -:  877:	{
        -:  878:	  //trash 2 cards in hand
    #####:  879:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  880:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  881:	}
        -:  882:			
        -:  883:      //discard card from hand
    #####:  884:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  885:      return 0;
        -:  886:		
        -:  887:    case tribute:
    #####:  888:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  889:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  890:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  891:	  state->deckCount[nextPlayer]--;
        -:  892:	}
    #####:  893:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  894:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  895:	  state->discardCount[nextPlayer]--;
        -:  896:	}
        -:  897:	else{
        -:  898:	  //No Card to Reveal
        -:  899:	  if (DEBUG){
        -:  900:	    printf("No cards to reveal\n");
        -:  901:	  }
        -:  902:	}
        -:  903:      }
        -:  904:	    
        -:  905:      else{
    #####:  906:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  907:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  908:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  909:	    state->deckCount[nextPlayer]++;
    #####:  910:	    state->discard[nextPlayer][i] = -1;
    #####:  911:	    state->discardCount[nextPlayer]--;
        -:  912:	  }
        -:  913:			    
    #####:  914:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  915:	} 
    #####:  916:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  917:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  918:	state->deckCount[nextPlayer]--;
    #####:  919:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  920:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  921:	state->deckCount[nextPlayer]--;
        -:  922:      }    
        -:  923:		       
    #####:  924:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  925:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  926:	state->playedCardCount++;
    #####:  927:	tributeRevealedCards[1] = -1;
        -:  928:      }
        -:  929:
    #####:  930:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  931:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  932:	  state->coins += 2;
        -:  933:	}
        -:  934:		    
    #####:  935:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  936:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  937:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  938:	}
        -:  939:	else{//Action Card
    #####:  940:	  state->numActions = state->numActions + 2;
        -:  941:	}
        -:  942:      }
        -:  943:	    
    #####:  944:      return 0;
        -:  945:		
        -:  946:    case ambassador:
    #####:  947:      j = 0;		//used to check if player has enough cards to discard
        -:  948:
    #####:  949:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  950:	{
    #####:  951:	  return -1;				
        -:  952:	}
        -:  953:
    #####:  954:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  955:	{
    #####:  956:	  return -1;
        -:  957:	}
        -:  958:
    #####:  959:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  960:	{
    #####:  961:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  962:	    {
    #####:  963:	      j++;
        -:  964:	    }
        -:  965:	}
    #####:  966:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  967:	{
    #####:  968:	  return -1;				
        -:  969:	}
        -:  970:
        -:  971:      if (DEBUG) 
        -:  972:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  973:
        -:  974:      //increase supply count for choosen card by amount being discarded
    #####:  975:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  976:			
        -:  977:      //each other player gains a copy of revealed card
    #####:  978:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  979:	{
    #####:  980:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  981:	    {
    #####:  982:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  983:	    }
        -:  984:	}
        -:  985:
        -:  986:      //discard played card from hand
    #####:  987:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  988:
        -:  989:      //trash copies of cards returned to supply
    #####:  990:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  991:	{
    #####:  992:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  993:	    {
    #####:  994:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  995:		{
    #####:  996:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  997:		  break;
        -:  998:		}
        -:  999:	    }
        -: 1000:	}			
        -: 1001:
    #####: 1002:      return 0;
        -: 1003:		
        -: 1004:    case cutpurse:
        -: 1005:
    #####: 1006:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1007:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1008:	{
    #####: 1009:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1010:	    {
    #####: 1011:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1012:		{
    #####: 1013:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1014:		    {
    #####: 1015:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1016:		      break;
        -: 1017:		    }
    #####: 1018:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1019:		    {
    #####: 1020:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1021:			{
        -: 1022:			  if (DEBUG)
        -: 1023:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1024:			}	
    #####: 1025:		      break;
        -: 1026:		    }		
        -: 1027:		}
        -: 1028:					
        -: 1029:	    }
        -: 1030:				
        -: 1031:	}				
        -: 1032:
        -: 1033:      //discard played card from hand
    #####: 1034:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1035:
    #####: 1036:      return 0;
        -: 1037:
        -: 1038:		
        -: 1039:    case embargo: 
        -: 1040:      //+2 Coins
    #####: 1041:      state->coins = state->coins + 2;
        -: 1042:			
        -: 1043:      //see if selected pile is in play
    #####: 1044:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1045:	{
    #####: 1046:	  return -1;
        -: 1047:	}
        -: 1048:			
        -: 1049:      //add embargo token to selected supply pile
    #####: 1050:      state->embargoTokens[choice1]++;
        -: 1051:			
        -: 1052:      //trash card
    #####: 1053:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1054:      return 0;
        -: 1055:		
        -: 1056:    case outpost:
        -: 1057:      //set outpost flag
    #####: 1058:      state->outpostPlayed++;
        -: 1059:			
        -: 1060:      //discard card
    #####: 1061:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1062:      return 0;
        -: 1063:		
        -: 1064:    case salvager:
        -: 1065:      //+1 buy
    #####: 1066:      state->numBuys++;
        -: 1067:			
    #####: 1068:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1069:	{
        -: 1070:	  //gain coins equal to trashed card
    #####: 1071:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1072:	  //trash card
    #####: 1073:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1074:	}
        -: 1075:			
        -: 1076:      //discard card
    #####: 1077:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1078:      return 0;
        -: 1079:		
        -: 1080:    case sea_hag:
    #####: 1081:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1082:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1083:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1084:	  state->discardCount[i]++;
    #####: 1085:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1086:	}
        -: 1087:      }
    #####: 1088:      return 0;
        -: 1089:		
        -: 1090:    case treasure_map:
        -: 1091:      //search hand for another treasure_map
    #####: 1092:      index = -1;
    #####: 1093:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1094:	{
    #####: 1095:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1096:	    {
    #####: 1097:	      index = i;
    #####: 1098:	      break;
        -: 1099:	    }
        -: 1100:	}
    #####: 1101:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1102:	{
        -: 1103:	  //trash both treasure cards
    #####: 1104:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1105:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1106:
        -: 1107:	  //gain 4 Gold cards
    #####: 1108:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1109:	    {
    #####: 1110:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1111:	    }
        -: 1112:				
        -: 1113:	  //return success
    #####: 1114:	  return 1;
        -: 1115:	}
        -: 1116:			
        -: 1117:      //no second treasure_map found in hand
    #####: 1118:      return -1;
        -: 1119:    }
        -: 1120:	
    #####: 1121:  return -1;
        -: 1122:}
        -: 1123:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1124:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1125:{
        -: 1126:	
        -: 1127:  //if card is not trashed, added to Played pile 
    #####: 1128:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1129:    {
        -: 1130:      //add card to played pile
    #####: 1131:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1132:      state->playedCardCount++;
        -: 1133:    }
        -: 1134:	
        -: 1135:  //set played card to -1
    #####: 1136:  state->hand[currentPlayer][handPos] = -1;
        -: 1137:	
        -: 1138:  //remove card from player's hand
    #####: 1139:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1140:    {
        -: 1141:      //reduce number of cards in hand
    #####: 1142:      state->handCount[currentPlayer]--;
        -: 1143:    }
    #####: 1144:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1145:    {
        -: 1146:      //reduce number of cards in hand
    #####: 1147:      state->handCount[currentPlayer]--;
        -: 1148:    }
        -: 1149:  else 	
        -: 1150:    {
        -: 1151:      //replace discarded card with last card in hand
    #####: 1152:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1153:      //set last card to -1
    #####: 1154:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1155:      //reduce number of cards in hand
    #####: 1156:      state->handCount[currentPlayer]--;
        -: 1157:    }
        -: 1158:	
    #####: 1159:  return 0;
        -: 1160:}
        -: 1161:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1162:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1163:{
        -: 1164:  //Note: supplyPos is enum of choosen card
        -: 1165:	
        -: 1166:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1167:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1168:    {
    #####: 1169:      return -1;
        -: 1170:    }
        -: 1171:	
        -: 1172:  //added card for [whoseTurn] current player:
        -: 1173:  // toFlag = 0 : add to discard
        -: 1174:  // toFlag = 1 : add to deck
        -: 1175:  // toFlag = 2 : add to hand
        -: 1176:
    #####: 1177:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1178:    {
    #####: 1179:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1180:      state->deckCount[player]++;
        -: 1181:    }
    #####: 1182:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1183:    {
    #####: 1184:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1185:      state->handCount[player]++;
        -: 1186:    }
        -: 1187:  else
        -: 1188:    {
    #####: 1189:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1190:      state->discardCount[player]++;
        -: 1191:    }
        -: 1192:	
        -: 1193:  //decrease number in supply pile
    #####: 1194:  state->supplyCount[supplyPos]--;
        -: 1195:	 
    #####: 1196:  return 0;
        -: 1197:}
        -: 1198:
function updateCoins called 1 returned 100% blocks executed 82%
        1: 1199:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1200:{
        -: 1201:  int i;
        -: 1202:	
        -: 1203:  //reset coin count
        1: 1204:  state->coins = 0;
        -: 1205:
        -: 1206:  //add coins for each Treasure card in player's hand
        6: 1207:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1208:    {
        5: 1209:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1210:	{
        4: 1211:	  state->coins += 1;
        -: 1212:	}
        1: 1213:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1214:	{
    #####: 1215:	  state->coins += 2;
        -: 1216:	}
        1: 1217:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1218:	{
    #####: 1219:	  state->coins += 3;
        -: 1220:	}	
        -: 1221:    }	
        -: 1222:
        -: 1223:  //add bonus
        1: 1224:  state->coins += bonus;
        -: 1225:
        1: 1226:  return 0;
        -: 1227:}
        -: 1228:
        -: 1229:/*** CS 362 Assignment 2 ***/
        -: 1230:
        -: 1231:/** Card #1. Adventurer
        -: 1232: * Function: cardEffect_adventurer
        -: 1233: * Refactored switch statements into function for adventurer card
        -: 1234: * Inputs: int currentPlayer, struct gameState *state
        -: 1235: * Outputs: returns 0
        -: 1236: * Bug: while(drawntreasure<6){ ... 
        -: 1237: *      Changed drawntreasure<2 to drawntreasure<6
        -: 1238: *      This bug causes the current player to draw more treasure cards. 
        -: 1239: */
function cardEffect_adventurer called 0 returned 0% blocks executed 0%
    #####: 1240:int cardEffect_adventurer (int currentPlayer, struct gameState *state)
        -: 1241:{
        -: 1242:	int temphand[MAX_HAND], // moved above the if statement
    #####: 1243:		z = 0, // this is the counter for the temp hand
    #####: 1244:	    drawntreasure = 0,
        -: 1245:	    cardDrawn;
        -: 1246:	
    #####: 1247:	while(drawntreasure<6){ //BUG: changed drawntreasure<2 to drawntreasure<6
branch  0 never executed
branch  1 never executed
    #####: 1248:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####: 1249:	  		shuffle(currentPlayer, state);
call    0 never executed
        -: 1250:		}
    #####: 1251:		drawCard(currentPlayer, state);
call    0 never executed
    #####: 1252:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1253:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1254:	  		drawntreasure++;
        -: 1255:		else{
    #####: 1256:	  		temphand[z]=cardDrawn;
    #####: 1257:	  		state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1258:	  		z++;
        -: 1259:		}
        -: 1260:      }
    #####: 1261:    while(z-1>=0) { 
branch  0 never executed
branch  1 never executed
    #####: 1262:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1263:		z=z-1;
        -: 1264:    }
    #####: 1265:    return 0;
        -: 1266:}
        -: 1267:
        -: 1268:/** Card #2. Council Room
        -: 1269: * Function: cardEffect_council_room
        -: 1270: * Refactored switch statements into function for council room card
        -: 1271: * Inputs: int currentPlayer, struct gameState *state, int handPos
        -: 1272: * Outputs: returns 0
        -: 1273: * Bugs: 
        -: 1274: * 1)for (i = 0; i < 2; i++){ ... 
        -: 1275: *   Changed from "for (i = 0; i < 4; i++){ ... "
        -: 1276: * 2)if ( i == currentPlayer )
        -: 1277: *	 Changed from i != currentPlayer
        -: 1278: */
function cardEffect_council_room called 0 returned 0% blocks executed 0%
    #####: 1279:int cardEffect_council_room (int currentPlayer, struct gameState *state, int handPos)
        -: 1280:{
        -: 1281:	int i;
        -: 1282:	
        -: 1283:	//+4 Cards
    #####: 1284:	for (i = 0; i < 2; i++) // BUG: i < 2 changed from for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1285:	{
    #####: 1286:		drawCard(currentPlayer, state);
call    0 never executed
        -: 1287:	}
        -: 1288:	
        -: 1289:	//+1 Buy
    #####: 1290:    state->numBuys++;
        -: 1291:			
        -: 1292:    //Each other player draws a card
    #####: 1293:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1294:	{
    #####: 1295:		if ( i == currentPlayer ) //BUG: changed to i ++ currentPlayerfrom i != currentPlayer
branch  0 never executed
branch  1 never executed
        -: 1296:	    {
    #####: 1297:	    	drawCard(i, state);
call    0 never executed
        -: 1298:	    }
        -: 1299:	}
        -: 1300:			
        -: 1301:    //put played card in played card pile
    #####: 1302:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1303:			
    #####: 1304:    return 0;
        -: 1305:}
        -: 1306:
        -: 1307:/** Card #3. Feast
        -: 1308: * Function: cardEffect_feast
        -: 1309: * Refactored switch statements into function for feast card
        -: 1310: * Inputs: int currentPlayer, struct gameState *state, int handPos, int choice1
        -: 1311: * Outputs: returns 0
        -: 1312: */
function cardEffect_feast called 0 returned 0% blocks executed 0%
    #####: 1313:int cardEffect_feast (int currentPlayer, struct gameState *state, int handPos, int choice1)
        -: 1314:{
        -: 1315:	int i, x;
        -: 1316:	int temphand[MAX_HAND];
        -: 1317:	
        -: 1318:	//gain card with cost up to 5
        -: 1319:	//Backup hand
    #####: 1320:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1321:		temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1322:		state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1323:    }
        -: 1324:    //Backup hand
        -: 1325:
        -: 1326:    //Update Coins for Buy
    #####: 1327:    updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####: 1328:    x = 1;//Condition to loop on
    #####: 1329:    while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####: 1330:		if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1331:	  		if (DEBUG){
        -: 1332:	    		printf("None of that card left, sorry!\n");
        -: 1333:	    	}
        -: 1334:	  		if (DEBUG){
        -: 1335:	    		printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1336:	  		}
        -: 1337:		}
    #####: 1338:		else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1339:	  		printf("That card is too expensive!\n");
call    0 never executed
        -: 1340:	  		if (DEBUG){
        -: 1341:	    		printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1342:	  		}
        -: 1343:		}
        -: 1344:		else{
        -: 1345:			if (DEBUG){
        -: 1346:	    		printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1347:	  		}
    #####: 1348:			gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####: 1349:			x = 0;//No more buying cards
        -: 1350:			if (DEBUG){
        -: 1351:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1352:			}
        -: 1353:		}
        -: 1354:    }     
        -: 1355:
        -: 1356:    //Reset Hand
    #####: 1357:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1358:		state->hand[currentPlayer][i] = temphand[i];
    #####: 1359:		temphand[i] = -1;
        -: 1360:    }
        -: 1361:    //Reset Hand		
    #####: 1362:    return 0;
        -: 1363:}
        -: 1364:
        -: 1365:/** Card #4. Smithy
        -: 1366: * Function: cardEffect_smithy
        -: 1367: * Refactored switch statements into function for smithy card
        -: 1368: * Inputs: int currentPlayer, struct gameState *state, int handPos
        -: 1369: * Outputs: returns 0
        -: 1370: * Bugs: for (i = 0; i < 1; i++) changed from "for (i = 0; i < 3; i++)"
        -: 1371: */
function cardEffect_smithy called 0 returned 0% blocks executed 0%
    #####: 1372:int cardEffect_smithy(int currentPlayer, struct gameState *state, int handPos)
        -: 1373:{
        -: 1374:	int i;
        -: 1375:	
        -: 1376:	//+3 Cards
    #####: 1377:	for (i = 0; i < 4; i++) // Bug: changed from "for (i = 0; i < 3; i++)"
branch  0 never executed
branch  1 never executed
        -: 1378:	{
    #####: 1379:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1380:	}
        -: 1381:			
        -: 1382:    //discard card from hand
    #####: 1383:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1384:    return 0;	
        -: 1385:}
        -: 1386:
        -: 1387:/** Card #5. Village
        -: 1388: * Function: cardEffect_village
        -: 1389: * Refactored switch statements into function for village card
        -: 1390: * Inputs: int currentPlayer, struct gameState *state, int handPos
        -: 1391: * Outputs: returns 0
        -: 1392: * Bugs: Code for +2 actions changed to +4 actions
        -: 1393: */
function cardEffect_village called 0 returned 0% blocks executed 0%
    #####: 1394:int cardEffect_village (int currentPlayer, struct gameState *state, int handPos)
        -: 1395:{
        -: 1396:	//+1 Card
    #####: 1397:    drawCard(currentPlayer, state);
call    0 never executed
        -: 1398:			
        -: 1399:     //+2 Actions
    #####: 1400:    state->numActions = state->numActions + 4; //Bug: 2 changed to 4
        -: 1401:			
        -: 1402:    //discard played card from hand
    #####: 1403:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1404:    return 0;
        -: 1405:}
        -: 1406:
        -: 1407:
        -: 1408://end of dominion.c
        -: 1409:
unittest3.c:
**********************************************
Testing -> gainCard()

Test 1: empty supply pile

   1-A Ran out of copper card

   1-B Ran out of silver card

   1-C Ran out of gold card


Test 2: supply card not used in the game

   2-A Copper card not used in the game

   2-B Silver card not used in the game

   2-C Gold card not used in the game 


Test 3: check if flags work correctly

   3-A check if toFlag == 0, then add a card to discard on current player. 
    Return value should be 0.

   3-B check if toFlag == 1, then add a card to deck on current player. 
    Return value should be 0.

   3-C check if toFlag == 2, then add a card to hand on current player. 
    Return value should be 0. 

   3-D if toFlag < 0 (i.e. invalid), then discard a card and return 0.

   3-E if toFlag > 2 (i.e. invalid) return 0.


Test 4: check if the function decrease the number in supply pile and return 0

   4-A Check to see if number of copper card decreased

   4-B Check to see if number of silver card decreased

   4-C Check to see if number of gold card decreased

***************** RESULTS *********************

PASSED ALL THE TESTS

TEST SUCCESSFULLY COMPLETED

**********************************************
File 'unittest3.c'
Lines executed:96.30% of 81
Branches executed:100.00% of 4
Taken at least once:50.00% of 4
Calls executed:96.72% of 61
Creating 'unittest3.c.gcov'

        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:* Author: Ju An
        -:    3:* Date: April 29, 2018
        -:    4:* OSU CS 362 - Assignment 3: Unit Test 3
        -:    5:* This program is a unit test for gainCard() function in dominion.c
        -:    6:*/
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include "rngs.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:
        -:   14:// for more detailed results, use NOISY_TEST 1
        -:   15:#define NOISY_TEST 0
        -:   16:
        -:   17:// asserttrue function instead of the standard C assert
        -:   18:// if assert is not true return 1
function asserttrue called 17 returned 100% blocks executed 75%
       17:   19:int asserttrue (int testedVal, int expectedVal) 
        -:   20:{
       17:   21:	if (expectedVal == testedVal) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   22:		#if (NOISY_TEST == 1)
        -:   23:			printf("\n	Actual value: %d, Expected value: %d\n", testedVal, expectedVal);
        -:   24:			printf("\n	PASS (assertion true)\n");
        -:   25:		#endif
       17:   26:		return 0;
        -:   27:	} else {
        -:   28:		#if (NOISY_TEST == 1)
        -:   29:			printf("\n	Actual value: %d, Expected value: %d\n", testedVal, expectedVal);	
        -:   30:			printf("\n	FAIL (assertion false)\n");
        -:   31:		#endif
    #####:   32:		return 1;
        -:   33:	}
        -:   34:}
        -:   35:
        -:   36:// runs the tests
function main called 1 returned 100% blocks executed 97%
        1:   37:int main () {
        -:   38:    // counts failed tests
        1:   39:	int failure = 0;
        -:   40:        
        -:   41:    // test game variable initialization
        1:   42:	int seed = 12321;
        1:   43:	int numPlayer = 2;
        1:   44:	int curPlayer = 1;
        1:   45:	int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   46:               remodel, smithy, village, baron, great_hall};
        -:   47:	struct gameState G;
        -:   48:    
        1:   49:	printf("**********************************************\n");
call    0 returned 100%
        1:   50:    printf("Testing -> gainCard()\n");
call    0 returned 100%
        -:   51:    
        -:   52:    // (int supplyPos, struct gameState, int toFlag, int player)
        -:   53:    // check to see if supply pile ie empty or card is not used in the game -> returns -1
        1:   54:    printf("\nTest 1: empty supply pile\n");
call    0 returned 100%
        1:   55:    memset(&G, 23, sizeof(struct gameState));   		 // clear the game state
        1:   56:    initializeGame(numPlayer, k, seed, &G);   // initialize a new game
call    0 returned 100%
        1:   57:    printf("\n   1-A Ran out of copper card\n");
call    0 returned 100%
        1:   58:    G.supplyCount[copper] = 0;
        1:   59:    failure  += asserttrue(gainCard(copper,&G,0,curPlayer),-1);
call    0 returned 100%
call    1 returned 100%
        -:   60:    
        1:   61:    printf("\n   1-B Ran out of silver card\n");
call    0 returned 100%
        1:   62:    G.supplyCount[silver] = 0;
        1:   63:    failure  += asserttrue(gainCard(silver,&G,0,curPlayer),-1);
call    0 returned 100%
call    1 returned 100%
        -:   64:    
        1:   65:    printf("\n   1-C Ran out of gold card\n");
call    0 returned 100%
        1:   66:    G.supplyCount[gold] = 0;
        1:   67:    failure  += asserttrue(gainCard(gold,&G,0,curPlayer),-1);
call    0 returned 100%
call    1 returned 100%
        -:   68:    
        1:   69:    printf("\n\nTest 2: supply card not used in the game\n");
call    0 returned 100%
        1:   70:    memset(&G, 23, sizeof(struct gameState));   		 // clear the game state
        1:   71:    initializeGame(numPlayer, k, seed, &G);   			 // initialize a new game
call    0 returned 100%
        -:   72:    // fill up the supply card
        1:   73:    G.supplyCount[copper] = 30;
        1:   74:    G.supplyCount[silver] = 30;
        1:   75:    G.supplyCount[gold] = 30;
        1:   76:    printf("\n   2-A Copper card not used in the game\n");
call    0 returned 100%
        1:   77:    G.supplyCount[copper] = -1;
        1:   78:    failure  += asserttrue(gainCard(copper,&G,0,curPlayer),-1);
call    0 returned 100%
call    1 returned 100%
        -:   79:    
        1:   80:    printf("\n   2-B Silver card not used in the game\n");
call    0 returned 100%
        1:   81:    G.supplyCount[silver] = -1;
        1:   82:    failure  += asserttrue(gainCard(silver,&G,0,curPlayer),-1);
call    0 returned 100%
call    1 returned 100%
        -:   83:    
        1:   84:    printf("\n   2-C Gold card not used in the game \n");
call    0 returned 100%
        1:   85:    G.supplyCount[gold] = -1;
        1:   86:    failure  += asserttrue(gainCard(gold,&G,0,curPlayer),-1);
call    0 returned 100%
call    1 returned 100%
        -:   87:	
        1:   88:	printf("\n\nTest 3: check if flags work correctly\n");
call    0 returned 100%
        1:   89:    memset(&G, 23, sizeof(struct gameState));   		 // clear the game state
        1:   90:    initializeGame(numPlayer, k, seed, &G);   			 // initialize a new game
call    0 returned 100%
        -:   91:    
        1:   92:    printf("\n   3-A check if toFlag == 0, then add a card to discard on current player. \n    Return value should be 0.\n");
call    0 returned 100%
        1:   93:    G.supplyCount[gold] = 30;
        -:   94:    #if (NOISY_TEST == 1)
        -:   95:    	printf("\n  Initial discardCount = %d\n", G.discardCount[curPlayer]);
        -:   96:    	printf("\n  Initial # of gold card = %d (should be 30)\n", G.supplyCount[gold]);
        -:   97:    #endif
        1:   98:    failure  += asserttrue(gainCard(gold,&G,0,curPlayer),0);
call    0 returned 100%
call    1 returned 100%
        -:   99:    #if (NOISY_TEST == 1)
        -:  100:		printf("\n  New discardCount = %d\n", G.discardCount[curPlayer]);
        -:  101:    	printf("\n  New # of gold card = %d\n", G.supplyCount[gold]);
        -:  102:    #endif
        -:  103:    
        1:  104:    printf("\n   3-B check if toFlag == 1, then add a card to deck on current player. \n    Return value should be 0.\n");
call    0 returned 100%
        1:  105:    G.supplyCount[gold] = 30;    
        -:  106:    #if (NOISY_TEST == 1)
        -:  107:    	printf("\n  Initial deckCount = %d\n", G.deckCount[curPlayer]);
        -:  108:    	//printf("\n  Initial # of gold card = %d (should be 30)\n", G.supplyCount[gold]);
        -:  109:    #endif
        1:  110:    failure  += asserttrue(gainCard(gold,&G,1,curPlayer),0);
call    0 returned 100%
call    1 returned 100%
        -:  111:	#if (NOISY_TEST == 1)
        -:  112:		printf("\n  New deckCount = %d\n", G.deckCount[curPlayer]);
        -:  113:    	//printf("\n  New # of gold card = %d\n", G.supplyCount[gold]);
        -:  114:    #endif
        -:  115:    
        1:  116:    printf("\n   3-C check if toFlag == 2, then add a card to hand on current player. \n    Return value should be 0. \n");
call    0 returned 100%
        1:  117:    G.supplyCount[gold] = 30;
        -:  118:    #if (NOISY_TEST == 1)
        -:  119:    	printf("\n  Initial handCount = %d\n", G.handCount[curPlayer]);
        -:  120:    	//printf("\n  Initial # of gold card = %d (should be 30)\n", G.supplyCount[gold]);
        -:  121:    #endif
        1:  122:    failure  += asserttrue(gainCard(gold,&G,2,curPlayer),0);
call    0 returned 100%
call    1 returned 100%
        -:  123:	#if (NOISY_TEST == 1)
        -:  124:		printf("\n  New handCount = %d\n", G.handCount[curPlayer]);
        -:  125:    	//printf("\n  New # of gold card = %d\n", G.supplyCount[gold]);
        -:  126:    #endif
        -:  127:    
        1:  128:    printf("\n   3-D if toFlag < 0 (i.e. invalid), then discard a card and return 0.\n");
call    0 returned 100%
        -:  129:    #if (NOISY_TEST == 1)
        -:  130:    	printf("\n  Initial discardCount = %d\n", G.discardCount[curPlayer]);
        -:  131:    	printf("\n  Initial deckCount = %d\n", G.deckCount[curPlayer]);
        -:  132:    	printf("\n  Initial handCount = %d\n", G.handCount[curPlayer]);
        -:  133:    	printf("\n  Initial # of gold card = %d (should be 30)\n", G.supplyCount[gold]);
        -:  134:    #endif
        1:  135:    failure  += asserttrue(gainCard(gold,&G,-1,curPlayer), 0);
call    0 returned 100%
call    1 returned 100%
        -:  136:    #if (NOISY_TEST == 1)
        -:  137:    	printf("\n  New discardCount = %d\n", G.discardCount[curPlayer]);
        -:  138:    	printf("\n  New deckCount = %d\n", G.deckCount[curPlayer]);
        -:  139:    	printf("\n  New handCount = %d\n", G.handCount[curPlayer]);
        -:  140:    	printf("\n  New # of gold card = %d (should be 30)\n", G.supplyCount[gold]);
        -:  141:    #endif
        -:  142:    
        1:  143:    printf("\n   3-E if toFlag > 2 (i.e. invalid) return 0.\n");
call    0 returned 100%
        -:  144:    #if (NOISY_TEST == 1)
        -:  145:    	printf("\n  Initial discardCount = %d\n", G.discardCount[curPlayer]);
        -:  146:    	printf("\n  Initial deckCount = %d\n", G.deckCount[curPlayer]);
        -:  147:    	printf("\n  Initial handCount = %d\n", G.handCount[curPlayer]);
        -:  148:    	printf("\n  Initial # of gold card = %d (should be 30)\n", G.supplyCount[gold]);
        -:  149:    #endif
        1:  150:    failure  += asserttrue(gainCard(gold,&G,3,curPlayer), 0);
call    0 returned 100%
call    1 returned 100%
        -:  151:    #if (NOISY_TEST == 1)
        -:  152:    	printf("\n  New discardCount = %d\n", G.discardCount[curPlayer]);
        -:  153:    	printf("\n  New deckCount = %d\n", G.deckCount[curPlayer]);
        -:  154:    	printf("\n  New handCount = %d\n", G.handCount[curPlayer]);
        -:  155:    	printf("\n  New # of gold card = %d (should be 30)\n", G.supplyCount[gold]);
        -:  156:    #endif
        -:  157:    
        1:  158:	printf("\n\nTest 4: check if the function decrease the number in supply pile and return 0\n");
call    0 returned 100%
        1:  159:    memset(&G, 23, sizeof(struct gameState));   		 // clear the game state
        1:  160:    initializeGame(numPlayer, k, seed, &G);   			 // initialize a new game
call    0 returned 100%
        -:  161:    // fill up the supply card
        1:  162:    G.supplyCount[copper] = 30;
        1:  163:    G.supplyCount[silver] = 30;
        1:  164:    G.supplyCount[gold] = 30;
        -:  165:    
        1:  166:    printf("\n   4-A Check to see if number of copper card decreased\n");
call    0 returned 100%
        1:  167:    int copperSupply = G.supplyCount[copper];
        1:  168:    failure  += asserttrue(gainCard(copper,&G,0,0), 0);
call    0 returned 100%
call    1 returned 100%
        1:  169:    failure  += asserttrue(copperSupply-1,G.supplyCount[copper]);
call    0 returned 100%
        -:  170:    
        1:  171:    printf("\n   4-B Check to see if number of silver card decreased\n");
call    0 returned 100%
        1:  172:    int silverSupply = G.supplyCount[silver];
        1:  173:    failure  += asserttrue(gainCard(silver,&G,0,0), 0);
call    0 returned 100%
call    1 returned 100%
        1:  174:    failure  += asserttrue(silverSupply-1,G.supplyCount[silver]);
call    0 returned 100%
        -:  175:    
        1:  176:    printf("\n   4-C Check to see if number of gold card decreased\n");
call    0 returned 100%
        1:  177:    int goldSupply = G.supplyCount[gold];
        1:  178:    failure  += asserttrue(gainCard(gold,&G,0,0), 0);
call    0 returned 100%
call    1 returned 100%
        1:  179:    failure  += asserttrue(goldSupply-1,G.supplyCount[gold]);
call    0 returned 100%
        -:  180:
        1:  181:	printf("\n***************** RESULTS *********************\n");
call    0 returned 100%
        1:  182:    if (failure) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  183:        printf("\nTEST FAILED\n");
call    0 never executed
    #####:  184:        printf("Fails: %d\n",failure);
call    0 never executed
        -:  185:    }
        -:  186:    else {
        1:  187:        printf("\nPASSED ALL THE TESTS\n");
call    0 returned 100%
        1:  188:        printf("\nTEST SUCCESSFULLY COMPLETED\n\n");
call    0 returned 100%
        -:  189:    }
        1:  190:	printf("**********************************************\n");
call    0 returned 100%
        1:  191:    return 0;
        -:  192:}
File 'dominion.c'
Lines executed:25.81% of 558
Branches executed:25.90% of 417
Taken at least once:23.02% of 417
Calls executed:8.42% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:3
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 150 returned 100% blocks executed 83%
      150:    8:int compare(const void* a, const void* b) {
      150:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
      150:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       40:   12:    return -1;
      110:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 5 returned 100% blocks executed 88%
        5:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        5:   44:  SelectStream(1);
call    0 returned 100%
        5:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
        5:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        5:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       55:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      550:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      500:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        5:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        5:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        5:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        5:   89:      state->supplyCount[estate] = 8;
        5:   90:      state->supplyCount[duchy] = 8;
        5:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        5:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        5:  102:  state->supplyCount[silver] = 40;
        5:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      105:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
      825:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
      775:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       50:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
       20:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       10:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       40:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       50:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      725:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       15:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
       10:  140:      state->deckCount[i] = 0;
       40:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       30:  143:	  state->deck[i][j] = estate;
       30:  144:	  state->deckCount[i]++;
        -:  145:	}
       80:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
       70:  148:	  state->deck[i][j] = copper;
       70:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       15:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
       10:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       15:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       10:  166:      state->handCount[i] = 0;
       10:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      140:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      135:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        5:  182:  state->outpostPlayed = 0;
        5:  183:  state->phase = 0;
        5:  184:  state->numActions = 1;
        5:  185:  state->numBuys = 1;
        5:  186:  state->playedCardCount = 0;
        5:  187:  state->whoseTurn = 0;
        5:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       30:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       25:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        5:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        5:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 10 returned 100% blocks executed 94%
       10:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       10:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       10:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
       10:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      120:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      100:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      100:  216:    newDeck[newDeckPos] = state->deck[player][card];
      100:  217:    newDeckPos++;
      355:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
      255:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      100:  221:    state->deckCount[player]--;
        -:  222:  }
      110:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      100:  224:    state->deck[player][i] = newDeck[i];
      100:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       10:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 14 returned 100% blocks executed 100%
       14:  320:int supplyCount(int card, struct gameState *state) {
       14:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 6 returned 100% blocks executed 100%
        6:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        6:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        4:  401:  j = 0;
      104:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
      100:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  405:	{
        6:  406:	  j++;
        -:  407:	}
        -:  408:    }
        4:  409:  if ( j >= 3)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        3:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 25 returned 100% blocks executed 38%
       25:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       25:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       25:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       25:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       25:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       25:  576:    state->deckCount[player]--;
       25:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       25:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 29 returned 100% blocks executed 100%
       29:  583:int getCost(int cardNumber)
        -:  584:{
       29:  585:  switch( cardNumber ) 
branch  0 taken 3%
branch  1 taken 3%
branch  2 taken 3%
branch  3 taken 3%
branch  4 taken 3%
branch  5 taken 3%
branch  6 taken 3%
branch  7 taken 3%
branch  8 taken 3%
branch  9 taken 3%
branch 10 taken 3%
branch 11 taken 3%
branch 12 taken 3%
branch 13 taken 3%
branch 14 taken 3%
branch 15 taken 3%
branch 16 taken 3%
branch 17 taken 3%
branch 18 taken 3%
branch 19 taken 3%
branch 20 taken 3%
branch 21 taken 3%
branch 22 taken 3%
branch 23 taken 3%
branch 24 taken 3%
branch 25 taken 3%
branch 26 taken 3%
branch 27 taken 7%
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
        1:  590:      return 2;
        -:  591:    case duchy:
        1:  592:      return 5;
        -:  593:    case province:
        1:  594:      return 8;
        -:  595:    case copper:
        1:  596:      return 0;
        -:  597:    case silver:
        1:  598:      return 3;
        -:  599:    case gold:
        1:  600:      return 6;
        -:  601:    case adventurer:
        1:  602:      return 6;
        -:  603:    case council_room:
        1:  604:      return 5;
        -:  605:    case feast:
        1:  606:      return 4;
        -:  607:    case gardens:
        1:  608:      return 4;
        -:  609:    case mine:
        1:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
        1:  614:      return 4;
        -:  615:    case village:
        1:  616:      return 3;
        -:  617:    case baron:
        1:  618:      return 4;
        -:  619:    case great_hall:
        1:  620:      return 3;
        -:  621:    case minion:
        1:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
        1:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
        1:  630:      return 4;
        -:  631:    case embargo: 
        1:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
        1:  636:      return 4;
        -:  637:    case sea_hag:
        1:  638:      return 4;
        -:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:	
        2:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int index;
    #####:  652:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  653:  int nextPlayer = currentPlayer + 1;
    #####:  654:  int tributeRevealedCards[2] = {-1, -1};
    #####:  655:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  656:    nextPlayer = 0;
        -:  657:  }
        -:  658:  // variables NOT needed after refactoring
        -:  659:  //int x;
        -:  660:  //int temphand[MAX_HAND];// moved above the if statement
        -:  661:  //int drawntreasure=0;
        -:  662:  //int cardDrawn;
        -:  663:  //int z = 0;// this is the counter for the temp hand
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
    #####:  667:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  668:    {
        -:  669:    // Code Refactored with Bugs
        -:  670:    case adventurer:
    #####:  671:      return cardEffect_adventurer (currentPlayer, state);
call    0 never executed
        -:  672:	
        -:  673:	// Code Refactored with Bugs
        -:  674:    case council_room:
    #####:  675:      return cardEffect_council_room (currentPlayer, state, handPos);
call    0 never executed
        -:  676:	
        -:  677:	// Code Refactored		
        -:  678:    case feast:
    #####:  679:      return cardEffect_feast (currentPlayer, state, handPos, choice1);
call    0 never executed
        -:  680:     
        -:  681:    case gardens:
    #####:  682:      return -1;
        -:  683:			
        -:  684:    case mine:
    #####:  685:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  686:
    #####:  687:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  688:	{
    #####:  689:	  return -1;
        -:  690:	}
        -:  691:		
    #####:  692:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  693:	{
    #####:  694:	  return -1;
        -:  695:	}
        -:  696:
    #####:  697:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  698:	{
    #####:  699:	  return -1;
        -:  700:	}
        -:  701:
    #####:  702:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  703:
        -:  704:      //discard card from hand
    #####:  705:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  706:
        -:  707:      //discard trashed card
    #####:  708:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  709:	{
    #####:  710:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  711:	    {
    #####:  712:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  713:	      break;
        -:  714:	    }
        -:  715:	}
        -:  716:			
    #####:  717:      return 0;
        -:  718:			
        -:  719:    case remodel:
    #####:  720:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  721:
    #####:  722:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  723:	{
    #####:  724:	  return -1;
        -:  725:	}
        -:  726:
    #####:  727:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  728:
        -:  729:      //discard card from hand
    #####:  730:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  731:
        -:  732:      //discard trashed card
    #####:  733:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  734:	{
    #####:  735:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  736:	    {
    #####:  737:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  738:	      break;
        -:  739:	    }
        -:  740:	}
    #####:  741:      return 0;
        -:  742:		
        -:  743:    // Code Refactored with Bugs
        -:  744:    case smithy:
    #####:  745:    	return cardEffect_smithy(currentPlayer, state, handPos);
call    0 never executed
        -:  746:		
        -:  747:    // Code Refactored with Bugs
        -:  748:    case village:
    #####:  749:    	return cardEffect_village (currentPlayer, state, handPos);
call    0 never executed
        -:  750:		
        -:  751:    case baron:
    #####:  752:      state->numBuys++;//Increase buys by 1!
    #####:  753:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  754:	int p = 0;//Iterator for hand!
    #####:  755:	int card_not_discarded = 1;//Flag for discard set!
    #####:  756:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  757:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  758:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  759:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  760:	    state->discardCount[currentPlayer]++;
    #####:  761:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  762:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  763:	    }
    #####:  764:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  765:	    state->handCount[currentPlayer]--;
    #####:  766:	    card_not_discarded = 0;//Exit the loop
        -:  767:	  }
    #####:  768:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  769:	    if(DEBUG) {
        -:  770:	      printf("No estate cards in your hand, invalid choice\n");
        -:  771:	      printf("Must gain an estate if there are any\n");
        -:  772:	    }
    #####:  773:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  774:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  775:	      state->supplyCount[estate]--;//Decrement estates
    #####:  776:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  777:		isGameOver(state);
call    0 never executed
        -:  778:	      }
        -:  779:	    }
    #####:  780:	    card_not_discarded = 0;//Exit the loop
        -:  781:	  }
        -:  782:			    
        -:  783:	  else{
    #####:  784:	    p++;//Next card
        -:  785:	  }
        -:  786:	}
        -:  787:      }
        -:  788:			    
        -:  789:      else{
    #####:  790:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  791:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  792:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  793:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  794:	    isGameOver(state);
call    0 never executed
        -:  795:	  }
        -:  796:	}
        -:  797:      }
        -:  798:	    
        -:  799:      
    #####:  800:      return 0;
        -:  801:		
        -:  802:    case great_hall:
        -:  803:      //+1 Card
    #####:  804:      drawCard(currentPlayer, state);
call    0 never executed
        -:  805:			
        -:  806:      //+1 Actions
    #####:  807:      state->numActions++;
        -:  808:			
        -:  809:      //discard card from hand
    #####:  810:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  811:      return 0;
        -:  812:		
        -:  813:    case minion:
        -:  814:      //+1 action
    #####:  815:      state->numActions++;
        -:  816:			
        -:  817:      //discard card from hand
    #####:  818:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  819:			
    #####:  820:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  821:	{
    #####:  822:	  state->coins = state->coins + 2;
        -:  823:	}
        -:  824:			
    #####:  825:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  826:	{
        -:  827:	  //discard hand
    #####:  828:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  829:	    {
    #####:  830:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  831:	    }
        -:  832:				
        -:  833:	  //draw 4
    #####:  834:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  835:	    {
    #####:  836:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  837:	    }
        -:  838:				
        -:  839:	  //other players discard hand and redraw if hand size > 4
    #####:  840:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  841:	    {
    #####:  842:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  843:		{
    #####:  844:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  845:		    {
        -:  846:		      //discard hand
    #####:  847:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  848:			{
    #####:  849:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  850:			}
        -:  851:							
        -:  852:		      //draw 4
    #####:  853:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  854:			{
    #####:  855:			  drawCard(i, state);
call    0 never executed
        -:  856:			}
        -:  857:		    }
        -:  858:		}
        -:  859:	    }
        -:  860:				
        -:  861:	}
    #####:  862:      return 0;
        -:  863:		
        -:  864:    case steward:
    #####:  865:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  866:	{
        -:  867:	  //+2 cards
    #####:  868:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  869:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  870:	}
    #####:  871:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  872:	{
        -:  873:	  //+2 coins
    #####:  874:	  state->coins = state->coins + 2;
        -:  875:	}
        -:  876:      else
        -:  877:	{
        -:  878:	  //trash 2 cards in hand
    #####:  879:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  880:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  881:	}
        -:  882:			
        -:  883:      //discard card from hand
    #####:  884:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  885:      return 0;
        -:  886:		
        -:  887:    case tribute:
    #####:  888:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  889:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  890:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  891:	  state->deckCount[nextPlayer]--;
        -:  892:	}
    #####:  893:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  894:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  895:	  state->discardCount[nextPlayer]--;
        -:  896:	}
        -:  897:	else{
        -:  898:	  //No Card to Reveal
        -:  899:	  if (DEBUG){
        -:  900:	    printf("No cards to reveal\n");
        -:  901:	  }
        -:  902:	}
        -:  903:      }
        -:  904:	    
        -:  905:      else{
    #####:  906:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  907:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  908:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  909:	    state->deckCount[nextPlayer]++;
    #####:  910:	    state->discard[nextPlayer][i] = -1;
    #####:  911:	    state->discardCount[nextPlayer]--;
        -:  912:	  }
        -:  913:			    
    #####:  914:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  915:	} 
    #####:  916:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  917:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  918:	state->deckCount[nextPlayer]--;
    #####:  919:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  920:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  921:	state->deckCount[nextPlayer]--;
        -:  922:      }    
        -:  923:		       
    #####:  924:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  925:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  926:	state->playedCardCount++;
    #####:  927:	tributeRevealedCards[1] = -1;
        -:  928:      }
        -:  929:
    #####:  930:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  931:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  932:	  state->coins += 2;
        -:  933:	}
        -:  934:		    
    #####:  935:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  936:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  937:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  938:	}
        -:  939:	else{//Action Card
    #####:  940:	  state->numActions = state->numActions + 2;
        -:  941:	}
        -:  942:      }
        -:  943:	    
    #####:  944:      return 0;
        -:  945:		
        -:  946:    case ambassador:
    #####:  947:      j = 0;		//used to check if player has enough cards to discard
        -:  948:
    #####:  949:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  950:	{
    #####:  951:	  return -1;				
        -:  952:	}
        -:  953:
    #####:  954:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  955:	{
    #####:  956:	  return -1;
        -:  957:	}
        -:  958:
    #####:  959:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  960:	{
    #####:  961:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  962:	    {
    #####:  963:	      j++;
        -:  964:	    }
        -:  965:	}
    #####:  966:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  967:	{
    #####:  968:	  return -1;				
        -:  969:	}
        -:  970:
        -:  971:      if (DEBUG) 
        -:  972:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  973:
        -:  974:      //increase supply count for choosen card by amount being discarded
    #####:  975:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  976:			
        -:  977:      //each other player gains a copy of revealed card
    #####:  978:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  979:	{
    #####:  980:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  981:	    {
    #####:  982:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  983:	    }
        -:  984:	}
        -:  985:
        -:  986:      //discard played card from hand
    #####:  987:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  988:
        -:  989:      //trash copies of cards returned to supply
    #####:  990:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  991:	{
    #####:  992:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  993:	    {
    #####:  994:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  995:		{
    #####:  996:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  997:		  break;
        -:  998:		}
        -:  999:	    }
        -: 1000:	}			
        -: 1001:
    #####: 1002:      return 0;
        -: 1003:		
        -: 1004:    case cutpurse:
        -: 1005:
    #####: 1006:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1007:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1008:	{
    #####: 1009:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1010:	    {
    #####: 1011:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1012:		{
    #####: 1013:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1014:		    {
    #####: 1015:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1016:		      break;
        -: 1017:		    }
    #####: 1018:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1019:		    {
    #####: 1020:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1021:			{
        -: 1022:			  if (DEBUG)
        -: 1023:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1024:			}	
    #####: 1025:		      break;
        -: 1026:		    }		
        -: 1027:		}
        -: 1028:					
        -: 1029:	    }
        -: 1030:				
        -: 1031:	}				
        -: 1032:
        -: 1033:      //discard played card from hand
    #####: 1034:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1035:
    #####: 1036:      return 0;
        -: 1037:
        -: 1038:		
        -: 1039:    case embargo: 
        -: 1040:      //+2 Coins
    #####: 1041:      state->coins = state->coins + 2;
        -: 1042:			
        -: 1043:      //see if selected pile is in play
    #####: 1044:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1045:	{
    #####: 1046:	  return -1;
        -: 1047:	}
        -: 1048:			
        -: 1049:      //add embargo token to selected supply pile
    #####: 1050:      state->embargoTokens[choice1]++;
        -: 1051:			
        -: 1052:      //trash card
    #####: 1053:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1054:      return 0;
        -: 1055:		
        -: 1056:    case outpost:
        -: 1057:      //set outpost flag
    #####: 1058:      state->outpostPlayed++;
        -: 1059:			
        -: 1060:      //discard card
    #####: 1061:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1062:      return 0;
        -: 1063:		
        -: 1064:    case salvager:
        -: 1065:      //+1 buy
    #####: 1066:      state->numBuys++;
        -: 1067:			
    #####: 1068:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1069:	{
        -: 1070:	  //gain coins equal to trashed card
    #####: 1071:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1072:	  //trash card
    #####: 1073:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1074:	}
        -: 1075:			
        -: 1076:      //discard card
    #####: 1077:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1078:      return 0;
        -: 1079:		
        -: 1080:    case sea_hag:
    #####: 1081:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1082:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1083:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1084:	  state->discardCount[i]++;
    #####: 1085:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1086:	}
        -: 1087:      }
    #####: 1088:      return 0;
        -: 1089:		
        -: 1090:    case treasure_map:
        -: 1091:      //search hand for another treasure_map
    #####: 1092:      index = -1;
    #####: 1093:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1094:	{
    #####: 1095:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1096:	    {
    #####: 1097:	      index = i;
    #####: 1098:	      break;
        -: 1099:	    }
        -: 1100:	}
    #####: 1101:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1102:	{
        -: 1103:	  //trash both treasure cards
    #####: 1104:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1105:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1106:
        -: 1107:	  //gain 4 Gold cards
    #####: 1108:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1109:	    {
    #####: 1110:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1111:	    }
        -: 1112:				
        -: 1113:	  //return success
    #####: 1114:	  return 1;
        -: 1115:	}
        -: 1116:			
        -: 1117:      //no second treasure_map found in hand
    #####: 1118:      return -1;
        -: 1119:    }
        -: 1120:	
    #####: 1121:  return -1;
        -: 1122:}
        -: 1123:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1124:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1125:{
        -: 1126:	
        -: 1127:  //if card is not trashed, added to Played pile 
    #####: 1128:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1129:    {
        -: 1130:      //add card to played pile
    #####: 1131:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1132:      state->playedCardCount++;
        -: 1133:    }
        -: 1134:	
        -: 1135:  //set played card to -1
    #####: 1136:  state->hand[currentPlayer][handPos] = -1;
        -: 1137:	
        -: 1138:  //remove card from player's hand
    #####: 1139:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1140:    {
        -: 1141:      //reduce number of cards in hand
    #####: 1142:      state->handCount[currentPlayer]--;
        -: 1143:    }
    #####: 1144:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1145:    {
        -: 1146:      //reduce number of cards in hand
    #####: 1147:      state->handCount[currentPlayer]--;
        -: 1148:    }
        -: 1149:  else 	
        -: 1150:    {
        -: 1151:      //replace discarded card with last card in hand
    #####: 1152:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1153:      //set last card to -1
    #####: 1154:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1155:      //reduce number of cards in hand
    #####: 1156:      state->handCount[currentPlayer]--;
        -: 1157:    }
        -: 1158:	
    #####: 1159:  return 0;
        -: 1160:}
        -: 1161:
function gainCard called 14 returned 100% blocks executed 100%
       14: 1162:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1163:{
        -: 1164:  //Note: supplyPos is enum of choosen card
        -: 1165:	
        -: 1166:  //check if supply pile is empty (0) or card is not used in game (-1)
       14: 1167:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 43% (fallthrough)
branch  2 taken 57%
        -: 1168:    {
        6: 1169:      return -1;
        -: 1170:    }
        -: 1171:	
        -: 1172:  //added card for [whoseTurn] current player:
        -: 1173:  // toFlag = 0 : add to discard
        -: 1174:  // toFlag = 1 : add to deck
        -: 1175:  // toFlag = 2 : add to hand
        -: 1176:
        8: 1177:  if (toFlag == 1)
branch  0 taken 13% (fallthrough)
branch  1 taken 88%
        -: 1178:    {
        1: 1179:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1180:      state->deckCount[player]++;
        -: 1181:    }
        7: 1182:  else if (toFlag == 2)
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        -: 1183:    {
        1: 1184:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1185:      state->handCount[player]++;
        -: 1186:    }
        -: 1187:  else
        -: 1188:    {
        6: 1189:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        6: 1190:      state->discardCount[player]++;
        -: 1191:    }
        -: 1192:	
        -: 1193:  //decrease number in supply pile
        8: 1194:  state->supplyCount[supplyPos]--;
        -: 1195:	 
        8: 1196:  return 0;
        -: 1197:}
        -: 1198:
function updateCoins called 5 returned 100% blocks executed 82%
        5: 1199:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1200:{
        -: 1201:  int i;
        -: 1202:	
        -: 1203:  //reset coin count
        5: 1204:  state->coins = 0;
        -: 1205:
        -: 1206:  //add coins for each Treasure card in player's hand
       30: 1207:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1208:    {
       25: 1209:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1210:	{
       20: 1211:	  state->coins += 1;
        -: 1212:	}
        5: 1213:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1214:	{
    #####: 1215:	  state->coins += 2;
        -: 1216:	}
        5: 1217:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1218:	{
    #####: 1219:	  state->coins += 3;
        -: 1220:	}	
        -: 1221:    }	
        -: 1222:
        -: 1223:  //add bonus
        5: 1224:  state->coins += bonus;
        -: 1225:
        5: 1226:  return 0;
        -: 1227:}
        -: 1228:
        -: 1229:/*** CS 362 Assignment 2 ***/
        -: 1230:
        -: 1231:/** Card #1. Adventurer
        -: 1232: * Function: cardEffect_adventurer
        -: 1233: * Refactored switch statements into function for adventurer card
        -: 1234: * Inputs: int currentPlayer, struct gameState *state
        -: 1235: * Outputs: returns 0
        -: 1236: * Bug: while(drawntreasure<6){ ... 
        -: 1237: *      Changed drawntreasure<2 to drawntreasure<6
        -: 1238: *      This bug causes the current player to draw more treasure cards. 
        -: 1239: */
function cardEffect_adventurer called 0 returned 0% blocks executed 0%
    #####: 1240:int cardEffect_adventurer (int currentPlayer, struct gameState *state)
        -: 1241:{
        -: 1242:	int temphand[MAX_HAND], // moved above the if statement
    #####: 1243:		z = 0, // this is the counter for the temp hand
    #####: 1244:	    drawntreasure = 0,
        -: 1245:	    cardDrawn;
        -: 1246:	
    #####: 1247:	while(drawntreasure<6){ //BUG: changed drawntreasure<2 to drawntreasure<6
branch  0 never executed
branch  1 never executed
    #####: 1248:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####: 1249:	  		shuffle(currentPlayer, state);
call    0 never executed
        -: 1250:		}
    #####: 1251:		drawCard(currentPlayer, state);
call    0 never executed
    #####: 1252:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1253:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1254:	  		drawntreasure++;
        -: 1255:		else{
    #####: 1256:	  		temphand[z]=cardDrawn;
    #####: 1257:	  		state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1258:	  		z++;
        -: 1259:		}
        -: 1260:      }
    #####: 1261:    while(z-1>=0) { 
branch  0 never executed
branch  1 never executed
    #####: 1262:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1263:		z=z-1;
        -: 1264:    }
    #####: 1265:    return 0;
        -: 1266:}
        -: 1267:
        -: 1268:/** Card #2. Council Room
        -: 1269: * Function: cardEffect_council_room
        -: 1270: * Refactored switch statements into function for council room card
        -: 1271: * Inputs: int currentPlayer, struct gameState *state, int handPos
        -: 1272: * Outputs: returns 0
        -: 1273: * Bugs: 
        -: 1274: * 1)for (i = 0; i < 2; i++){ ... 
        -: 1275: *   Changed from "for (i = 0; i < 4; i++){ ... "
        -: 1276: * 2)if ( i == currentPlayer )
        -: 1277: *	 Changed from i != currentPlayer
        -: 1278: */
function cardEffect_council_room called 0 returned 0% blocks executed 0%
    #####: 1279:int cardEffect_council_room (int currentPlayer, struct gameState *state, int handPos)
        -: 1280:{
        -: 1281:	int i;
        -: 1282:	
        -: 1283:	//+4 Cards
    #####: 1284:	for (i = 0; i < 2; i++) // BUG: i < 2 changed from for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1285:	{
    #####: 1286:		drawCard(currentPlayer, state);
call    0 never executed
        -: 1287:	}
        -: 1288:	
        -: 1289:	//+1 Buy
    #####: 1290:    state->numBuys++;
        -: 1291:			
        -: 1292:    //Each other player draws a card
    #####: 1293:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1294:	{
    #####: 1295:		if ( i == currentPlayer ) //BUG: changed to i ++ currentPlayerfrom i != currentPlayer
branch  0 never executed
branch  1 never executed
        -: 1296:	    {
    #####: 1297:	    	drawCard(i, state);
call    0 never executed
        -: 1298:	    }
        -: 1299:	}
        -: 1300:			
        -: 1301:    //put played card in played card pile
    #####: 1302:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1303:			
    #####: 1304:    return 0;
        -: 1305:}
        -: 1306:
        -: 1307:/** Card #3. Feast
        -: 1308: * Function: cardEffect_feast
        -: 1309: * Refactored switch statements into function for feast card
        -: 1310: * Inputs: int currentPlayer, struct gameState *state, int handPos, int choice1
        -: 1311: * Outputs: returns 0
        -: 1312: */
function cardEffect_feast called 0 returned 0% blocks executed 0%
    #####: 1313:int cardEffect_feast (int currentPlayer, struct gameState *state, int handPos, int choice1)
        -: 1314:{
        -: 1315:	int i, x;
        -: 1316:	int temphand[MAX_HAND];
        -: 1317:	
        -: 1318:	//gain card with cost up to 5
        -: 1319:	//Backup hand
    #####: 1320:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1321:		temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1322:		state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1323:    }
        -: 1324:    //Backup hand
        -: 1325:
        -: 1326:    //Update Coins for Buy
    #####: 1327:    updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####: 1328:    x = 1;//Condition to loop on
    #####: 1329:    while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####: 1330:		if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1331:	  		if (DEBUG){
        -: 1332:	    		printf("None of that card left, sorry!\n");
        -: 1333:	    	}
        -: 1334:	  		if (DEBUG){
        -: 1335:	    		printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1336:	  		}
        -: 1337:		}
    #####: 1338:		else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1339:	  		printf("That card is too expensive!\n");
call    0 never executed
        -: 1340:	  		if (DEBUG){
        -: 1341:	    		printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1342:	  		}
        -: 1343:		}
        -: 1344:		else{
        -: 1345:			if (DEBUG){
        -: 1346:	    		printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1347:	  		}
    #####: 1348:			gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####: 1349:			x = 0;//No more buying cards
        -: 1350:			if (DEBUG){
        -: 1351:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1352:			}
        -: 1353:		}
        -: 1354:    }     
        -: 1355:
        -: 1356:    //Reset Hand
    #####: 1357:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1358:		state->hand[currentPlayer][i] = temphand[i];
    #####: 1359:		temphand[i] = -1;
        -: 1360:    }
        -: 1361:    //Reset Hand		
    #####: 1362:    return 0;
        -: 1363:}
        -: 1364:
        -: 1365:/** Card #4. Smithy
        -: 1366: * Function: cardEffect_smithy
        -: 1367: * Refactored switch statements into function for smithy card
        -: 1368: * Inputs: int currentPlayer, struct gameState *state, int handPos
        -: 1369: * Outputs: returns 0
        -: 1370: * Bugs: for (i = 0; i < 1; i++) changed from "for (i = 0; i < 3; i++)"
        -: 1371: */
function cardEffect_smithy called 0 returned 0% blocks executed 0%
    #####: 1372:int cardEffect_smithy(int currentPlayer, struct gameState *state, int handPos)
        -: 1373:{
        -: 1374:	int i;
        -: 1375:	
        -: 1376:	//+3 Cards
    #####: 1377:	for (i = 0; i < 4; i++) // Bug: changed from "for (i = 0; i < 3; i++)"
branch  0 never executed
branch  1 never executed
        -: 1378:	{
    #####: 1379:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1380:	}
        -: 1381:			
        -: 1382:    //discard card from hand
    #####: 1383:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1384:    return 0;	
        -: 1385:}
        -: 1386:
        -: 1387:/** Card #5. Village
        -: 1388: * Function: cardEffect_village
        -: 1389: * Refactored switch statements into function for village card
        -: 1390: * Inputs: int currentPlayer, struct gameState *state, int handPos
        -: 1391: * Outputs: returns 0
        -: 1392: * Bugs: Code for +2 actions changed to +4 actions
        -: 1393: */
function cardEffect_village called 0 returned 0% blocks executed 0%
    #####: 1394:int cardEffect_village (int currentPlayer, struct gameState *state, int handPos)
        -: 1395:{
        -: 1396:	//+1 Card
    #####: 1397:    drawCard(currentPlayer, state);
call    0 never executed
        -: 1398:			
        -: 1399:     //+2 Actions
    #####: 1400:    state->numActions = state->numActions + 4; //Bug: 2 changed to 4
        -: 1401:			
        -: 1402:    //discard played card from hand
    #####: 1403:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1404:    return 0;
        -: 1405:}
        -: 1406:
        -: 1407:
        -: 1408://end of dominion.c
        -: 1409:
unittest4.c:
**********************************************
Testing -> updateCoins()

Test 0: Test player 1 with 1 treasure card(s) and 1 bonus.

Test 1: Test player 1 with 1 treasure card(s) and 2 bonus.

Test 2: Test player 1 with 1 treasure card(s) and 3 bonus.

Test 3: Test player 1 with 1 treasure card(s) and 4 bonus.

Test 4: Test player 1 with 1 treasure card(s) and 5 bonus.

Test 5: Test player 1 with 1 treasure card(s) and 6 bonus.

Test 6: Test player 1 with 1 treasure card(s) and 7 bonus.

Test 7: Test player 1 with 1 treasure card(s) and 8 bonus.

Test 8: Test player 1 with 1 treasure card(s) and 9 bonus.

Test 9: Test player 1 with 1 treasure card(s) and 10 bonus.

Test 10: Test player 1 with 2 treasure card(s) and 1 bonus.

Test 11: Test player 1 with 2 treasure card(s) and 2 bonus.

Test 12: Test player 1 with 2 treasure card(s) and 3 bonus.

Test 13: Test player 1 with 2 treasure card(s) and 4 bonus.

Test 14: Test player 1 with 2 treasure card(s) and 5 bonus.

Test 15: Test player 1 with 2 treasure card(s) and 6 bonus.

Test 16: Test player 1 with 2 treasure card(s) and 7 bonus.

Test 17: Test player 1 with 2 treasure card(s) and 8 bonus.

Test 18: Test player 1 with 2 treasure card(s) and 9 bonus.

Test 19: Test player 1 with 2 treasure card(s) and 10 bonus.

Test 20: Test player 1 with 3 treasure card(s) and 1 bonus.

Test 21: Test player 1 with 3 treasure card(s) and 2 bonus.

Test 22: Test player 1 with 3 treasure card(s) and 3 bonus.

Test 23: Test player 1 with 3 treasure card(s) and 4 bonus.

Test 24: Test player 1 with 3 treasure card(s) and 5 bonus.

Test 25: Test player 1 with 3 treasure card(s) and 6 bonus.

Test 26: Test player 1 with 3 treasure card(s) and 7 bonus.

Test 27: Test player 1 with 3 treasure card(s) and 8 bonus.

Test 28: Test player 1 with 3 treasure card(s) and 9 bonus.

Test 29: Test player 1 with 3 treasure card(s) and 10 bonus.

Test 30: Test player 1 with 4 treasure card(s) and 1 bonus.

Test 31: Test player 1 with 4 treasure card(s) and 2 bonus.

Test 32: Test player 1 with 4 treasure card(s) and 3 bonus.

Test 33: Test player 1 with 4 treasure card(s) and 4 bonus.

Test 34: Test player 1 with 4 treasure card(s) and 5 bonus.

Test 35: Test player 1 with 4 treasure card(s) and 6 bonus.

Test 36: Test player 1 with 4 treasure card(s) and 7 bonus.

Test 37: Test player 1 with 4 treasure card(s) and 8 bonus.

Test 38: Test player 1 with 4 treasure card(s) and 9 bonus.

Test 39: Test player 1 with 4 treasure card(s) and 10 bonus.

Test 40: Test player 1 with 5 treasure card(s) and 1 bonus.

Test 41: Test player 1 with 5 treasure card(s) and 2 bonus.

Test 42: Test player 1 with 5 treasure card(s) and 3 bonus.

Test 43: Test player 1 with 5 treasure card(s) and 4 bonus.

Test 44: Test player 1 with 5 treasure card(s) and 5 bonus.

Test 45: Test player 1 with 5 treasure card(s) and 6 bonus.

Test 46: Test player 1 with 5 treasure card(s) and 7 bonus.

Test 47: Test player 1 with 5 treasure card(s) and 8 bonus.

Test 48: Test player 1 with 5 treasure card(s) and 9 bonus.

Test 49: Test player 1 with 5 treasure card(s) and 10 bonus.

Test 50: Test player 2 with 1 treasure card(s) and 1 bonus.

Test 51: Test player 2 with 1 treasure card(s) and 2 bonus.

Test 52: Test player 2 with 1 treasure card(s) and 3 bonus.

Test 53: Test player 2 with 1 treasure card(s) and 4 bonus.

Test 54: Test player 2 with 1 treasure card(s) and 5 bonus.

Test 55: Test player 2 with 1 treasure card(s) and 6 bonus.

Test 56: Test player 2 with 1 treasure card(s) and 7 bonus.

Test 57: Test player 2 with 1 treasure card(s) and 8 bonus.

Test 58: Test player 2 with 1 treasure card(s) and 9 bonus.

Test 59: Test player 2 with 1 treasure card(s) and 10 bonus.

Test 60: Test player 2 with 2 treasure card(s) and 1 bonus.

Test 61: Test player 2 with 2 treasure card(s) and 2 bonus.

Test 62: Test player 2 with 2 treasure card(s) and 3 bonus.

Test 63: Test player 2 with 2 treasure card(s) and 4 bonus.

Test 64: Test player 2 with 2 treasure card(s) and 5 bonus.

Test 65: Test player 2 with 2 treasure card(s) and 6 bonus.

Test 66: Test player 2 with 2 treasure card(s) and 7 bonus.

Test 67: Test player 2 with 2 treasure card(s) and 8 bonus.

Test 68: Test player 2 with 2 treasure card(s) and 9 bonus.

Test 69: Test player 2 with 2 treasure card(s) and 10 bonus.

Test 70: Test player 2 with 3 treasure card(s) and 1 bonus.

Test 71: Test player 2 with 3 treasure card(s) and 2 bonus.

Test 72: Test player 2 with 3 treasure card(s) and 3 bonus.

Test 73: Test player 2 with 3 treasure card(s) and 4 bonus.

Test 74: Test player 2 with 3 treasure card(s) and 5 bonus.

Test 75: Test player 2 with 3 treasure card(s) and 6 bonus.

Test 76: Test player 2 with 3 treasure card(s) and 7 bonus.

Test 77: Test player 2 with 3 treasure card(s) and 8 bonus.

Test 78: Test player 2 with 3 treasure card(s) and 9 bonus.

Test 79: Test player 2 with 3 treasure card(s) and 10 bonus.

Test 80: Test player 2 with 4 treasure card(s) and 1 bonus.

Test 81: Test player 2 with 4 treasure card(s) and 2 bonus.

Test 82: Test player 2 with 4 treasure card(s) and 3 bonus.

Test 83: Test player 2 with 4 treasure card(s) and 4 bonus.

Test 84: Test player 2 with 4 treasure card(s) and 5 bonus.

Test 85: Test player 2 with 4 treasure card(s) and 6 bonus.

Test 86: Test player 2 with 4 treasure card(s) and 7 bonus.

Test 87: Test player 2 with 4 treasure card(s) and 8 bonus.

Test 88: Test player 2 with 4 treasure card(s) and 9 bonus.

Test 89: Test player 2 with 4 treasure card(s) and 10 bonus.

Test 90: Test player 2 with 5 treasure card(s) and 1 bonus.

Test 91: Test player 2 with 5 treasure card(s) and 2 bonus.

Test 92: Test player 2 with 5 treasure card(s) and 3 bonus.

Test 93: Test player 2 with 5 treasure card(s) and 4 bonus.

Test 94: Test player 2 with 5 treasure card(s) and 5 bonus.

Test 95: Test player 2 with 5 treasure card(s) and 6 bonus.

Test 96: Test player 2 with 5 treasure card(s) and 7 bonus.

Test 97: Test player 2 with 5 treasure card(s) and 8 bonus.

Test 98: Test player 2 with 5 treasure card(s) and 9 bonus.

Test 99: Test player 2 with 5 treasure card(s) and 10 bonus.

***************** RESULTS *********************

PASSED ALL THE TESTS

TEST SUCCESSFULLY COMPLETED

**********************************************
File 'unittest4.c'
Lines executed:92.86% of 42
Branches executed:100.00% of 12
Taken at least once:83.33% of 12
Calls executed:87.50% of 16
Creating 'unittest4.c.gcov'

        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:* Author: Ju An
        -:    3:* Date: April 29, 2018
        -:    4:* OSU CS 362 - Assignment 3: Unit Test 4
        -:    5:* This program is a unit test for updateCoin() function in dominion.c
        -:    6:* Modified version of testUpdateCoins.c (provided by the instructor)
        -:    7:*/
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include "rngs.h"
        -:   12:#include <string.h>
        -:   13:#include <stdio.h>
        -:   14:
        -:   15:// for more detailed results, use NOISY_TEST 1
        -:   16:#define NOISY_TEST 0
        -:   17:
        -:   18:// asserttrue function instead of the standard C assert
        -:   19:// if assert is not true return 1
function asserttrue called 300 returned 100% blocks executed 75%
      300:   20:int asserttrue (int testedVal, int expectedVal) 
        -:   21:{
      300:   22:	if (expectedVal == testedVal) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   23:		#if (NOISY_TEST == 1)
        -:   24:			//printf("\n	Actual value: %d, Expected value: %d\n", testedVal, expectedVal);
        -:   25:			printf("\n	PASS (assertion true)\n");
        -:   26:		#endif
      300:   27:		return 0;
        -:   28:	} else {
        -:   29:		#if (NOISY_TEST == 1)
        -:   30:			//printf("\n	Actual value: %d, Expected value: %d\n", testedVal, expectedVal);	
        -:   31:			printf("\n	FAIL (assertion false)\n");
        -:   32:		#endif
    #####:   33:		return 1;
        -:   34:	}
        -:   35:}
        -:   36:
        -:   37:// testing the updateCoins() from dominion.c
function main called 1 returned 100% blocks executed 94%
        1:   38:int main()
        -:   39:{
        -:   40:    // counts failed tests
        1:   41:	int failure = 0;
        -:   42:    
        -:   43:    // test game variable initialization
        -:   44:    int i;
        1:   45:    int seed = 12321;	
        1:   46:    int numPlayer = 2;
        1:   47:    int bonus, maxBonus = 10;
        1:   48:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   49:               remodel, smithy, village, baron, great_hall};
        -:   50:    struct gameState G;
        1:   51:    int handCount, maxHandCount = 5;
        -:   52:    
        -:   53:	// arrays of all coppers, silvers, and golds
        -:   54:    int coppers[MAX_HAND];
        -:   55:    int silvers[MAX_HAND];
        -:   56:    int golds[MAX_HAND];
      501:   57:    for (i = 0; i < MAX_HAND; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
      500:   58:        coppers[i] = copper;
      500:   59:        silvers[i] = silver;
      500:   60:        golds[i] = gold;
        -:   61:    }
        -:   62:    
        1:   63:	printf("**********************************************\n");
call    0 returned 100%
        1:   64:    printf("Testing -> updateCoins()\n");
call    0 returned 100%
        1:   65:    int j = 0;
        3:   66:	for (i = 0; i < numPlayer; i++) {
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
       12:   67:		for (handCount = 1; handCount <= maxHandCount; handCount++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      110:   68:			for (bonus = 1; bonus <= maxBonus; bonus++){
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      100:   69:                memset(&G, 23, sizeof(struct gameState));   		 // clear the game state
      100:   70:                initializeGame(numPlayer, k, seed, &G);   // initialize a new game
call    0 returned 100%
        -:   71:				
        -:   72:				
      100:   73:                printf("\nTest %d: Test player %d with %d treasure card(s) and %d bonus.\n", j++,  i+1, handCount, bonus);
call    0 returned 100%
        -:   74:				
      100:   75:                G.handCount[i] = handCount;                 		 // set the number of cards on hand
        -:   76:                
        -:   77:                // TEST 1
      100:   78:                memcpy(G.hand[i], coppers, sizeof(int) * handCount); // set all the cards to copper
      100:   79:                updateCoins(i, &G, bonus);
call    0 returned 100%
        -:   80:				#if (NOISY_TEST == 1)
        -:   81:					printf("All Copper:  ");
        -:   82:                	printf("G.coins = %d, expected = %d\n", G.coins, handCount * 1 + bonus);
        -:   83:				#endif
      100:   84:                failure += asserttrue(G.coins, (handCount * 1 + bonus)); // check if the number of coins is correct
call    0 returned 100%
        -:   85:                
        -:   86:                // TEST 2
      100:   87:                memcpy(G.hand[i], silvers, sizeof(int) * handCount); // set all the cards to silver
      100:   88:                updateCoins(i, &G, bonus);
call    0 returned 100%
        -:   89:				#if (NOISY_TEST == 1)
        -:   90:					printf("All Silver:  ");
        -:   91:                	printf("G.coins = %d, expected = %d\n", G.coins, handCount * 2 + bonus);
        -:   92:				#endif
      100:   93:                failure += asserttrue(G.coins, (handCount * 2 + bonus)); // check if the number of coins is correct
call    0 returned 100%
        -:   94:				
        -:   95:				// TEST 3
      100:   96:                memcpy(G.hand[i], golds, sizeof(int) * handCount); // set all the cards to gold
      100:   97:                updateCoins(i, &G, bonus);
call    0 returned 100%
        -:   98:				#if (NOISY_TEST == 1)
        -:   99:					printf("All   Gold:  ");
        -:  100:					printf("G.coins = %d, expected = %d\n", G.coins, handCount * 3 + bonus);
        -:  101:				#endif
      100:  102:                failure += asserttrue(G.coins, (handCount * 3 + bonus)); // check if the number of coins is correct
call    0 returned 100%
        -:  103:                }
        -:  104:            }
        -:  105:		}
        1:  106:	printf("\n***************** RESULTS *********************\n");
call    0 returned 100%
        1:  107:    if (failure > 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  108:        printf("\nTEST FAILED\n");
call    0 never executed
    #####:  109:        printf("Count of failed tests: %d\n",failure);
call    0 never executed
        -:  110:    }
        -:  111:    else {
        1:  112:    	printf("\nPASSED ALL THE TESTS\n");
call    0 returned 100%
        1:  113:        printf("\nTEST SUCCESSFULLY COMPLETED\n\n");
call    0 returned 100%
        -:  114:    }
        1:  115:    printf("**********************************************\n");
call    0 returned 100%
        1:  116:	return 0;
        -:  117:}
File 'dominion.c'
Lines executed:26.16% of 558
Branches executed:25.90% of 417
Taken at least once:23.50% of 417
Calls executed:8.42% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:4
        -:    0:Programs:4
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 3150 returned 100% blocks executed 83%
     3150:    8:int compare(const void* a, const void* b) {
     3150:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
     3150:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
      840:   12:    return -1;
     2310:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 105 returned 100% blocks executed 88%
      105:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      105:   44:  SelectStream(1);
call    0 returned 100%
      105:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
      105:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      105:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     1155:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
    11550:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
    10500:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      105:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
      105:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      105:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
      105:   89:      state->supplyCount[estate] = 8;
      105:   90:      state->supplyCount[duchy] = 8;
      105:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      105:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      105:  102:  state->supplyCount[silver] = 40;
      105:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     2205:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
    17325:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
    16275:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     1050:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
      420:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      210:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      840:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     1050:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    15225:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      315:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
      210:  140:      state->deckCount[i] = 0;
      840:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
      630:  143:	  state->deck[i][j] = estate;
      630:  144:	  state->deckCount[i]++;
        -:  145:	}
     1680:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
     1470:  148:	  state->deck[i][j] = copper;
     1470:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      315:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
      210:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      315:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      210:  166:      state->handCount[i] = 0;
      210:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     2940:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
     2835:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      105:  182:  state->outpostPlayed = 0;
      105:  183:  state->phase = 0;
      105:  184:  state->numActions = 1;
      105:  185:  state->numBuys = 1;
      105:  186:  state->playedCardCount = 0;
      105:  187:  state->whoseTurn = 0;
      105:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      630:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      525:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
      105:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
      105:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 210 returned 100% blocks executed 94%
      210:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      210:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      210:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
      210:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     2520:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     2100:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     2100:  216:    newDeck[newDeckPos] = state->deck[player][card];
     2100:  217:    newDeckPos++;
     7455:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
     5355:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     2100:  221:    state->deckCount[player]--;
        -:  222:  }
     2310:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     2100:  224:    state->deck[player][i] = newDeck[i];
     2100:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      210:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 14 returned 100% blocks executed 100%
       14:  320:int supplyCount(int card, struct gameState *state) {
       14:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 6 returned 100% blocks executed 100%
        6:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        6:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        4:  401:  j = 0;
      104:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
      100:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  405:	{
        6:  406:	  j++;
        -:  407:	}
        -:  408:    }
        4:  409:  if ( j >= 3)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        3:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 525 returned 100% blocks executed 38%
      525:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      525:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      525:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      525:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      525:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      525:  576:    state->deckCount[player]--;
      525:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      525:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 29 returned 100% blocks executed 100%
       29:  583:int getCost(int cardNumber)
        -:  584:{
       29:  585:  switch( cardNumber ) 
branch  0 taken 3%
branch  1 taken 3%
branch  2 taken 3%
branch  3 taken 3%
branch  4 taken 3%
branch  5 taken 3%
branch  6 taken 3%
branch  7 taken 3%
branch  8 taken 3%
branch  9 taken 3%
branch 10 taken 3%
branch 11 taken 3%
branch 12 taken 3%
branch 13 taken 3%
branch 14 taken 3%
branch 15 taken 3%
branch 16 taken 3%
branch 17 taken 3%
branch 18 taken 3%
branch 19 taken 3%
branch 20 taken 3%
branch 21 taken 3%
branch 22 taken 3%
branch 23 taken 3%
branch 24 taken 3%
branch 25 taken 3%
branch 26 taken 3%
branch 27 taken 7%
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
        1:  590:      return 2;
        -:  591:    case duchy:
        1:  592:      return 5;
        -:  593:    case province:
        1:  594:      return 8;
        -:  595:    case copper:
        1:  596:      return 0;
        -:  597:    case silver:
        1:  598:      return 3;
        -:  599:    case gold:
        1:  600:      return 6;
        -:  601:    case adventurer:
        1:  602:      return 6;
        -:  603:    case council_room:
        1:  604:      return 5;
        -:  605:    case feast:
        1:  606:      return 4;
        -:  607:    case gardens:
        1:  608:      return 4;
        -:  609:    case mine:
        1:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
        1:  614:      return 4;
        -:  615:    case village:
        1:  616:      return 3;
        -:  617:    case baron:
        1:  618:      return 4;
        -:  619:    case great_hall:
        1:  620:      return 3;
        -:  621:    case minion:
        1:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
        1:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
        1:  630:      return 4;
        -:  631:    case embargo: 
        1:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
        1:  636:      return 4;
        -:  637:    case sea_hag:
        1:  638:      return 4;
        -:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:	
        2:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int index;
    #####:  652:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  653:  int nextPlayer = currentPlayer + 1;
    #####:  654:  int tributeRevealedCards[2] = {-1, -1};
    #####:  655:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  656:    nextPlayer = 0;
        -:  657:  }
        -:  658:  // variables NOT needed after refactoring
        -:  659:  //int x;
        -:  660:  //int temphand[MAX_HAND];// moved above the if statement
        -:  661:  //int drawntreasure=0;
        -:  662:  //int cardDrawn;
        -:  663:  //int z = 0;// this is the counter for the temp hand
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
    #####:  667:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  668:    {
        -:  669:    // Code Refactored with Bugs
        -:  670:    case adventurer:
    #####:  671:      return cardEffect_adventurer (currentPlayer, state);
call    0 never executed
        -:  672:	
        -:  673:	// Code Refactored with Bugs
        -:  674:    case council_room:
    #####:  675:      return cardEffect_council_room (currentPlayer, state, handPos);
call    0 never executed
        -:  676:	
        -:  677:	// Code Refactored		
        -:  678:    case feast:
    #####:  679:      return cardEffect_feast (currentPlayer, state, handPos, choice1);
call    0 never executed
        -:  680:     
        -:  681:    case gardens:
    #####:  682:      return -1;
        -:  683:			
        -:  684:    case mine:
    #####:  685:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  686:
    #####:  687:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  688:	{
    #####:  689:	  return -1;
        -:  690:	}
        -:  691:		
    #####:  692:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  693:	{
    #####:  694:	  return -1;
        -:  695:	}
        -:  696:
    #####:  697:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  698:	{
    #####:  699:	  return -1;
        -:  700:	}
        -:  701:
    #####:  702:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  703:
        -:  704:      //discard card from hand
    #####:  705:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  706:
        -:  707:      //discard trashed card
    #####:  708:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  709:	{
    #####:  710:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  711:	    {
    #####:  712:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  713:	      break;
        -:  714:	    }
        -:  715:	}
        -:  716:			
    #####:  717:      return 0;
        -:  718:			
        -:  719:    case remodel:
    #####:  720:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  721:
    #####:  722:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  723:	{
    #####:  724:	  return -1;
        -:  725:	}
        -:  726:
    #####:  727:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  728:
        -:  729:      //discard card from hand
    #####:  730:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  731:
        -:  732:      //discard trashed card
    #####:  733:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  734:	{
    #####:  735:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  736:	    {
    #####:  737:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  738:	      break;
        -:  739:	    }
        -:  740:	}
    #####:  741:      return 0;
        -:  742:		
        -:  743:    // Code Refactored with Bugs
        -:  744:    case smithy:
    #####:  745:    	return cardEffect_smithy(currentPlayer, state, handPos);
call    0 never executed
        -:  746:		
        -:  747:    // Code Refactored with Bugs
        -:  748:    case village:
    #####:  749:    	return cardEffect_village (currentPlayer, state, handPos);
call    0 never executed
        -:  750:		
        -:  751:    case baron:
    #####:  752:      state->numBuys++;//Increase buys by 1!
    #####:  753:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  754:	int p = 0;//Iterator for hand!
    #####:  755:	int card_not_discarded = 1;//Flag for discard set!
    #####:  756:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  757:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  758:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  759:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  760:	    state->discardCount[currentPlayer]++;
    #####:  761:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  762:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  763:	    }
    #####:  764:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  765:	    state->handCount[currentPlayer]--;
    #####:  766:	    card_not_discarded = 0;//Exit the loop
        -:  767:	  }
    #####:  768:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  769:	    if(DEBUG) {
        -:  770:	      printf("No estate cards in your hand, invalid choice\n");
        -:  771:	      printf("Must gain an estate if there are any\n");
        -:  772:	    }
    #####:  773:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  774:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  775:	      state->supplyCount[estate]--;//Decrement estates
    #####:  776:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  777:		isGameOver(state);
call    0 never executed
        -:  778:	      }
        -:  779:	    }
    #####:  780:	    card_not_discarded = 0;//Exit the loop
        -:  781:	  }
        -:  782:			    
        -:  783:	  else{
    #####:  784:	    p++;//Next card
        -:  785:	  }
        -:  786:	}
        -:  787:      }
        -:  788:			    
        -:  789:      else{
    #####:  790:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  791:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  792:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  793:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  794:	    isGameOver(state);
call    0 never executed
        -:  795:	  }
        -:  796:	}
        -:  797:      }
        -:  798:	    
        -:  799:      
    #####:  800:      return 0;
        -:  801:		
        -:  802:    case great_hall:
        -:  803:      //+1 Card
    #####:  804:      drawCard(currentPlayer, state);
call    0 never executed
        -:  805:			
        -:  806:      //+1 Actions
    #####:  807:      state->numActions++;
        -:  808:			
        -:  809:      //discard card from hand
    #####:  810:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  811:      return 0;
        -:  812:		
        -:  813:    case minion:
        -:  814:      //+1 action
    #####:  815:      state->numActions++;
        -:  816:			
        -:  817:      //discard card from hand
    #####:  818:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  819:			
    #####:  820:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  821:	{
    #####:  822:	  state->coins = state->coins + 2;
        -:  823:	}
        -:  824:			
    #####:  825:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  826:	{
        -:  827:	  //discard hand
    #####:  828:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  829:	    {
    #####:  830:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  831:	    }
        -:  832:				
        -:  833:	  //draw 4
    #####:  834:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  835:	    {
    #####:  836:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  837:	    }
        -:  838:				
        -:  839:	  //other players discard hand and redraw if hand size > 4
    #####:  840:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  841:	    {
    #####:  842:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  843:		{
    #####:  844:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  845:		    {
        -:  846:		      //discard hand
    #####:  847:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  848:			{
    #####:  849:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  850:			}
        -:  851:							
        -:  852:		      //draw 4
    #####:  853:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  854:			{
    #####:  855:			  drawCard(i, state);
call    0 never executed
        -:  856:			}
        -:  857:		    }
        -:  858:		}
        -:  859:	    }
        -:  860:				
        -:  861:	}
    #####:  862:      return 0;
        -:  863:		
        -:  864:    case steward:
    #####:  865:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  866:	{
        -:  867:	  //+2 cards
    #####:  868:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  869:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  870:	}
    #####:  871:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  872:	{
        -:  873:	  //+2 coins
    #####:  874:	  state->coins = state->coins + 2;
        -:  875:	}
        -:  876:      else
        -:  877:	{
        -:  878:	  //trash 2 cards in hand
    #####:  879:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  880:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  881:	}
        -:  882:			
        -:  883:      //discard card from hand
    #####:  884:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  885:      return 0;
        -:  886:		
        -:  887:    case tribute:
    #####:  888:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  889:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  890:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  891:	  state->deckCount[nextPlayer]--;
        -:  892:	}
    #####:  893:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  894:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  895:	  state->discardCount[nextPlayer]--;
        -:  896:	}
        -:  897:	else{
        -:  898:	  //No Card to Reveal
        -:  899:	  if (DEBUG){
        -:  900:	    printf("No cards to reveal\n");
        -:  901:	  }
        -:  902:	}
        -:  903:      }
        -:  904:	    
        -:  905:      else{
    #####:  906:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  907:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  908:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  909:	    state->deckCount[nextPlayer]++;
    #####:  910:	    state->discard[nextPlayer][i] = -1;
    #####:  911:	    state->discardCount[nextPlayer]--;
        -:  912:	  }
        -:  913:			    
    #####:  914:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  915:	} 
    #####:  916:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  917:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  918:	state->deckCount[nextPlayer]--;
    #####:  919:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  920:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  921:	state->deckCount[nextPlayer]--;
        -:  922:      }    
        -:  923:		       
    #####:  924:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  925:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  926:	state->playedCardCount++;
    #####:  927:	tributeRevealedCards[1] = -1;
        -:  928:      }
        -:  929:
    #####:  930:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  931:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  932:	  state->coins += 2;
        -:  933:	}
        -:  934:		    
    #####:  935:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  936:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  937:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  938:	}
        -:  939:	else{//Action Card
    #####:  940:	  state->numActions = state->numActions + 2;
        -:  941:	}
        -:  942:      }
        -:  943:	    
    #####:  944:      return 0;
        -:  945:		
        -:  946:    case ambassador:
    #####:  947:      j = 0;		//used to check if player has enough cards to discard
        -:  948:
    #####:  949:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  950:	{
    #####:  951:	  return -1;				
        -:  952:	}
        -:  953:
    #####:  954:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  955:	{
    #####:  956:	  return -1;
        -:  957:	}
        -:  958:
    #####:  959:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  960:	{
    #####:  961:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  962:	    {
    #####:  963:	      j++;
        -:  964:	    }
        -:  965:	}
    #####:  966:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  967:	{
    #####:  968:	  return -1;				
        -:  969:	}
        -:  970:
        -:  971:      if (DEBUG) 
        -:  972:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  973:
        -:  974:      //increase supply count for choosen card by amount being discarded
    #####:  975:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  976:			
        -:  977:      //each other player gains a copy of revealed card
    #####:  978:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  979:	{
    #####:  980:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  981:	    {
    #####:  982:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  983:	    }
        -:  984:	}
        -:  985:
        -:  986:      //discard played card from hand
    #####:  987:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  988:
        -:  989:      //trash copies of cards returned to supply
    #####:  990:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  991:	{
    #####:  992:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  993:	    {
    #####:  994:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  995:		{
    #####:  996:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  997:		  break;
        -:  998:		}
        -:  999:	    }
        -: 1000:	}			
        -: 1001:
    #####: 1002:      return 0;
        -: 1003:		
        -: 1004:    case cutpurse:
        -: 1005:
    #####: 1006:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1007:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1008:	{
    #####: 1009:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1010:	    {
    #####: 1011:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1012:		{
    #####: 1013:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1014:		    {
    #####: 1015:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1016:		      break;
        -: 1017:		    }
    #####: 1018:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1019:		    {
    #####: 1020:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1021:			{
        -: 1022:			  if (DEBUG)
        -: 1023:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1024:			}	
    #####: 1025:		      break;
        -: 1026:		    }		
        -: 1027:		}
        -: 1028:					
        -: 1029:	    }
        -: 1030:				
        -: 1031:	}				
        -: 1032:
        -: 1033:      //discard played card from hand
    #####: 1034:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1035:
    #####: 1036:      return 0;
        -: 1037:
        -: 1038:		
        -: 1039:    case embargo: 
        -: 1040:      //+2 Coins
    #####: 1041:      state->coins = state->coins + 2;
        -: 1042:			
        -: 1043:      //see if selected pile is in play
    #####: 1044:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1045:	{
    #####: 1046:	  return -1;
        -: 1047:	}
        -: 1048:			
        -: 1049:      //add embargo token to selected supply pile
    #####: 1050:      state->embargoTokens[choice1]++;
        -: 1051:			
        -: 1052:      //trash card
    #####: 1053:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1054:      return 0;
        -: 1055:		
        -: 1056:    case outpost:
        -: 1057:      //set outpost flag
    #####: 1058:      state->outpostPlayed++;
        -: 1059:			
        -: 1060:      //discard card
    #####: 1061:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1062:      return 0;
        -: 1063:		
        -: 1064:    case salvager:
        -: 1065:      //+1 buy
    #####: 1066:      state->numBuys++;
        -: 1067:			
    #####: 1068:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1069:	{
        -: 1070:	  //gain coins equal to trashed card
    #####: 1071:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1072:	  //trash card
    #####: 1073:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1074:	}
        -: 1075:			
        -: 1076:      //discard card
    #####: 1077:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1078:      return 0;
        -: 1079:		
        -: 1080:    case sea_hag:
    #####: 1081:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1082:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1083:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1084:	  state->discardCount[i]++;
    #####: 1085:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1086:	}
        -: 1087:      }
    #####: 1088:      return 0;
        -: 1089:		
        -: 1090:    case treasure_map:
        -: 1091:      //search hand for another treasure_map
    #####: 1092:      index = -1;
    #####: 1093:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1094:	{
    #####: 1095:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1096:	    {
    #####: 1097:	      index = i;
    #####: 1098:	      break;
        -: 1099:	    }
        -: 1100:	}
    #####: 1101:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1102:	{
        -: 1103:	  //trash both treasure cards
    #####: 1104:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1105:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1106:
        -: 1107:	  //gain 4 Gold cards
    #####: 1108:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1109:	    {
    #####: 1110:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1111:	    }
        -: 1112:				
        -: 1113:	  //return success
    #####: 1114:	  return 1;
        -: 1115:	}
        -: 1116:			
        -: 1117:      //no second treasure_map found in hand
    #####: 1118:      return -1;
        -: 1119:    }
        -: 1120:	
    #####: 1121:  return -1;
        -: 1122:}
        -: 1123:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1124:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1125:{
        -: 1126:	
        -: 1127:  //if card is not trashed, added to Played pile 
    #####: 1128:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1129:    {
        -: 1130:      //add card to played pile
    #####: 1131:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1132:      state->playedCardCount++;
        -: 1133:    }
        -: 1134:	
        -: 1135:  //set played card to -1
    #####: 1136:  state->hand[currentPlayer][handPos] = -1;
        -: 1137:	
        -: 1138:  //remove card from player's hand
    #####: 1139:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1140:    {
        -: 1141:      //reduce number of cards in hand
    #####: 1142:      state->handCount[currentPlayer]--;
        -: 1143:    }
    #####: 1144:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1145:    {
        -: 1146:      //reduce number of cards in hand
    #####: 1147:      state->handCount[currentPlayer]--;
        -: 1148:    }
        -: 1149:  else 	
        -: 1150:    {
        -: 1151:      //replace discarded card with last card in hand
    #####: 1152:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1153:      //set last card to -1
    #####: 1154:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1155:      //reduce number of cards in hand
    #####: 1156:      state->handCount[currentPlayer]--;
        -: 1157:    }
        -: 1158:	
    #####: 1159:  return 0;
        -: 1160:}
        -: 1161:
function gainCard called 14 returned 100% blocks executed 100%
       14: 1162:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1163:{
        -: 1164:  //Note: supplyPos is enum of choosen card
        -: 1165:	
        -: 1166:  //check if supply pile is empty (0) or card is not used in game (-1)
       14: 1167:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 43% (fallthrough)
branch  2 taken 57%
        -: 1168:    {
        6: 1169:      return -1;
        -: 1170:    }
        -: 1171:	
        -: 1172:  //added card for [whoseTurn] current player:
        -: 1173:  // toFlag = 0 : add to discard
        -: 1174:  // toFlag = 1 : add to deck
        -: 1175:  // toFlag = 2 : add to hand
        -: 1176:
        8: 1177:  if (toFlag == 1)
branch  0 taken 13% (fallthrough)
branch  1 taken 88%
        -: 1178:    {
        1: 1179:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1180:      state->deckCount[player]++;
        -: 1181:    }
        7: 1182:  else if (toFlag == 2)
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        -: 1183:    {
        1: 1184:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1185:      state->handCount[player]++;
        -: 1186:    }
        -: 1187:  else
        -: 1188:    {
        6: 1189:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        6: 1190:      state->discardCount[player]++;
        -: 1191:    }
        -: 1192:	
        -: 1193:  //decrease number in supply pile
        8: 1194:  state->supplyCount[supplyPos]--;
        -: 1195:	 
        8: 1196:  return 0;
        -: 1197:}
        -: 1198:
function updateCoins called 405 returned 100% blocks executed 100%
      405: 1199:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1200:{
        -: 1201:  int i;
        -: 1202:	
        -: 1203:  //reset coin count
      405: 1204:  state->coins = 0;
        -: 1205:
        -: 1206:  //add coins for each Treasure card in player's hand
     1830: 1207:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 78%
branch  1 taken 22% (fallthrough)
        -: 1208:    {
     1425: 1209:      if (state->hand[player][i] == copper)
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
        -: 1210:	{
      720: 1211:	  state->coins += 1;
        -: 1212:	}
      705: 1213:      else if (state->hand[player][i] == silver)
branch  0 taken 43% (fallthrough)
branch  1 taken 57%
        -: 1214:	{
      300: 1215:	  state->coins += 2;
        -: 1216:	}
      405: 1217:      else if (state->hand[player][i] == gold)
branch  0 taken 74% (fallthrough)
branch  1 taken 26%
        -: 1218:	{
      300: 1219:	  state->coins += 3;
        -: 1220:	}	
        -: 1221:    }	
        -: 1222:
        -: 1223:  //add bonus
      405: 1224:  state->coins += bonus;
        -: 1225:
      405: 1226:  return 0;
        -: 1227:}
        -: 1228:
        -: 1229:/*** CS 362 Assignment 2 ***/
        -: 1230:
        -: 1231:/** Card #1. Adventurer
        -: 1232: * Function: cardEffect_adventurer
        -: 1233: * Refactored switch statements into function for adventurer card
        -: 1234: * Inputs: int currentPlayer, struct gameState *state
        -: 1235: * Outputs: returns 0
        -: 1236: * Bug: while(drawntreasure<6){ ... 
        -: 1237: *      Changed drawntreasure<2 to drawntreasure<6
        -: 1238: *      This bug causes the current player to draw more treasure cards. 
        -: 1239: */
function cardEffect_adventurer called 0 returned 0% blocks executed 0%
    #####: 1240:int cardEffect_adventurer (int currentPlayer, struct gameState *state)
        -: 1241:{
        -: 1242:	int temphand[MAX_HAND], // moved above the if statement
    #####: 1243:		z = 0, // this is the counter for the temp hand
    #####: 1244:	    drawntreasure = 0,
        -: 1245:	    cardDrawn;
        -: 1246:	
    #####: 1247:	while(drawntreasure<6){ //BUG: changed drawntreasure<2 to drawntreasure<6
branch  0 never executed
branch  1 never executed
    #####: 1248:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####: 1249:	  		shuffle(currentPlayer, state);
call    0 never executed
        -: 1250:		}
    #####: 1251:		drawCard(currentPlayer, state);
call    0 never executed
    #####: 1252:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1253:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1254:	  		drawntreasure++;
        -: 1255:		else{
    #####: 1256:	  		temphand[z]=cardDrawn;
    #####: 1257:	  		state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1258:	  		z++;
        -: 1259:		}
        -: 1260:      }
    #####: 1261:    while(z-1>=0) { 
branch  0 never executed
branch  1 never executed
    #####: 1262:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1263:		z=z-1;
        -: 1264:    }
    #####: 1265:    return 0;
        -: 1266:}
        -: 1267:
        -: 1268:/** Card #2. Council Room
        -: 1269: * Function: cardEffect_council_room
        -: 1270: * Refactored switch statements into function for council room card
        -: 1271: * Inputs: int currentPlayer, struct gameState *state, int handPos
        -: 1272: * Outputs: returns 0
        -: 1273: * Bugs: 
        -: 1274: * 1)for (i = 0; i < 2; i++){ ... 
        -: 1275: *   Changed from "for (i = 0; i < 4; i++){ ... "
        -: 1276: * 2)if ( i == currentPlayer )
        -: 1277: *	 Changed from i != currentPlayer
        -: 1278: */
function cardEffect_council_room called 0 returned 0% blocks executed 0%
    #####: 1279:int cardEffect_council_room (int currentPlayer, struct gameState *state, int handPos)
        -: 1280:{
        -: 1281:	int i;
        -: 1282:	
        -: 1283:	//+4 Cards
    #####: 1284:	for (i = 0; i < 2; i++) // BUG: i < 2 changed from for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1285:	{
    #####: 1286:		drawCard(currentPlayer, state);
call    0 never executed
        -: 1287:	}
        -: 1288:	
        -: 1289:	//+1 Buy
    #####: 1290:    state->numBuys++;
        -: 1291:			
        -: 1292:    //Each other player draws a card
    #####: 1293:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1294:	{
    #####: 1295:		if ( i == currentPlayer ) //BUG: changed to i ++ currentPlayerfrom i != currentPlayer
branch  0 never executed
branch  1 never executed
        -: 1296:	    {
    #####: 1297:	    	drawCard(i, state);
call    0 never executed
        -: 1298:	    }
        -: 1299:	}
        -: 1300:			
        -: 1301:    //put played card in played card pile
    #####: 1302:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1303:			
    #####: 1304:    return 0;
        -: 1305:}
        -: 1306:
        -: 1307:/** Card #3. Feast
        -: 1308: * Function: cardEffect_feast
        -: 1309: * Refactored switch statements into function for feast card
        -: 1310: * Inputs: int currentPlayer, struct gameState *state, int handPos, int choice1
        -: 1311: * Outputs: returns 0
        -: 1312: */
function cardEffect_feast called 0 returned 0% blocks executed 0%
    #####: 1313:int cardEffect_feast (int currentPlayer, struct gameState *state, int handPos, int choice1)
        -: 1314:{
        -: 1315:	int i, x;
        -: 1316:	int temphand[MAX_HAND];
        -: 1317:	
        -: 1318:	//gain card with cost up to 5
        -: 1319:	//Backup hand
    #####: 1320:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1321:		temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1322:		state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1323:    }
        -: 1324:    //Backup hand
        -: 1325:
        -: 1326:    //Update Coins for Buy
    #####: 1327:    updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####: 1328:    x = 1;//Condition to loop on
    #####: 1329:    while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####: 1330:		if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1331:	  		if (DEBUG){
        -: 1332:	    		printf("None of that card left, sorry!\n");
        -: 1333:	    	}
        -: 1334:	  		if (DEBUG){
        -: 1335:	    		printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1336:	  		}
        -: 1337:		}
    #####: 1338:		else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1339:	  		printf("That card is too expensive!\n");
call    0 never executed
        -: 1340:	  		if (DEBUG){
        -: 1341:	    		printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1342:	  		}
        -: 1343:		}
        -: 1344:		else{
        -: 1345:			if (DEBUG){
        -: 1346:	    		printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1347:	  		}
    #####: 1348:			gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####: 1349:			x = 0;//No more buying cards
        -: 1350:			if (DEBUG){
        -: 1351:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1352:			}
        -: 1353:		}
        -: 1354:    }     
        -: 1355:
        -: 1356:    //Reset Hand
    #####: 1357:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1358:		state->hand[currentPlayer][i] = temphand[i];
    #####: 1359:		temphand[i] = -1;
        -: 1360:    }
        -: 1361:    //Reset Hand		
    #####: 1362:    return 0;
        -: 1363:}
        -: 1364:
        -: 1365:/** Card #4. Smithy
        -: 1366: * Function: cardEffect_smithy
        -: 1367: * Refactored switch statements into function for smithy card
        -: 1368: * Inputs: int currentPlayer, struct gameState *state, int handPos
        -: 1369: * Outputs: returns 0
        -: 1370: * Bugs: for (i = 0; i < 1; i++) changed from "for (i = 0; i < 3; i++)"
        -: 1371: */
function cardEffect_smithy called 0 returned 0% blocks executed 0%
    #####: 1372:int cardEffect_smithy(int currentPlayer, struct gameState *state, int handPos)
        -: 1373:{
        -: 1374:	int i;
        -: 1375:	
        -: 1376:	//+3 Cards
    #####: 1377:	for (i = 0; i < 4; i++) // Bug: changed from "for (i = 0; i < 3; i++)"
branch  0 never executed
branch  1 never executed
        -: 1378:	{
    #####: 1379:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1380:	}
        -: 1381:			
        -: 1382:    //discard card from hand
    #####: 1383:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1384:    return 0;	
        -: 1385:}
        -: 1386:
        -: 1387:/** Card #5. Village
        -: 1388: * Function: cardEffect_village
        -: 1389: * Refactored switch statements into function for village card
        -: 1390: * Inputs: int currentPlayer, struct gameState *state, int handPos
        -: 1391: * Outputs: returns 0
        -: 1392: * Bugs: Code for +2 actions changed to +4 actions
        -: 1393: */
function cardEffect_village called 0 returned 0% blocks executed 0%
    #####: 1394:int cardEffect_village (int currentPlayer, struct gameState *state, int handPos)
        -: 1395:{
        -: 1396:	//+1 Card
    #####: 1397:    drawCard(currentPlayer, state);
call    0 never executed
        -: 1398:			
        -: 1399:     //+2 Actions
    #####: 1400:    state->numActions = state->numActions + 4; //Bug: 2 changed to 4
        -: 1401:			
        -: 1402:    //discard played card from hand
    #####: 1403:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1404:    return 0;
        -: 1405:}
        -: 1406:
        -: 1407:
        -: 1408://end of dominion.c
        -: 1409:
cardtest1.c:
**********************************************
Testing -> Adventurer Card

< P1 Data BEFORE Adventurer Card is Played >
Player 1 has 5 cards in hand.
Player 1 has 5 cards in deck.
Player 1 has 5 treasure cards in hand.
Player 1 has 2 treasure cards in deck.
Player 1 has 1 actions.

< P1 Data AFTER Adventurer Card is Played >
Player 1 has 7 cards in hand.
Player 1 has 0 cards in deck.
Player 1 has 7 treasure cards in hand.
Player 1 has 0 treasure cards in deck.
Player 1 has 1 actions.

***************** RESULTS *********************

TEST 1. Player 1's Treasure counts should increase by 2 after card is played 

   Checking Player 1's handCount

	Expected value: 7, actual value: 7

	PASS (assertion true)

   Checking Player 1's deckCount

	Expected value: 5, actual value: 2

	FAIL (assertion false)

   Checking Player 1's treasure count in hand

	Expected value: 7, actual value: 7

	PASS (assertion true)

TEST 2. Player 2's handCount and deckCount remains the same

   Checking Player 2's handCount

	Expected value: 0, actual value: 0

	PASS (assertion true)

   Checking Player 2's deckCount

	Expected value: 10, actual value: 10

	PASS (assertion true)

TEST 3. Check if kingdom and victory cards have any bugs

   Checking kingdom cards' supply piles

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 8, actual value: 8

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 8, actual value: 8

	PASS (assertion true)

   Checking province card pile:

	Expected value: 8, actual value: 8

	PASS (assertion true)

   Checking duchy card pile:

	Expected value: 8, actual value: 8

	PASS (assertion true)

   Checking estate card pile:

	Expected value: 8, actual value: 8

	PASS (assertion true)

TEST FAILED
Count of failed tests: 1
**********************************************
File 'cardtest1.c'
Lines executed:94.62% of 93
Branches executed:63.16% of 38
Taken at least once:47.37% of 38
Calls executed:95.74% of 47
Creating 'cardtest1.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:* Author: Ju An
        -:    3:* Date: April 29, 2018
        -:    4:* OSU CS 362 - Assignment 3: Card Test 1
        -:    5:* This is a unit test for Adventurer card in dominion.c
        -:    6:*/
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include "rngs.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:
        -:   14:// for more detailed results, use NOISY_TEST 1
        -:   15:#define NOISY_TEST 1
        -:   16:
        -:   17:// asserttrue function instead of the standard C assert
        -:   18:// if assert is not true return 1
function asserttrue called 18 returned 100% blocks executed 100%
       18:   19:int asserttrue (int expectedVal, int testedVal) 
        -:   20:{
       18:   21:	if (testedVal == expectedVal) {
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
        -:   22:		#if (NOISY_TEST == 1)
       17:   23:			printf("\n	Expected value: %d, actual value: %d\n", expectedVal, testedVal);
call    0 returned 100%
       17:   24:			printf("\n	PASS (assertion true)\n");
call    0 returned 100%
        -:   25:		#endif
       17:   26:		return 0;
        -:   27:	} else {
        -:   28:		#if (NOISY_TEST == 1)
        1:   29:			printf("\n	Expected value: %d, actual value: %d\n", expectedVal, testedVal);	
call    0 returned 100%
        1:   30:			printf("\n	FAIL (assertion false)\n");
call    0 returned 100%
        -:   31:		#endif
        1:   32:		return 1;
        -:   33:	}
        -:   34:}
        -:   35:
        -:   36:// testing the cardEffect() function (refactored) from dominion.c
        -:   37:// test should work whether a card is implemented inside cardEffect or in its own function
function main called 1 returned 100% blocks executed 86%
        1:   38:int main()
        -:   39:{
        -:   40:    // counts failed tests
        1:   41:	int failure = 0;
        -:   42:    
        -:   43:    // test variable initialization
        -:   44:	int i;
        1:   45:	int handpos = 0;
        1:   46:	int choice1 = 0;
        1:   47:	int choice2 = 0;
        1:   48:	int choice3 = 0;
        1:   49:	int bonus = 0;
        -:   50:	
        1:   51:	int numPlayer = 2;
        1:   52:	int player1 = 0;
        1:   53:	int player2 = 1;
        -:   54:	
        -:   55:	int card;
        1:   56:	int origTreasureCount = 0;
        1:   57:	int newTreasureCount = 0;
        -:   58:
        1:   59:	int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   60:               remodel, smithy, village, baron, great_hall};
        -:   61:	struct gameState G, savedData;
        -:   62:	
        1:   63:	int seed = 72645;
        -:   64:	
        1:   65:	printf("**********************************************\n");
call    0 returned 100%
        1:   66:    printf("Testing -> Adventurer Card\n");
call    0 returned 100%
        1:   67:    memset(&G, 23, sizeof(struct gameState));   		 // clear the game state
        1:   68:    initializeGame(numPlayer, k, seed, &G);   // initialize a new game
call    0 returned 100%
        1:   69:    memcpy(&savedData, &G, sizeof(struct gameState));
        -:   70:    
        1:   71:	printf("\n< P1 Data BEFORE Adventurer Card is Played >\n");
call    0 returned 100%
        -:   72:	// 1. check player 1's # of card in hand
        1:   73:	printf("Player 1 has %d cards in hand.\n", savedData.handCount[player1]);
call    0 returned 100%
        -:   74:	
        -:   75:	// 2. check player 1's # of card in deck
        1:   76:	printf("Player 1 has %d cards in deck.\n", savedData.deckCount[player1]);
call    0 returned 100%
        1:   77:	int numDeckCards = savedData.deckCount[player1];
        -:   78:	// 3. check player 1's # of treasure cards in hand
        6:   79:	for (i = 0; i < savedData.handCount[player1]; i++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:   80:		card = savedData.hand[player1][i];
        5:   81:		if (card == copper || card == silver || card == gold) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        5:   82:			origTreasureCount++;
        -:   83:		}
        -:   84:	}
        1:   85:	int origHandTreasure = origTreasureCount;
        1:   86:	printf("Player 1 has %d treasure cards in hand.\n", origHandTreasure);
call    0 returned 100%
        -:   87:	
        -:   88:	
        -:   89:	
        1:   90:	origTreasureCount = 0;
        -:   91:	// 4. check player 1's # of treasure cards in hand
        6:   92:	for (i = 0; i < savedData.deckCount[player1]; i++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:   93:		card = savedData.deck[player1][i];
        5:   94:		if (card == copper || card == silver || card == gold) {
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        2:   95:			origTreasureCount++;
        -:   96:		}
        -:   97:	}
        1:   98:	int origDeckTreasure = origTreasureCount;
        1:   99:	printf("Player 1 has %d treasure cards in deck.\n", origDeckTreasure);
call    0 returned 100%
        -:  100:	
        -:  101:	// 5. check player 1's # of actions left to do
        1:  102:	printf("Player 1 has %d actions.\n", savedData.numActions);
call    0 returned 100%
        -:  103:	
        -:  104:	// 6. Play Adventurer Card
        1:  105:	cardEffect(adventurer, choice1, choice2, choice3, &G, handpos, &bonus);
call    0 returned 100%
        -:  106:	
        1:  107:	printf("\n< P1 Data AFTER Adventurer Card is Played >\n");
call    0 returned 100%
        -:  108:	// 7. check player 1's # of card in hand
        1:  109:	printf("Player 1 has %d cards in hand.\n", G.handCount[player1]);
call    0 returned 100%
        -:  110:	
        -:  111:	// 8. check player 1's # of card in deck
        1:  112:	printf("Player 1 has %d cards in deck.\n", G.deckCount[player1]);
call    0 returned 100%
        -:  113:	
        -:  114:	// 9. check player 1's # of treasure cards in hand
        8:  115:	for (i = 0; i < G.handCount[player1]; i++) {
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        7:  116:		card = G.hand[player1][i];
        7:  117:		if (card == copper || card == silver || card == gold) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        7:  118:			newTreasureCount++;
        -:  119:		}
        -:  120:	}
        1:  121:	int newHandTreasure = newTreasureCount;
        1:  122:	printf("Player 1 has %d treasure cards in hand.\n", newHandTreasure);
call    0 returned 100%
        -:  123:	
        1:  124:	newTreasureCount = 0;
        -:  125:	// 10. check player 1's # of treasure cards in hand
        1:  126:	for (i = 0; i < G.deckCount[player1]; i++) {
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  127:		card = G.deck[player1][i];
    #####:  128:		if (card == copper || card == silver || card == gold) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  129:			newTreasureCount++;
        -:  130:		}
        -:  131:	}
        1:  132:	int newDeckTreasure = newTreasureCount;
        1:  133:	printf("Player 1 has %d treasure cards in deck.\n", newDeckTreasure);
call    0 returned 100%
        -:  134:	
        -:  135:	// 11. check player 1's # of actions left to do
        1:  136:	printf("Player 1 has %d actions.\n", G.numActions);
call    0 returned 100%
        -:  137:	
        1:  138:	printf("\n***************** RESULTS *********************\n");
call    0 returned 100%
        -:  139:	
        1:  140:	printf("\nTEST 1. Player 1's Treasure counts should increase by 2 after card is played \n");
call    0 returned 100%
        1:  141:	printf("\n   Checking Player 1's handCount\n");
call    0 returned 100%
        1:  142:	failure  += asserttrue (savedData.handCount[player1]+2,G.handCount[player1]);
call    0 returned 100%
        1:  143:	printf("\n   Checking Player 1's deckCount\n");
call    0 returned 100%
        1:  144:	failure  += asserttrue (savedData.deckCount[player1],G.deckCount[player1] + 2);
call    0 returned 100%
        1:  145:	printf("\n   Checking Player 1's treasure count in hand\n");
call    0 returned 100%
        1:  146:	failure  += asserttrue (newHandTreasure,origHandTreasure+2);
call    0 returned 100%
        -:  147:	
        1:  148:	printf("\nTEST 2. Player 2's handCount and deckCount remains the same\n");
call    0 returned 100%
        1:  149:	printf("\n   Checking Player 2's handCount\n");
call    0 returned 100%
        1:  150:	failure  += asserttrue (savedData.handCount[player2],G.handCount[player2]);
call    0 returned 100%
        1:  151:	printf("\n   Checking Player 2's deckCount\n");
call    0 returned 100%
        1:  152:	failure  += asserttrue (savedData.deckCount[player2],G.deckCount[player2]);
call    0 returned 100%
        -:  153:	
        1:  154:	printf("\nTEST 3. Check if kingdom and victory cards have any bugs\n");
call    0 returned 100%
        1:  155:	printf("\n   Checking kingdom cards' supply piles\n");
call    0 returned 100%
       11:  156:	for (i = 0; i < 10; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       10:  157:		failure  += asserttrue (savedData.supplyCount[k[i]], G.supplyCount[k[i]]);
call    0 returned 100%
        -:  158:	}
        1:  159:	printf("\n   Checking province card pile:\n");
call    0 returned 100%
        1:  160:	failure  += asserttrue (savedData.supplyCount[province], G.supplyCount[province]);
call    0 returned 100%
        1:  161:	printf("\n   Checking duchy card pile:\n");
call    0 returned 100%
        1:  162:	failure  += asserttrue (savedData.supplyCount[duchy], G.supplyCount[duchy]);
call    0 returned 100%
        1:  163:	printf("\n   Checking estate card pile:\n");
call    0 returned 100%
        1:  164:	failure  += asserttrue (savedData.supplyCount[estate], G.supplyCount[estate]);
call    0 returned 100%
        -:  165:	
        1:  166:    if (failure > 0) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  167:        printf("\nTEST FAILED\n");
call    0 returned 100%
        1:  168:        printf("Count of failed tests: %d\n",failure);
call    0 returned 100%
        -:  169:    }
        -:  170:    else {
    #####:  171:    	printf("\nPASSED ALL THE TESTS\n");
call    0 never executed
    #####:  172:        printf("\nTEST SUCCESSFULLY COMPLETED\n\n");
call    0 never executed
        -:  173:    }
        1:  174:    printf("**********************************************\n");
call    0 returned 100%
        1:  175:	return 0;
        -:  176:}
File 'dominion.c'
Lines executed:32.62% of 558
Branches executed:35.25% of 417
Taken at least once:27.34% of 417
Calls executed:13.68% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:5
        -:    0:Programs:5
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 3180 returned 100% blocks executed 83%
     3180:    8:int compare(const void* a, const void* b) {
     3180:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
     3180:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
      848:   12:    return -1;
     2332:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 106 returned 100% blocks executed 88%
      106:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      106:   44:  SelectStream(1);
call    0 returned 100%
      106:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
      106:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      106:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     1166:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
    11660:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
    10600:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      106:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
      106:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      106:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
      106:   89:      state->supplyCount[estate] = 8;
      106:   90:      state->supplyCount[duchy] = 8;
      106:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      106:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      106:  102:  state->supplyCount[silver] = 40;
      106:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     2226:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
    17490:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
    16430:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     1060:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
      424:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      212:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      848:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     1060:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    15370:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      318:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
      212:  140:      state->deckCount[i] = 0;
      848:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
      636:  143:	  state->deck[i][j] = estate;
      636:  144:	  state->deckCount[i]++;
        -:  145:	}
     1696:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
     1484:  148:	  state->deck[i][j] = copper;
     1484:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      318:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
      212:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      318:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      212:  166:      state->handCount[i] = 0;
      212:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     2968:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
     2862:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      106:  182:  state->outpostPlayed = 0;
      106:  183:  state->phase = 0;
      106:  184:  state->numActions = 1;
      106:  185:  state->numBuys = 1;
      106:  186:  state->playedCardCount = 0;
      106:  187:  state->whoseTurn = 0;
      106:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      636:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      530:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
      106:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
      106:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 220 returned 100% blocks executed 100%
      220:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      220:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      220:  209:  if (state->deckCount[player] < 1)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        8:  210:    return -1;
      212:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     2544:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     2120:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     2120:  216:    newDeck[newDeckPos] = state->deck[player][card];
     2120:  217:    newDeckPos++;
     7534:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
     5414:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     2120:  221:    state->deckCount[player]--;
        -:  222:  }
     2332:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     2120:  224:    state->deck[player][i] = newDeck[i];
     2120:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      212:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 14 returned 100% blocks executed 100%
       14:  320:int supplyCount(int card, struct gameState *state) {
       14:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 1 returned 100% blocks executed 100%
        1:  346:int whoseTurn(struct gameState *state) {
        1:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 6 returned 100% blocks executed 100%
        6:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        6:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        4:  401:  j = 0;
      104:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
      100:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  405:	{
        6:  406:	  j++;
        -:  407:	}
        -:  408:    }
        4:  409:  if ( j >= 3)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        3:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 539 returned 100% blocks executed 85%
      539:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      539:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
        4:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        4:  538:    state->deckCount[player] = state->discardCount[player];
        4:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        4:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        4:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        4:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        4:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        4:  559:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      535:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      535:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      535:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      535:  576:    state->deckCount[player]--;
      535:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      535:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 29 returned 100% blocks executed 100%
       29:  583:int getCost(int cardNumber)
        -:  584:{
       29:  585:  switch( cardNumber ) 
branch  0 taken 3%
branch  1 taken 3%
branch  2 taken 3%
branch  3 taken 3%
branch  4 taken 3%
branch  5 taken 3%
branch  6 taken 3%
branch  7 taken 3%
branch  8 taken 3%
branch  9 taken 3%
branch 10 taken 3%
branch 11 taken 3%
branch 12 taken 3%
branch 13 taken 3%
branch 14 taken 3%
branch 15 taken 3%
branch 16 taken 3%
branch 17 taken 3%
branch 18 taken 3%
branch 19 taken 3%
branch 20 taken 3%
branch 21 taken 3%
branch 22 taken 3%
branch 23 taken 3%
branch 24 taken 3%
branch 25 taken 3%
branch 26 taken 3%
branch 27 taken 7%
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
        1:  590:      return 2;
        -:  591:    case duchy:
        1:  592:      return 5;
        -:  593:    case province:
        1:  594:      return 8;
        -:  595:    case copper:
        1:  596:      return 0;
        -:  597:    case silver:
        1:  598:      return 3;
        -:  599:    case gold:
        1:  600:      return 6;
        -:  601:    case adventurer:
        1:  602:      return 6;
        -:  603:    case council_room:
        1:  604:      return 5;
        -:  605:    case feast:
        1:  606:      return 4;
        -:  607:    case gardens:
        1:  608:      return 4;
        -:  609:    case mine:
        1:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
        1:  614:      return 4;
        -:  615:    case village:
        1:  616:      return 3;
        -:  617:    case baron:
        1:  618:      return 4;
        -:  619:    case great_hall:
        1:  620:      return 3;
        -:  621:    case minion:
        1:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
        1:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
        1:  630:      return 4;
        -:  631:    case embargo: 
        1:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
        1:  636:      return 4;
        -:  637:    case sea_hag:
        1:  638:      return 4;
        -:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:	
        2:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 1 returned 100% blocks executed 3%
        1:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int index;
        1:  652:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        1:  653:  int nextPlayer = currentPlayer + 1;
        1:  654:  int tributeRevealedCards[2] = {-1, -1};
        1:  655:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  656:    nextPlayer = 0;
        -:  657:  }
        -:  658:  // variables NOT needed after refactoring
        -:  659:  //int x;
        -:  660:  //int temphand[MAX_HAND];// moved above the if statement
        -:  661:  //int drawntreasure=0;
        -:  662:  //int cardDrawn;
        -:  663:  //int z = 0;// this is the counter for the temp hand
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
        1:  667:  switch( card ) 
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  668:    {
        -:  669:    // Code Refactored with Bugs
        -:  670:    case adventurer:
        1:  671:      return cardEffect_adventurer (currentPlayer, state);
call    0 returned 100%
        -:  672:	
        -:  673:	// Code Refactored with Bugs
        -:  674:    case council_room:
    #####:  675:      return cardEffect_council_room (currentPlayer, state, handPos);
call    0 never executed
        -:  676:	
        -:  677:	// Code Refactored		
        -:  678:    case feast:
    #####:  679:      return cardEffect_feast (currentPlayer, state, handPos, choice1);
call    0 never executed
        -:  680:     
        -:  681:    case gardens:
    #####:  682:      return -1;
        -:  683:			
        -:  684:    case mine:
    #####:  685:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  686:
    #####:  687:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  688:	{
    #####:  689:	  return -1;
        -:  690:	}
        -:  691:		
    #####:  692:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  693:	{
    #####:  694:	  return -1;
        -:  695:	}
        -:  696:
    #####:  697:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  698:	{
    #####:  699:	  return -1;
        -:  700:	}
        -:  701:
    #####:  702:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  703:
        -:  704:      //discard card from hand
    #####:  705:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  706:
        -:  707:      //discard trashed card
    #####:  708:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  709:	{
    #####:  710:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  711:	    {
    #####:  712:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  713:	      break;
        -:  714:	    }
        -:  715:	}
        -:  716:			
    #####:  717:      return 0;
        -:  718:			
        -:  719:    case remodel:
    #####:  720:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  721:
    #####:  722:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  723:	{
    #####:  724:	  return -1;
        -:  725:	}
        -:  726:
    #####:  727:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  728:
        -:  729:      //discard card from hand
    #####:  730:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  731:
        -:  732:      //discard trashed card
    #####:  733:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  734:	{
    #####:  735:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  736:	    {
    #####:  737:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  738:	      break;
        -:  739:	    }
        -:  740:	}
    #####:  741:      return 0;
        -:  742:		
        -:  743:    // Code Refactored with Bugs
        -:  744:    case smithy:
    #####:  745:    	return cardEffect_smithy(currentPlayer, state, handPos);
call    0 never executed
        -:  746:		
        -:  747:    // Code Refactored with Bugs
        -:  748:    case village:
    #####:  749:    	return cardEffect_village (currentPlayer, state, handPos);
call    0 never executed
        -:  750:		
        -:  751:    case baron:
    #####:  752:      state->numBuys++;//Increase buys by 1!
    #####:  753:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  754:	int p = 0;//Iterator for hand!
    #####:  755:	int card_not_discarded = 1;//Flag for discard set!
    #####:  756:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  757:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  758:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  759:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  760:	    state->discardCount[currentPlayer]++;
    #####:  761:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  762:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  763:	    }
    #####:  764:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  765:	    state->handCount[currentPlayer]--;
    #####:  766:	    card_not_discarded = 0;//Exit the loop
        -:  767:	  }
    #####:  768:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  769:	    if(DEBUG) {
        -:  770:	      printf("No estate cards in your hand, invalid choice\n");
        -:  771:	      printf("Must gain an estate if there are any\n");
        -:  772:	    }
    #####:  773:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  774:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  775:	      state->supplyCount[estate]--;//Decrement estates
    #####:  776:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  777:		isGameOver(state);
call    0 never executed
        -:  778:	      }
        -:  779:	    }
    #####:  780:	    card_not_discarded = 0;//Exit the loop
        -:  781:	  }
        -:  782:			    
        -:  783:	  else{
    #####:  784:	    p++;//Next card
        -:  785:	  }
        -:  786:	}
        -:  787:      }
        -:  788:			    
        -:  789:      else{
    #####:  790:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  791:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  792:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  793:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  794:	    isGameOver(state);
call    0 never executed
        -:  795:	  }
        -:  796:	}
        -:  797:      }
        -:  798:	    
        -:  799:      
    #####:  800:      return 0;
        -:  801:		
        -:  802:    case great_hall:
        -:  803:      //+1 Card
    #####:  804:      drawCard(currentPlayer, state);
call    0 never executed
        -:  805:			
        -:  806:      //+1 Actions
    #####:  807:      state->numActions++;
        -:  808:			
        -:  809:      //discard card from hand
    #####:  810:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  811:      return 0;
        -:  812:		
        -:  813:    case minion:
        -:  814:      //+1 action
    #####:  815:      state->numActions++;
        -:  816:			
        -:  817:      //discard card from hand
    #####:  818:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  819:			
    #####:  820:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  821:	{
    #####:  822:	  state->coins = state->coins + 2;
        -:  823:	}
        -:  824:			
    #####:  825:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  826:	{
        -:  827:	  //discard hand
    #####:  828:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  829:	    {
    #####:  830:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  831:	    }
        -:  832:				
        -:  833:	  //draw 4
    #####:  834:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  835:	    {
    #####:  836:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  837:	    }
        -:  838:				
        -:  839:	  //other players discard hand and redraw if hand size > 4
    #####:  840:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  841:	    {
    #####:  842:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  843:		{
    #####:  844:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  845:		    {
        -:  846:		      //discard hand
    #####:  847:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  848:			{
    #####:  849:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  850:			}
        -:  851:							
        -:  852:		      //draw 4
    #####:  853:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  854:			{
    #####:  855:			  drawCard(i, state);
call    0 never executed
        -:  856:			}
        -:  857:		    }
        -:  858:		}
        -:  859:	    }
        -:  860:				
        -:  861:	}
    #####:  862:      return 0;
        -:  863:		
        -:  864:    case steward:
    #####:  865:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  866:	{
        -:  867:	  //+2 cards
    #####:  868:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  869:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  870:	}
    #####:  871:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  872:	{
        -:  873:	  //+2 coins
    #####:  874:	  state->coins = state->coins + 2;
        -:  875:	}
        -:  876:      else
        -:  877:	{
        -:  878:	  //trash 2 cards in hand
    #####:  879:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  880:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  881:	}
        -:  882:			
        -:  883:      //discard card from hand
    #####:  884:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  885:      return 0;
        -:  886:		
        -:  887:    case tribute:
    #####:  888:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  889:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  890:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  891:	  state->deckCount[nextPlayer]--;
        -:  892:	}
    #####:  893:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  894:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  895:	  state->discardCount[nextPlayer]--;
        -:  896:	}
        -:  897:	else{
        -:  898:	  //No Card to Reveal
        -:  899:	  if (DEBUG){
        -:  900:	    printf("No cards to reveal\n");
        -:  901:	  }
        -:  902:	}
        -:  903:      }
        -:  904:	    
        -:  905:      else{
    #####:  906:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  907:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  908:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  909:	    state->deckCount[nextPlayer]++;
    #####:  910:	    state->discard[nextPlayer][i] = -1;
    #####:  911:	    state->discardCount[nextPlayer]--;
        -:  912:	  }
        -:  913:			    
    #####:  914:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  915:	} 
    #####:  916:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  917:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  918:	state->deckCount[nextPlayer]--;
    #####:  919:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  920:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  921:	state->deckCount[nextPlayer]--;
        -:  922:      }    
        -:  923:		       
    #####:  924:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  925:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  926:	state->playedCardCount++;
    #####:  927:	tributeRevealedCards[1] = -1;
        -:  928:      }
        -:  929:
    #####:  930:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  931:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  932:	  state->coins += 2;
        -:  933:	}
        -:  934:		    
    #####:  935:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  936:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  937:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  938:	}
        -:  939:	else{//Action Card
    #####:  940:	  state->numActions = state->numActions + 2;
        -:  941:	}
        -:  942:      }
        -:  943:	    
    #####:  944:      return 0;
        -:  945:		
        -:  946:    case ambassador:
    #####:  947:      j = 0;		//used to check if player has enough cards to discard
        -:  948:
    #####:  949:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  950:	{
    #####:  951:	  return -1;				
        -:  952:	}
        -:  953:
    #####:  954:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  955:	{
    #####:  956:	  return -1;
        -:  957:	}
        -:  958:
    #####:  959:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  960:	{
    #####:  961:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  962:	    {
    #####:  963:	      j++;
        -:  964:	    }
        -:  965:	}
    #####:  966:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  967:	{
    #####:  968:	  return -1;				
        -:  969:	}
        -:  970:
        -:  971:      if (DEBUG) 
        -:  972:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  973:
        -:  974:      //increase supply count for choosen card by amount being discarded
    #####:  975:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  976:			
        -:  977:      //each other player gains a copy of revealed card
    #####:  978:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  979:	{
    #####:  980:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  981:	    {
    #####:  982:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  983:	    }
        -:  984:	}
        -:  985:
        -:  986:      //discard played card from hand
    #####:  987:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  988:
        -:  989:      //trash copies of cards returned to supply
    #####:  990:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  991:	{
    #####:  992:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  993:	    {
    #####:  994:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  995:		{
    #####:  996:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  997:		  break;
        -:  998:		}
        -:  999:	    }
        -: 1000:	}			
        -: 1001:
    #####: 1002:      return 0;
        -: 1003:		
        -: 1004:    case cutpurse:
        -: 1005:
    #####: 1006:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1007:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1008:	{
    #####: 1009:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1010:	    {
    #####: 1011:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1012:		{
    #####: 1013:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1014:		    {
    #####: 1015:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1016:		      break;
        -: 1017:		    }
    #####: 1018:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1019:		    {
    #####: 1020:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1021:			{
        -: 1022:			  if (DEBUG)
        -: 1023:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1024:			}	
    #####: 1025:		      break;
        -: 1026:		    }		
        -: 1027:		}
        -: 1028:					
        -: 1029:	    }
        -: 1030:				
        -: 1031:	}				
        -: 1032:
        -: 1033:      //discard played card from hand
    #####: 1034:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1035:
    #####: 1036:      return 0;
        -: 1037:
        -: 1038:		
        -: 1039:    case embargo: 
        -: 1040:      //+2 Coins
    #####: 1041:      state->coins = state->coins + 2;
        -: 1042:			
        -: 1043:      //see if selected pile is in play
    #####: 1044:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1045:	{
    #####: 1046:	  return -1;
        -: 1047:	}
        -: 1048:			
        -: 1049:      //add embargo token to selected supply pile
    #####: 1050:      state->embargoTokens[choice1]++;
        -: 1051:			
        -: 1052:      //trash card
    #####: 1053:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1054:      return 0;
        -: 1055:		
        -: 1056:    case outpost:
        -: 1057:      //set outpost flag
    #####: 1058:      state->outpostPlayed++;
        -: 1059:			
        -: 1060:      //discard card
    #####: 1061:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1062:      return 0;
        -: 1063:		
        -: 1064:    case salvager:
        -: 1065:      //+1 buy
    #####: 1066:      state->numBuys++;
        -: 1067:			
    #####: 1068:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1069:	{
        -: 1070:	  //gain coins equal to trashed card
    #####: 1071:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1072:	  //trash card
    #####: 1073:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1074:	}
        -: 1075:			
        -: 1076:      //discard card
    #####: 1077:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1078:      return 0;
        -: 1079:		
        -: 1080:    case sea_hag:
    #####: 1081:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1082:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1083:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1084:	  state->discardCount[i]++;
    #####: 1085:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1086:	}
        -: 1087:      }
    #####: 1088:      return 0;
        -: 1089:		
        -: 1090:    case treasure_map:
        -: 1091:      //search hand for another treasure_map
    #####: 1092:      index = -1;
    #####: 1093:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1094:	{
    #####: 1095:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1096:	    {
    #####: 1097:	      index = i;
    #####: 1098:	      break;
        -: 1099:	    }
        -: 1100:	}
    #####: 1101:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1102:	{
        -: 1103:	  //trash both treasure cards
    #####: 1104:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1105:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1106:
        -: 1107:	  //gain 4 Gold cards
    #####: 1108:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1109:	    {
    #####: 1110:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1111:	    }
        -: 1112:				
        -: 1113:	  //return success
    #####: 1114:	  return 1;
        -: 1115:	}
        -: 1116:			
        -: 1117:      //no second treasure_map found in hand
    #####: 1118:      return -1;
        -: 1119:    }
        -: 1120:	
    #####: 1121:  return -1;
        -: 1122:}
        -: 1123:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1124:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1125:{
        -: 1126:	
        -: 1127:  //if card is not trashed, added to Played pile 
    #####: 1128:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1129:    {
        -: 1130:      //add card to played pile
    #####: 1131:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1132:      state->playedCardCount++;
        -: 1133:    }
        -: 1134:	
        -: 1135:  //set played card to -1
    #####: 1136:  state->hand[currentPlayer][handPos] = -1;
        -: 1137:	
        -: 1138:  //remove card from player's hand
    #####: 1139:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1140:    {
        -: 1141:      //reduce number of cards in hand
    #####: 1142:      state->handCount[currentPlayer]--;
        -: 1143:    }
    #####: 1144:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1145:    {
        -: 1146:      //reduce number of cards in hand
    #####: 1147:      state->handCount[currentPlayer]--;
        -: 1148:    }
        -: 1149:  else 	
        -: 1150:    {
        -: 1151:      //replace discarded card with last card in hand
    #####: 1152:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1153:      //set last card to -1
    #####: 1154:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1155:      //reduce number of cards in hand
    #####: 1156:      state->handCount[currentPlayer]--;
        -: 1157:    }
        -: 1158:	
    #####: 1159:  return 0;
        -: 1160:}
        -: 1161:
function gainCard called 14 returned 100% blocks executed 100%
       14: 1162:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1163:{
        -: 1164:  //Note: supplyPos is enum of choosen card
        -: 1165:	
        -: 1166:  //check if supply pile is empty (0) or card is not used in game (-1)
       14: 1167:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 43% (fallthrough)
branch  2 taken 57%
        -: 1168:    {
        6: 1169:      return -1;
        -: 1170:    }
        -: 1171:	
        -: 1172:  //added card for [whoseTurn] current player:
        -: 1173:  // toFlag = 0 : add to discard
        -: 1174:  // toFlag = 1 : add to deck
        -: 1175:  // toFlag = 2 : add to hand
        -: 1176:
        8: 1177:  if (toFlag == 1)
branch  0 taken 13% (fallthrough)
branch  1 taken 88%
        -: 1178:    {
        1: 1179:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1180:      state->deckCount[player]++;
        -: 1181:    }
        7: 1182:  else if (toFlag == 2)
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        -: 1183:    {
        1: 1184:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1185:      state->handCount[player]++;
        -: 1186:    }
        -: 1187:  else
        -: 1188:    {
        6: 1189:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        6: 1190:      state->discardCount[player]++;
        -: 1191:    }
        -: 1192:	
        -: 1193:  //decrease number in supply pile
        8: 1194:  state->supplyCount[supplyPos]--;
        -: 1195:	 
        8: 1196:  return 0;
        -: 1197:}
        -: 1198:
function updateCoins called 406 returned 100% blocks executed 100%
      406: 1199:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1200:{
        -: 1201:  int i;
        -: 1202:	
        -: 1203:  //reset coin count
      406: 1204:  state->coins = 0;
        -: 1205:
        -: 1206:  //add coins for each Treasure card in player's hand
     1836: 1207:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 78%
branch  1 taken 22% (fallthrough)
        -: 1208:    {
     1430: 1209:      if (state->hand[player][i] == copper)
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
        -: 1210:	{
      725: 1211:	  state->coins += 1;
        -: 1212:	}
      705: 1213:      else if (state->hand[player][i] == silver)
branch  0 taken 43% (fallthrough)
branch  1 taken 57%
        -: 1214:	{
      300: 1215:	  state->coins += 2;
        -: 1216:	}
      405: 1217:      else if (state->hand[player][i] == gold)
branch  0 taken 74% (fallthrough)
branch  1 taken 26%
        -: 1218:	{
      300: 1219:	  state->coins += 3;
        -: 1220:	}	
        -: 1221:    }	
        -: 1222:
        -: 1223:  //add bonus
      406: 1224:  state->coins += bonus;
        -: 1225:
      406: 1226:  return 0;
        -: 1227:}
        -: 1228:
        -: 1229:/*** CS 362 Assignment 2 ***/
        -: 1230:
        -: 1231:/** Card #1. Adventurer
        -: 1232: * Function: cardEffect_adventurer
        -: 1233: * Refactored switch statements into function for adventurer card
        -: 1234: * Inputs: int currentPlayer, struct gameState *state
        -: 1235: * Outputs: returns 0
        -: 1236: * Bug: while(drawntreasure<6){ ... 
        -: 1237: *      Changed drawntreasure<2 to drawntreasure<6
        -: 1238: *      This bug causes the current player to draw more treasure cards. 
        -: 1239: */
function cardEffect_adventurer called 1 returned 100% blocks executed 100%
        1: 1240:int cardEffect_adventurer (int currentPlayer, struct gameState *state)
        -: 1241:{
        -: 1242:	int temphand[MAX_HAND], // moved above the if statement
        1: 1243:		z = 0, // this is the counter for the temp hand
        1: 1244:	    drawntreasure = 0,
        -: 1245:	    cardDrawn;
        -: 1246:	
       11: 1247:	while(drawntreasure<6){ //BUG: changed drawntreasure<2 to drawntreasure<6
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
        9: 1248:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 44% (fallthrough)
branch  1 taken 56%
        4: 1249:	  		shuffle(currentPlayer, state);
call    0 returned 100%
        -: 1250:		}
        9: 1251:		drawCard(currentPlayer, state);
call    0 returned 100%
        9: 1252:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        9: 1253:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        6: 1254:	  		drawntreasure++;
        -: 1255:		else{
        3: 1256:	  		temphand[z]=cardDrawn;
        3: 1257:	  		state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        3: 1258:	  		z++;
        -: 1259:		}
        -: 1260:      }
        5: 1261:    while(z-1>=0) { 
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3: 1262:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        3: 1263:		z=z-1;
        -: 1264:    }
        1: 1265:    return 0;
        -: 1266:}
        -: 1267:
        -: 1268:/** Card #2. Council Room
        -: 1269: * Function: cardEffect_council_room
        -: 1270: * Refactored switch statements into function for council room card
        -: 1271: * Inputs: int currentPlayer, struct gameState *state, int handPos
        -: 1272: * Outputs: returns 0
        -: 1273: * Bugs: 
        -: 1274: * 1)for (i = 0; i < 2; i++){ ... 
        -: 1275: *   Changed from "for (i = 0; i < 4; i++){ ... "
        -: 1276: * 2)if ( i == currentPlayer )
        -: 1277: *	 Changed from i != currentPlayer
        -: 1278: */
function cardEffect_council_room called 0 returned 0% blocks executed 0%
    #####: 1279:int cardEffect_council_room (int currentPlayer, struct gameState *state, int handPos)
        -: 1280:{
        -: 1281:	int i;
        -: 1282:	
        -: 1283:	//+4 Cards
    #####: 1284:	for (i = 0; i < 2; i++) // BUG: i < 2 changed from for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1285:	{
    #####: 1286:		drawCard(currentPlayer, state);
call    0 never executed
        -: 1287:	}
        -: 1288:	
        -: 1289:	//+1 Buy
    #####: 1290:    state->numBuys++;
        -: 1291:			
        -: 1292:    //Each other player draws a card
    #####: 1293:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1294:	{
    #####: 1295:		if ( i == currentPlayer ) //BUG: changed to i ++ currentPlayerfrom i != currentPlayer
branch  0 never executed
branch  1 never executed
        -: 1296:	    {
    #####: 1297:	    	drawCard(i, state);
call    0 never executed
        -: 1298:	    }
        -: 1299:	}
        -: 1300:			
        -: 1301:    //put played card in played card pile
    #####: 1302:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1303:			
    #####: 1304:    return 0;
        -: 1305:}
        -: 1306:
        -: 1307:/** Card #3. Feast
        -: 1308: * Function: cardEffect_feast
        -: 1309: * Refactored switch statements into function for feast card
        -: 1310: * Inputs: int currentPlayer, struct gameState *state, int handPos, int choice1
        -: 1311: * Outputs: returns 0
        -: 1312: */
function cardEffect_feast called 0 returned 0% blocks executed 0%
    #####: 1313:int cardEffect_feast (int currentPlayer, struct gameState *state, int handPos, int choice1)
        -: 1314:{
        -: 1315:	int i, x;
        -: 1316:	int temphand[MAX_HAND];
        -: 1317:	
        -: 1318:	//gain card with cost up to 5
        -: 1319:	//Backup hand
    #####: 1320:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1321:		temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1322:		state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1323:    }
        -: 1324:    //Backup hand
        -: 1325:
        -: 1326:    //Update Coins for Buy
    #####: 1327:    updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####: 1328:    x = 1;//Condition to loop on
    #####: 1329:    while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####: 1330:		if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1331:	  		if (DEBUG){
        -: 1332:	    		printf("None of that card left, sorry!\n");
        -: 1333:	    	}
        -: 1334:	  		if (DEBUG){
        -: 1335:	    		printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1336:	  		}
        -: 1337:		}
    #####: 1338:		else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1339:	  		printf("That card is too expensive!\n");
call    0 never executed
        -: 1340:	  		if (DEBUG){
        -: 1341:	    		printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1342:	  		}
        -: 1343:		}
        -: 1344:		else{
        -: 1345:			if (DEBUG){
        -: 1346:	    		printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1347:	  		}
    #####: 1348:			gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####: 1349:			x = 0;//No more buying cards
        -: 1350:			if (DEBUG){
        -: 1351:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1352:			}
        -: 1353:		}
        -: 1354:    }     
        -: 1355:
        -: 1356:    //Reset Hand
    #####: 1357:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1358:		state->hand[currentPlayer][i] = temphand[i];
    #####: 1359:		temphand[i] = -1;
        -: 1360:    }
        -: 1361:    //Reset Hand		
    #####: 1362:    return 0;
        -: 1363:}
        -: 1364:
        -: 1365:/** Card #4. Smithy
        -: 1366: * Function: cardEffect_smithy
        -: 1367: * Refactored switch statements into function for smithy card
        -: 1368: * Inputs: int currentPlayer, struct gameState *state, int handPos
        -: 1369: * Outputs: returns 0
        -: 1370: * Bugs: for (i = 0; i < 1; i++) changed from "for (i = 0; i < 3; i++)"
        -: 1371: */
function cardEffect_smithy called 0 returned 0% blocks executed 0%
    #####: 1372:int cardEffect_smithy(int currentPlayer, struct gameState *state, int handPos)
        -: 1373:{
        -: 1374:	int i;
        -: 1375:	
        -: 1376:	//+3 Cards
    #####: 1377:	for (i = 0; i < 4; i++) // Bug: changed from "for (i = 0; i < 3; i++)"
branch  0 never executed
branch  1 never executed
        -: 1378:	{
    #####: 1379:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1380:	}
        -: 1381:			
        -: 1382:    //discard card from hand
    #####: 1383:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1384:    return 0;	
        -: 1385:}
        -: 1386:
        -: 1387:/** Card #5. Village
        -: 1388: * Function: cardEffect_village
        -: 1389: * Refactored switch statements into function for village card
        -: 1390: * Inputs: int currentPlayer, struct gameState *state, int handPos
        -: 1391: * Outputs: returns 0
        -: 1392: * Bugs: Code for +2 actions changed to +4 actions
        -: 1393: */
function cardEffect_village called 0 returned 0% blocks executed 0%
    #####: 1394:int cardEffect_village (int currentPlayer, struct gameState *state, int handPos)
        -: 1395:{
        -: 1396:	//+1 Card
    #####: 1397:    drawCard(currentPlayer, state);
call    0 never executed
        -: 1398:			
        -: 1399:     //+2 Actions
    #####: 1400:    state->numActions = state->numActions + 4; //Bug: 2 changed to 4
        -: 1401:			
        -: 1402:    //discard played card from hand
    #####: 1403:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1404:    return 0;
        -: 1405:}
        -: 1406:
        -: 1407:
        -: 1408://end of dominion.c
        -: 1409:
cardtest2.c:
**********************************************
Testing -> Smithy Card

< P1 Data BEFORE Smithy Card is Played >
Player 1 has 5 cards in hand.
Player 1 has 5 cards in deck.
Player 1 has 0 cards in discard pile.

< P1 Data AFTER Smithy Card is Played >
Player 1 has 8 cards in hand.
Player 1 has 1 cards in deck.
Player 1 has 0 cards in discard pile.

***************** RESULTS *********************

TEST 1. Check to see whether or not player 1 got 3 extra cards 

   Checking to see if player1 got 3 cards

	Expected value: 7, actual value: 8

	FAIL (assertion false)

   Checking to see if the 3 cards were from current player's deck?

	Expected value: 2, actual value: 1

	FAIL (assertion false)

TEST 2. Check to see discardCard() function within Smithy Card's code worked

   Checking... 

   Prev # of discard count = 0

   Current # of discard count = 1

	Expected value: 1, actual value: 1

	PASS (assertion true)

TEST 3. Check to see if player 2's handCount and deckCount remains the same

   Checking player 2's handCount

	Expected value: 0, actual value: 0

	PASS (assertion true)

   Checking player 2's  deckCount

	Expected value: 10, actual value: 10

	PASS (assertion true)

TEST 4. Check if kingdom and victory cards have any bugs

   Checking kingdom cards' supply piles

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 8, actual value: 8

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 8, actual value: 8

	PASS (assertion true)

   Checking province card pile:

	Expected value: 8, actual value: 8

	PASS (assertion true)

   Checking duchy card pile:

	Expected value: 8, actual value: 8

	PASS (assertion true)

   Checking estate card pile:

	Expected value: 8, actual value: 8

	PASS (assertion true)

TEST FAILED
Count of failed tests: 2
**********************************************
File 'cardtest2.c'
Lines executed:97.01% of 67
Branches executed:100.00% of 6
Taken at least once:83.33% of 6
Calls executed:95.65% of 46
Creating 'cardtest2.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:* Author: Ju An
        -:    3:* Date: April 29, 2018
        -:    4:* OSU CS 362 - Assignment 3: Card Test 2
        -:    5:* This is a unit test for Smithy card in dominion.c
        -:    6:*/
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include "rngs.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:
        -:   14:// for more detailed results, use NOISY_TEST 1
        -:   15:#define NOISY_TEST 1
        -:   16:
        -:   17:// asserttrue function instead of the standard C assert
        -:   18:// if assert is not true return 1
function asserttrue called 18 returned 100% blocks executed 100%
       18:   19:int asserttrue (int expectedVal, int testedVal) 
        -:   20:{
       18:   21:	if (testedVal == expectedVal) {
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
        -:   22:		#if (NOISY_TEST == 1)
       16:   23:			printf("\n	Expected value: %d, actual value: %d\n", expectedVal, testedVal);
call    0 returned 100%
       16:   24:			printf("\n	PASS (assertion true)\n");
call    0 returned 100%
        -:   25:		#endif
       16:   26:		return 0;
        -:   27:	} else {
        -:   28:		#if (NOISY_TEST == 1)
        2:   29:			printf("\n	Expected value: %d, actual value: %d\n", expectedVal, testedVal);	
call    0 returned 100%
        2:   30:			printf("\n	FAIL (assertion false)\n");
call    0 returned 100%
        -:   31:		#endif
        2:   32:		return 1;
        -:   33:	}
        -:   34:}
        -:   35:
        -:   36:// testing the cardEffect() function (refactored) from dominion.c
        -:   37:// test should work whether a card is implemented inside cardEffect or in its own function
function main called 1 returned 100% blocks executed 96%
        1:   38:int main()
        -:   39:{
        -:   40:    // counts failed tests
        1:   41:	int failure = 0;
        -:   42:    
        -:   43:    // test variable initialization
        -:   44:	int i;
        1:   45:	int handpos = 0;
        1:   46:	int choice1 = 0;
        1:   47:	int choice2 = 0;
        1:   48:	int choice3 = 0;
        1:   49:	int bonus = 0;
        -:   50:	
        1:   51:	int numPlayer = 2;
        1:   52:	int player1 = 0;
        1:   53:	int player2 = 1;
        -:   54:	
        1:   55:	int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   56:               remodel, smithy, village, baron, great_hall};
        -:   57:	struct gameState G, savedData;
        -:   58:	
        1:   59:	int seed = 5656;
        -:   60:	
        1:   61:	printf("**********************************************\n");
call    0 returned 100%
        1:   62:    printf("Testing -> Smithy Card\n");
call    0 returned 100%
        1:   63:    memset(&G, 23, sizeof(struct gameState));   		 // clear the game state
        1:   64:    initializeGame(numPlayer, k, seed, &G);   // initialize a new game
call    0 returned 100%
        1:   65:    memcpy(&savedData, &G, sizeof(struct gameState));
        -:   66:	
        1:   67:	printf("\n< P1 Data BEFORE Smithy Card is Played >\n");
call    0 returned 100%
        -:   68:	// 1. check player 1's # of card in hand
        1:   69:	printf("Player 1 has %d cards in hand.\n", savedData.handCount[player1]);
call    0 returned 100%
        -:   70:	
        -:   71:	// 2. check player 1's # of card in deck
        1:   72:	printf("Player 1 has %d cards in deck.\n", savedData.deckCount[player1]);
call    0 returned 100%
        -:   73:	
        -:   74:	// 3. check player 1's # of card in discard pile
        1:   75:	printf("Player 1 has %d cards in discard pile.\n", savedData.discardCount[player1]);
call    0 returned 100%
        -:   76:	
        -:   77:	// 4. Play Smithy Card
        1:   78:	cardEffect(smithy, choice1, choice2, choice3, &G, handpos, &bonus);
call    0 returned 100%
        -:   79:	
        1:   80:	printf("\n< P1 Data AFTER Smithy Card is Played >\n");
call    0 returned 100%
        -:   81:	// 5. check player 1's # of card in hand
        1:   82:	printf("Player 1 has %d cards in hand.\n", G.handCount[player1]);
call    0 returned 100%
        -:   83:	
        -:   84:	// 6. check player 1's # of card in deck
        1:   85:	printf("Player 1 has %d cards in deck.\n", G.deckCount[player1]);
call    0 returned 100%
        -:   86:	
        -:   87:	// 7. check player 1's # of card in discard pile
        1:   88:	printf("Player 1 has %d cards in discard pile.\n", G.discardCount[player1]);
call    0 returned 100%
        -:   89:	
        -:   90:
        1:   91:	printf("\n***************** RESULTS *********************\n");
call    0 returned 100%
        -:   92:	
        1:   93:	printf("\nTEST 1. Check to see whether or not player 1 got 3 extra cards \n");
call    0 returned 100%
        1:   94:	printf("\n   Checking to see if player1 got 3 cards\n");
call    0 returned 100%
        1:   95:	failure  += asserttrue (savedData.handCount[player1]+2, G.handCount[player1]);
call    0 returned 100%
        1:   96:	printf("\n   Checking to see if the 3 cards were from current player's deck?\n");
call    0 returned 100%
        1:   97:	failure  += asserttrue (savedData.deckCount[player1]-3, G.deckCount[player1]);
call    0 returned 100%
        -:   98:
        -:   99:
        1:  100:	printf("\nTEST 2. Check to see discardCard() function within Smithy Card's code worked\n");
call    0 returned 100%
        -:  101:	// NOTE: used card sent to discardCard() to be added on to a played pile
        1:  102:	printf("\n   Checking... \n");
call    0 returned 100%
        1:  103:	printf("\n   Prev # of discard count = %d\n", savedData.playedCardCount);
call    0 returned 100%
        1:  104:	printf("\n   Current # of discard count = %d\n", G.playedCardCount);
call    0 returned 100%
        1:  105:	failure  += asserttrue (savedData.playedCardCount+1,G.playedCardCount);
call    0 returned 100%
        -:  106:	
        1:  107:	printf("\nTEST 3. Check to see if player 2's handCount and deckCount remains the same\n");
call    0 returned 100%
        1:  108:	printf("\n   Checking player 2's handCount\n");
call    0 returned 100%
        1:  109:	failure  += asserttrue (savedData.handCount[player2],G.handCount[player2]);
call    0 returned 100%
        1:  110:	printf("\n   Checking player 2's  deckCount\n");
call    0 returned 100%
        1:  111:	failure  += asserttrue (savedData.deckCount[player2],G.deckCount[player2]);
call    0 returned 100%
        -:  112:	
        1:  113:	printf("\nTEST 4. Check if kingdom and victory cards have any bugs\n");
call    0 returned 100%
        1:  114:	printf("\n   Checking kingdom cards' supply piles\n");
call    0 returned 100%
       11:  115:	for (i = 0; i < 10; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       10:  116:		failure  += asserttrue (savedData.supplyCount[k[i]], G.supplyCount[k[i]]);
call    0 returned 100%
        -:  117:	}
        1:  118:	printf("\n   Checking province card pile:\n");
call    0 returned 100%
        1:  119:	failure  += asserttrue (savedData.supplyCount[province], G.supplyCount[province]);
call    0 returned 100%
        1:  120:	printf("\n   Checking duchy card pile:\n");
call    0 returned 100%
        1:  121:	failure  += asserttrue (savedData.supplyCount[duchy], G.supplyCount[duchy]);
call    0 returned 100%
        1:  122:	printf("\n   Checking estate card pile:\n");
call    0 returned 100%
        1:  123:	failure  += asserttrue (savedData.supplyCount[estate], G.supplyCount[estate]);
call    0 returned 100%
        -:  124:	
        1:  125:    if (failure > 0) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  126:        printf("\nTEST FAILED\n");
call    0 returned 100%
        1:  127:        printf("Count of failed tests: %d\n",failure);
call    0 returned 100%
        -:  128:    }
        -:  129:    else {
    #####:  130:    	printf("\nPASSED ALL THE TESTS\n");
call    0 never executed
    #####:  131:        printf("\nTEST SUCCESSFULLY COMPLETED\n\n");
call    0 never executed
        -:  132:    }
        1:  133:    printf("**********************************************\n");
call    0 returned 100%
        1:  134:	return 0;
        -:  135:}
File 'dominion.c'
Lines executed:35.66% of 558
Branches executed:37.17% of 417
Taken at least once:28.78% of 417
Calls executed:16.84% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:6
        -:    0:Programs:6
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 3210 returned 100% blocks executed 83%
     3210:    8:int compare(const void* a, const void* b) {
     3210:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
     3210:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
      856:   12:    return -1;
     2354:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 107 returned 100% blocks executed 88%
      107:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      107:   44:  SelectStream(1);
call    0 returned 100%
      107:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
      107:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      107:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     1177:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
    11770:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
    10700:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      107:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
      107:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      107:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
      107:   89:      state->supplyCount[estate] = 8;
      107:   90:      state->supplyCount[duchy] = 8;
      107:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      107:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      107:  102:  state->supplyCount[silver] = 40;
      107:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     2247:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
    17655:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
    16585:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     1070:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
      428:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      214:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      856:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     1070:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    15515:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      321:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
      214:  140:      state->deckCount[i] = 0;
      856:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
      642:  143:	  state->deck[i][j] = estate;
      642:  144:	  state->deckCount[i]++;
        -:  145:	}
     1712:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
     1498:  148:	  state->deck[i][j] = copper;
     1498:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      321:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
      214:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      321:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      214:  166:      state->handCount[i] = 0;
      214:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     2996:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
     2889:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      107:  182:  state->outpostPlayed = 0;
      107:  183:  state->phase = 0;
      107:  184:  state->numActions = 1;
      107:  185:  state->numBuys = 1;
      107:  186:  state->playedCardCount = 0;
      107:  187:  state->whoseTurn = 0;
      107:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      642:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      535:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
      107:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
      107:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 222 returned 100% blocks executed 100%
      222:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      222:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      222:  209:  if (state->deckCount[player] < 1)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        8:  210:    return -1;
      214:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     2568:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     2140:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     2140:  216:    newDeck[newDeckPos] = state->deck[player][card];
     2140:  217:    newDeckPos++;
     7595:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
     5455:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     2140:  221:    state->deckCount[player]--;
        -:  222:  }
     2354:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     2140:  224:    state->deck[player][i] = newDeck[i];
     2140:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      214:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 14 returned 100% blocks executed 100%
       14:  320:int supplyCount(int card, struct gameState *state) {
       14:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 2 returned 100% blocks executed 100%
        2:  346:int whoseTurn(struct gameState *state) {
        2:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 6 returned 100% blocks executed 100%
        6:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        6:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        4:  401:  j = 0;
      104:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
      100:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  405:	{
        6:  406:	  j++;
        -:  407:	}
        -:  408:    }
        4:  409:  if ( j >= 3)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        3:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 548 returned 100% blocks executed 85%
      548:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      548:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
        4:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        4:  538:    state->deckCount[player] = state->discardCount[player];
        4:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        4:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        4:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        4:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        4:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        4:  559:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      544:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      544:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      544:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      544:  576:    state->deckCount[player]--;
      544:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      544:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 29 returned 100% blocks executed 100%
       29:  583:int getCost(int cardNumber)
        -:  584:{
       29:  585:  switch( cardNumber ) 
branch  0 taken 3%
branch  1 taken 3%
branch  2 taken 3%
branch  3 taken 3%
branch  4 taken 3%
branch  5 taken 3%
branch  6 taken 3%
branch  7 taken 3%
branch  8 taken 3%
branch  9 taken 3%
branch 10 taken 3%
branch 11 taken 3%
branch 12 taken 3%
branch 13 taken 3%
branch 14 taken 3%
branch 15 taken 3%
branch 16 taken 3%
branch 17 taken 3%
branch 18 taken 3%
branch 19 taken 3%
branch 20 taken 3%
branch 21 taken 3%
branch 22 taken 3%
branch 23 taken 3%
branch 24 taken 3%
branch 25 taken 3%
branch 26 taken 3%
branch 27 taken 7%
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
        1:  590:      return 2;
        -:  591:    case duchy:
        1:  592:      return 5;
        -:  593:    case province:
        1:  594:      return 8;
        -:  595:    case copper:
        1:  596:      return 0;
        -:  597:    case silver:
        1:  598:      return 3;
        -:  599:    case gold:
        1:  600:      return 6;
        -:  601:    case adventurer:
        1:  602:      return 6;
        -:  603:    case council_room:
        1:  604:      return 5;
        -:  605:    case feast:
        1:  606:      return 4;
        -:  607:    case gardens:
        1:  608:      return 4;
        -:  609:    case mine:
        1:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
        1:  614:      return 4;
        -:  615:    case village:
        1:  616:      return 3;
        -:  617:    case baron:
        1:  618:      return 4;
        -:  619:    case great_hall:
        1:  620:      return 3;
        -:  621:    case minion:
        1:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
        1:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
        1:  630:      return 4;
        -:  631:    case embargo: 
        1:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
        1:  636:      return 4;
        -:  637:    case sea_hag:
        1:  638:      return 4;
        -:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:	
        2:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 2 returned 100% blocks executed 3%
        2:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int index;
        2:  652:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        2:  653:  int nextPlayer = currentPlayer + 1;
        2:  654:  int tributeRevealedCards[2] = {-1, -1};
        2:  655:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  656:    nextPlayer = 0;
        -:  657:  }
        -:  658:  // variables NOT needed after refactoring
        -:  659:  //int x;
        -:  660:  //int temphand[MAX_HAND];// moved above the if statement
        -:  661:  //int drawntreasure=0;
        -:  662:  //int cardDrawn;
        -:  663:  //int z = 0;// this is the counter for the temp hand
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
        2:  667:  switch( card ) 
branch  0 taken 50%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 50%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  668:    {
        -:  669:    // Code Refactored with Bugs
        -:  670:    case adventurer:
        1:  671:      return cardEffect_adventurer (currentPlayer, state);
call    0 returned 100%
        -:  672:	
        -:  673:	// Code Refactored with Bugs
        -:  674:    case council_room:
    #####:  675:      return cardEffect_council_room (currentPlayer, state, handPos);
call    0 never executed
        -:  676:	
        -:  677:	// Code Refactored		
        -:  678:    case feast:
    #####:  679:      return cardEffect_feast (currentPlayer, state, handPos, choice1);
call    0 never executed
        -:  680:     
        -:  681:    case gardens:
    #####:  682:      return -1;
        -:  683:			
        -:  684:    case mine:
    #####:  685:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  686:
    #####:  687:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  688:	{
    #####:  689:	  return -1;
        -:  690:	}
        -:  691:		
    #####:  692:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  693:	{
    #####:  694:	  return -1;
        -:  695:	}
        -:  696:
    #####:  697:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  698:	{
    #####:  699:	  return -1;
        -:  700:	}
        -:  701:
    #####:  702:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  703:
        -:  704:      //discard card from hand
    #####:  705:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  706:
        -:  707:      //discard trashed card
    #####:  708:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  709:	{
    #####:  710:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  711:	    {
    #####:  712:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  713:	      break;
        -:  714:	    }
        -:  715:	}
        -:  716:			
    #####:  717:      return 0;
        -:  718:			
        -:  719:    case remodel:
    #####:  720:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  721:
    #####:  722:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  723:	{
    #####:  724:	  return -1;
        -:  725:	}
        -:  726:
    #####:  727:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  728:
        -:  729:      //discard card from hand
    #####:  730:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  731:
        -:  732:      //discard trashed card
    #####:  733:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  734:	{
    #####:  735:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  736:	    {
    #####:  737:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  738:	      break;
        -:  739:	    }
        -:  740:	}
    #####:  741:      return 0;
        -:  742:		
        -:  743:    // Code Refactored with Bugs
        -:  744:    case smithy:
        1:  745:    	return cardEffect_smithy(currentPlayer, state, handPos);
call    0 returned 100%
        -:  746:		
        -:  747:    // Code Refactored with Bugs
        -:  748:    case village:
    #####:  749:    	return cardEffect_village (currentPlayer, state, handPos);
call    0 never executed
        -:  750:		
        -:  751:    case baron:
    #####:  752:      state->numBuys++;//Increase buys by 1!
    #####:  753:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  754:	int p = 0;//Iterator for hand!
    #####:  755:	int card_not_discarded = 1;//Flag for discard set!
    #####:  756:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  757:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  758:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  759:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  760:	    state->discardCount[currentPlayer]++;
    #####:  761:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  762:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  763:	    }
    #####:  764:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  765:	    state->handCount[currentPlayer]--;
    #####:  766:	    card_not_discarded = 0;//Exit the loop
        -:  767:	  }
    #####:  768:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  769:	    if(DEBUG) {
        -:  770:	      printf("No estate cards in your hand, invalid choice\n");
        -:  771:	      printf("Must gain an estate if there are any\n");
        -:  772:	    }
    #####:  773:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  774:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  775:	      state->supplyCount[estate]--;//Decrement estates
    #####:  776:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  777:		isGameOver(state);
call    0 never executed
        -:  778:	      }
        -:  779:	    }
    #####:  780:	    card_not_discarded = 0;//Exit the loop
        -:  781:	  }
        -:  782:			    
        -:  783:	  else{
    #####:  784:	    p++;//Next card
        -:  785:	  }
        -:  786:	}
        -:  787:      }
        -:  788:			    
        -:  789:      else{
    #####:  790:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  791:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  792:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  793:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  794:	    isGameOver(state);
call    0 never executed
        -:  795:	  }
        -:  796:	}
        -:  797:      }
        -:  798:	    
        -:  799:      
    #####:  800:      return 0;
        -:  801:		
        -:  802:    case great_hall:
        -:  803:      //+1 Card
    #####:  804:      drawCard(currentPlayer, state);
call    0 never executed
        -:  805:			
        -:  806:      //+1 Actions
    #####:  807:      state->numActions++;
        -:  808:			
        -:  809:      //discard card from hand
    #####:  810:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  811:      return 0;
        -:  812:		
        -:  813:    case minion:
        -:  814:      //+1 action
    #####:  815:      state->numActions++;
        -:  816:			
        -:  817:      //discard card from hand
    #####:  818:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  819:			
    #####:  820:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  821:	{
    #####:  822:	  state->coins = state->coins + 2;
        -:  823:	}
        -:  824:			
    #####:  825:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  826:	{
        -:  827:	  //discard hand
    #####:  828:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  829:	    {
    #####:  830:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  831:	    }
        -:  832:				
        -:  833:	  //draw 4
    #####:  834:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  835:	    {
    #####:  836:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  837:	    }
        -:  838:				
        -:  839:	  //other players discard hand and redraw if hand size > 4
    #####:  840:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  841:	    {
    #####:  842:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  843:		{
    #####:  844:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  845:		    {
        -:  846:		      //discard hand
    #####:  847:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  848:			{
    #####:  849:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  850:			}
        -:  851:							
        -:  852:		      //draw 4
    #####:  853:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  854:			{
    #####:  855:			  drawCard(i, state);
call    0 never executed
        -:  856:			}
        -:  857:		    }
        -:  858:		}
        -:  859:	    }
        -:  860:				
        -:  861:	}
    #####:  862:      return 0;
        -:  863:		
        -:  864:    case steward:
    #####:  865:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  866:	{
        -:  867:	  //+2 cards
    #####:  868:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  869:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  870:	}
    #####:  871:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  872:	{
        -:  873:	  //+2 coins
    #####:  874:	  state->coins = state->coins + 2;
        -:  875:	}
        -:  876:      else
        -:  877:	{
        -:  878:	  //trash 2 cards in hand
    #####:  879:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  880:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  881:	}
        -:  882:			
        -:  883:      //discard card from hand
    #####:  884:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  885:      return 0;
        -:  886:		
        -:  887:    case tribute:
    #####:  888:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  889:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  890:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  891:	  state->deckCount[nextPlayer]--;
        -:  892:	}
    #####:  893:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  894:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  895:	  state->discardCount[nextPlayer]--;
        -:  896:	}
        -:  897:	else{
        -:  898:	  //No Card to Reveal
        -:  899:	  if (DEBUG){
        -:  900:	    printf("No cards to reveal\n");
        -:  901:	  }
        -:  902:	}
        -:  903:      }
        -:  904:	    
        -:  905:      else{
    #####:  906:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  907:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  908:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  909:	    state->deckCount[nextPlayer]++;
    #####:  910:	    state->discard[nextPlayer][i] = -1;
    #####:  911:	    state->discardCount[nextPlayer]--;
        -:  912:	  }
        -:  913:			    
    #####:  914:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  915:	} 
    #####:  916:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  917:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  918:	state->deckCount[nextPlayer]--;
    #####:  919:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  920:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  921:	state->deckCount[nextPlayer]--;
        -:  922:      }    
        -:  923:		       
    #####:  924:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  925:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  926:	state->playedCardCount++;
    #####:  927:	tributeRevealedCards[1] = -1;
        -:  928:      }
        -:  929:
    #####:  930:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  931:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  932:	  state->coins += 2;
        -:  933:	}
        -:  934:		    
    #####:  935:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  936:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  937:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  938:	}
        -:  939:	else{//Action Card
    #####:  940:	  state->numActions = state->numActions + 2;
        -:  941:	}
        -:  942:      }
        -:  943:	    
    #####:  944:      return 0;
        -:  945:		
        -:  946:    case ambassador:
    #####:  947:      j = 0;		//used to check if player has enough cards to discard
        -:  948:
    #####:  949:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  950:	{
    #####:  951:	  return -1;				
        -:  952:	}
        -:  953:
    #####:  954:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  955:	{
    #####:  956:	  return -1;
        -:  957:	}
        -:  958:
    #####:  959:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  960:	{
    #####:  961:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  962:	    {
    #####:  963:	      j++;
        -:  964:	    }
        -:  965:	}
    #####:  966:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  967:	{
    #####:  968:	  return -1;				
        -:  969:	}
        -:  970:
        -:  971:      if (DEBUG) 
        -:  972:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  973:
        -:  974:      //increase supply count for choosen card by amount being discarded
    #####:  975:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  976:			
        -:  977:      //each other player gains a copy of revealed card
    #####:  978:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  979:	{
    #####:  980:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  981:	    {
    #####:  982:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  983:	    }
        -:  984:	}
        -:  985:
        -:  986:      //discard played card from hand
    #####:  987:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  988:
        -:  989:      //trash copies of cards returned to supply
    #####:  990:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  991:	{
    #####:  992:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  993:	    {
    #####:  994:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  995:		{
    #####:  996:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  997:		  break;
        -:  998:		}
        -:  999:	    }
        -: 1000:	}			
        -: 1001:
    #####: 1002:      return 0;
        -: 1003:		
        -: 1004:    case cutpurse:
        -: 1005:
    #####: 1006:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1007:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1008:	{
    #####: 1009:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1010:	    {
    #####: 1011:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1012:		{
    #####: 1013:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1014:		    {
    #####: 1015:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1016:		      break;
        -: 1017:		    }
    #####: 1018:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1019:		    {
    #####: 1020:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1021:			{
        -: 1022:			  if (DEBUG)
        -: 1023:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1024:			}	
    #####: 1025:		      break;
        -: 1026:		    }		
        -: 1027:		}
        -: 1028:					
        -: 1029:	    }
        -: 1030:				
        -: 1031:	}				
        -: 1032:
        -: 1033:      //discard played card from hand
    #####: 1034:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1035:
    #####: 1036:      return 0;
        -: 1037:
        -: 1038:		
        -: 1039:    case embargo: 
        -: 1040:      //+2 Coins
    #####: 1041:      state->coins = state->coins + 2;
        -: 1042:			
        -: 1043:      //see if selected pile is in play
    #####: 1044:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1045:	{
    #####: 1046:	  return -1;
        -: 1047:	}
        -: 1048:			
        -: 1049:      //add embargo token to selected supply pile
    #####: 1050:      state->embargoTokens[choice1]++;
        -: 1051:			
        -: 1052:      //trash card
    #####: 1053:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1054:      return 0;
        -: 1055:		
        -: 1056:    case outpost:
        -: 1057:      //set outpost flag
    #####: 1058:      state->outpostPlayed++;
        -: 1059:			
        -: 1060:      //discard card
    #####: 1061:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1062:      return 0;
        -: 1063:		
        -: 1064:    case salvager:
        -: 1065:      //+1 buy
    #####: 1066:      state->numBuys++;
        -: 1067:			
    #####: 1068:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1069:	{
        -: 1070:	  //gain coins equal to trashed card
    #####: 1071:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1072:	  //trash card
    #####: 1073:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1074:	}
        -: 1075:			
        -: 1076:      //discard card
    #####: 1077:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1078:      return 0;
        -: 1079:		
        -: 1080:    case sea_hag:
    #####: 1081:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1082:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1083:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1084:	  state->discardCount[i]++;
    #####: 1085:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1086:	}
        -: 1087:      }
    #####: 1088:      return 0;
        -: 1089:		
        -: 1090:    case treasure_map:
        -: 1091:      //search hand for another treasure_map
    #####: 1092:      index = -1;
    #####: 1093:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1094:	{
    #####: 1095:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1096:	    {
    #####: 1097:	      index = i;
    #####: 1098:	      break;
        -: 1099:	    }
        -: 1100:	}
    #####: 1101:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1102:	{
        -: 1103:	  //trash both treasure cards
    #####: 1104:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1105:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1106:
        -: 1107:	  //gain 4 Gold cards
    #####: 1108:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1109:	    {
    #####: 1110:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1111:	    }
        -: 1112:				
        -: 1113:	  //return success
    #####: 1114:	  return 1;
        -: 1115:	}
        -: 1116:			
        -: 1117:      //no second treasure_map found in hand
    #####: 1118:      return -1;
        -: 1119:    }
        -: 1120:	
    #####: 1121:  return -1;
        -: 1122:}
        -: 1123:
function discardCard called 1 returned 100% blocks executed 78%
        1: 1124:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1125:{
        -: 1126:	
        -: 1127:  //if card is not trashed, added to Played pile 
        1: 1128:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1129:    {
        -: 1130:      //add card to played pile
        1: 1131:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        1: 1132:      state->playedCardCount++;
        -: 1133:    }
        -: 1134:	
        -: 1135:  //set played card to -1
        1: 1136:  state->hand[currentPlayer][handPos] = -1;
        -: 1137:	
        -: 1138:  //remove card from player's hand
        1: 1139:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1140:    {
        -: 1141:      //reduce number of cards in hand
    #####: 1142:      state->handCount[currentPlayer]--;
        -: 1143:    }
        1: 1144:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1145:    {
        -: 1146:      //reduce number of cards in hand
    #####: 1147:      state->handCount[currentPlayer]--;
        -: 1148:    }
        -: 1149:  else 	
        -: 1150:    {
        -: 1151:      //replace discarded card with last card in hand
        1: 1152:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1153:      //set last card to -1
        1: 1154:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1155:      //reduce number of cards in hand
        1: 1156:      state->handCount[currentPlayer]--;
        -: 1157:    }
        -: 1158:	
        1: 1159:  return 0;
        -: 1160:}
        -: 1161:
function gainCard called 14 returned 100% blocks executed 100%
       14: 1162:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1163:{
        -: 1164:  //Note: supplyPos is enum of choosen card
        -: 1165:	
        -: 1166:  //check if supply pile is empty (0) or card is not used in game (-1)
       14: 1167:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 43% (fallthrough)
branch  2 taken 57%
        -: 1168:    {
        6: 1169:      return -1;
        -: 1170:    }
        -: 1171:	
        -: 1172:  //added card for [whoseTurn] current player:
        -: 1173:  // toFlag = 0 : add to discard
        -: 1174:  // toFlag = 1 : add to deck
        -: 1175:  // toFlag = 2 : add to hand
        -: 1176:
        8: 1177:  if (toFlag == 1)
branch  0 taken 13% (fallthrough)
branch  1 taken 88%
        -: 1178:    {
        1: 1179:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1180:      state->deckCount[player]++;
        -: 1181:    }
        7: 1182:  else if (toFlag == 2)
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        -: 1183:    {
        1: 1184:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1185:      state->handCount[player]++;
        -: 1186:    }
        -: 1187:  else
        -: 1188:    {
        6: 1189:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        6: 1190:      state->discardCount[player]++;
        -: 1191:    }
        -: 1192:	
        -: 1193:  //decrease number in supply pile
        8: 1194:  state->supplyCount[supplyPos]--;
        -: 1195:	 
        8: 1196:  return 0;
        -: 1197:}
        -: 1198:
function updateCoins called 407 returned 100% blocks executed 100%
      407: 1199:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1200:{
        -: 1201:  int i;
        -: 1202:	
        -: 1203:  //reset coin count
      407: 1204:  state->coins = 0;
        -: 1205:
        -: 1206:  //add coins for each Treasure card in player's hand
     1842: 1207:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 78%
branch  1 taken 22% (fallthrough)
        -: 1208:    {
     1435: 1209:      if (state->hand[player][i] == copper)
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
        -: 1210:	{
      728: 1211:	  state->coins += 1;
        -: 1212:	}
      707: 1213:      else if (state->hand[player][i] == silver)
branch  0 taken 42% (fallthrough)
branch  1 taken 58%
        -: 1214:	{
      300: 1215:	  state->coins += 2;
        -: 1216:	}
      407: 1217:      else if (state->hand[player][i] == gold)
branch  0 taken 74% (fallthrough)
branch  1 taken 26%
        -: 1218:	{
      300: 1219:	  state->coins += 3;
        -: 1220:	}	
        -: 1221:    }	
        -: 1222:
        -: 1223:  //add bonus
      407: 1224:  state->coins += bonus;
        -: 1225:
      407: 1226:  return 0;
        -: 1227:}
        -: 1228:
        -: 1229:/*** CS 362 Assignment 2 ***/
        -: 1230:
        -: 1231:/** Card #1. Adventurer
        -: 1232: * Function: cardEffect_adventurer
        -: 1233: * Refactored switch statements into function for adventurer card
        -: 1234: * Inputs: int currentPlayer, struct gameState *state
        -: 1235: * Outputs: returns 0
        -: 1236: * Bug: while(drawntreasure<6){ ... 
        -: 1237: *      Changed drawntreasure<2 to drawntreasure<6
        -: 1238: *      This bug causes the current player to draw more treasure cards. 
        -: 1239: */
function cardEffect_adventurer called 1 returned 100% blocks executed 100%
        1: 1240:int cardEffect_adventurer (int currentPlayer, struct gameState *state)
        -: 1241:{
        -: 1242:	int temphand[MAX_HAND], // moved above the if statement
        1: 1243:		z = 0, // this is the counter for the temp hand
        1: 1244:	    drawntreasure = 0,
        -: 1245:	    cardDrawn;
        -: 1246:	
       11: 1247:	while(drawntreasure<6){ //BUG: changed drawntreasure<2 to drawntreasure<6
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
        9: 1248:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 44% (fallthrough)
branch  1 taken 56%
        4: 1249:	  		shuffle(currentPlayer, state);
call    0 returned 100%
        -: 1250:		}
        9: 1251:		drawCard(currentPlayer, state);
call    0 returned 100%
        9: 1252:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        9: 1253:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        6: 1254:	  		drawntreasure++;
        -: 1255:		else{
        3: 1256:	  		temphand[z]=cardDrawn;
        3: 1257:	  		state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        3: 1258:	  		z++;
        -: 1259:		}
        -: 1260:      }
        5: 1261:    while(z-1>=0) { 
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3: 1262:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        3: 1263:		z=z-1;
        -: 1264:    }
        1: 1265:    return 0;
        -: 1266:}
        -: 1267:
        -: 1268:/** Card #2. Council Room
        -: 1269: * Function: cardEffect_council_room
        -: 1270: * Refactored switch statements into function for council room card
        -: 1271: * Inputs: int currentPlayer, struct gameState *state, int handPos
        -: 1272: * Outputs: returns 0
        -: 1273: * Bugs: 
        -: 1274: * 1)for (i = 0; i < 2; i++){ ... 
        -: 1275: *   Changed from "for (i = 0; i < 4; i++){ ... "
        -: 1276: * 2)if ( i == currentPlayer )
        -: 1277: *	 Changed from i != currentPlayer
        -: 1278: */
function cardEffect_council_room called 0 returned 0% blocks executed 0%
    #####: 1279:int cardEffect_council_room (int currentPlayer, struct gameState *state, int handPos)
        -: 1280:{
        -: 1281:	int i;
        -: 1282:	
        -: 1283:	//+4 Cards
    #####: 1284:	for (i = 0; i < 2; i++) // BUG: i < 2 changed from for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1285:	{
    #####: 1286:		drawCard(currentPlayer, state);
call    0 never executed
        -: 1287:	}
        -: 1288:	
        -: 1289:	//+1 Buy
    #####: 1290:    state->numBuys++;
        -: 1291:			
        -: 1292:    //Each other player draws a card
    #####: 1293:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1294:	{
    #####: 1295:		if ( i == currentPlayer ) //BUG: changed to i ++ currentPlayerfrom i != currentPlayer
branch  0 never executed
branch  1 never executed
        -: 1296:	    {
    #####: 1297:	    	drawCard(i, state);
call    0 never executed
        -: 1298:	    }
        -: 1299:	}
        -: 1300:			
        -: 1301:    //put played card in played card pile
    #####: 1302:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1303:			
    #####: 1304:    return 0;
        -: 1305:}
        -: 1306:
        -: 1307:/** Card #3. Feast
        -: 1308: * Function: cardEffect_feast
        -: 1309: * Refactored switch statements into function for feast card
        -: 1310: * Inputs: int currentPlayer, struct gameState *state, int handPos, int choice1
        -: 1311: * Outputs: returns 0
        -: 1312: */
function cardEffect_feast called 0 returned 0% blocks executed 0%
    #####: 1313:int cardEffect_feast (int currentPlayer, struct gameState *state, int handPos, int choice1)
        -: 1314:{
        -: 1315:	int i, x;
        -: 1316:	int temphand[MAX_HAND];
        -: 1317:	
        -: 1318:	//gain card with cost up to 5
        -: 1319:	//Backup hand
    #####: 1320:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1321:		temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1322:		state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1323:    }
        -: 1324:    //Backup hand
        -: 1325:
        -: 1326:    //Update Coins for Buy
    #####: 1327:    updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####: 1328:    x = 1;//Condition to loop on
    #####: 1329:    while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####: 1330:		if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1331:	  		if (DEBUG){
        -: 1332:	    		printf("None of that card left, sorry!\n");
        -: 1333:	    	}
        -: 1334:	  		if (DEBUG){
        -: 1335:	    		printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1336:	  		}
        -: 1337:		}
    #####: 1338:		else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1339:	  		printf("That card is too expensive!\n");
call    0 never executed
        -: 1340:	  		if (DEBUG){
        -: 1341:	    		printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1342:	  		}
        -: 1343:		}
        -: 1344:		else{
        -: 1345:			if (DEBUG){
        -: 1346:	    		printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1347:	  		}
    #####: 1348:			gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####: 1349:			x = 0;//No more buying cards
        -: 1350:			if (DEBUG){
        -: 1351:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1352:			}
        -: 1353:		}
        -: 1354:    }     
        -: 1355:
        -: 1356:    //Reset Hand
    #####: 1357:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1358:		state->hand[currentPlayer][i] = temphand[i];
    #####: 1359:		temphand[i] = -1;
        -: 1360:    }
        -: 1361:    //Reset Hand		
    #####: 1362:    return 0;
        -: 1363:}
        -: 1364:
        -: 1365:/** Card #4. Smithy
        -: 1366: * Function: cardEffect_smithy
        -: 1367: * Refactored switch statements into function for smithy card
        -: 1368: * Inputs: int currentPlayer, struct gameState *state, int handPos
        -: 1369: * Outputs: returns 0
        -: 1370: * Bugs: for (i = 0; i < 1; i++) changed from "for (i = 0; i < 3; i++)"
        -: 1371: */
function cardEffect_smithy called 1 returned 100% blocks executed 100%
        1: 1372:int cardEffect_smithy(int currentPlayer, struct gameState *state, int handPos)
        -: 1373:{
        -: 1374:	int i;
        -: 1375:	
        -: 1376:	//+3 Cards
        5: 1377:	for (i = 0; i < 4; i++) // Bug: changed from "for (i = 0; i < 3; i++)"
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1378:	{
        4: 1379:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1380:	}
        -: 1381:			
        -: 1382:    //discard card from hand
        1: 1383:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1: 1384:    return 0;	
        -: 1385:}
        -: 1386:
        -: 1387:/** Card #5. Village
        -: 1388: * Function: cardEffect_village
        -: 1389: * Refactored switch statements into function for village card
        -: 1390: * Inputs: int currentPlayer, struct gameState *state, int handPos
        -: 1391: * Outputs: returns 0
        -: 1392: * Bugs: Code for +2 actions changed to +4 actions
        -: 1393: */
function cardEffect_village called 0 returned 0% blocks executed 0%
    #####: 1394:int cardEffect_village (int currentPlayer, struct gameState *state, int handPos)
        -: 1395:{
        -: 1396:	//+1 Card
    #####: 1397:    drawCard(currentPlayer, state);
call    0 never executed
        -: 1398:			
        -: 1399:     //+2 Actions
    #####: 1400:    state->numActions = state->numActions + 4; //Bug: 2 changed to 4
        -: 1401:			
        -: 1402:    //discard played card from hand
    #####: 1403:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1404:    return 0;
        -: 1405:}
        -: 1406:
        -: 1407:
        -: 1408://end of dominion.c
        -: 1409:
cardtest3.c:
**********************************************
Testing -> Council Room Card

< P1 Data BEFORE Council Room Card is Played >
Player 1 has 5 cards in hand.
Player 1 has 5 cards in deck.
Player 1 has 0 cards in discard pile.

< P1 Data AFTER Council Room Card is Played >
Player 1 has 7 cards in hand.
Player 1 has 2 cards in deck.
Player 1 has 0 cards in discard pile.

***************** RESULTS *********************

TEST 1. Check player 1 get 4 extra cards from player's card pile 

   Checking player 1's handCount

	Expected value: 8, actual value: 7

	FAIL (assertion false)

   Checking player 1's deckCount

	Expected value: 1, actual value: 2

	FAIL (assertion false)

TEST 2. Check to see discardCard() function within Council Room Card's code worked

   Checking... 

   Prev # of discard count = 0

   Current # of discard count = 1

	Expected value: 1, actual value: 1

	PASS (assertion true)

TEST 3. Check if player1's numBuys increased from 1

   Checking... 

   Prev # of discard count = 1

   Current # of discard count = 2

	Expected value: 2, actual value: 2

	PASS (assertion true)

TEST 4. Check if player 2's gets to draw one card for free

   Checking player 2's handCount

	Expected value: 1, actual value: 0

	FAIL (assertion false)

   Checking player 2's deckCount

	Expected value: 9, actual value: 10

	FAIL (assertion false)

TEST 5. Check if kingdom and victory cards have any bugs

   Checking kingdom cards' supply piles

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 8, actual value: 8

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 8, actual value: 8

	PASS (assertion true)

   Checking province card pile:

	Expected value: 8, actual value: 8

	PASS (assertion true)

   Checking duchy card pile:

	Expected value: 8, actual value: 8

	PASS (assertion true)

   Checking estate card pile:

	Expected value: 8, actual value: 8

	PASS (assertion true)

TEST FAILED
Count of failed tests: 4
**********************************************
File 'cardtest3.c'
Lines executed:97.22% of 72
Branches executed:100.00% of 6
Taken at least once:83.33% of 6
Calls executed:96.08% of 51
Creating 'cardtest3.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:* Author: Ju An
        -:    3:* Date: April 29, 2018
        -:    4:* OSU CS 362 - Assignment 3: Card Test 3
        -:    5:* This is a unit test for Council Room card in dominion.c
        -:    6:*/
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include "rngs.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:
        -:   14:// for more detailed results, use NOISY_TEST 1
        -:   15:#define NOISY_TEST 1
        -:   16:
        -:   17:// asserttrue function instead of the standard C assert
        -:   18:// if assert is not true return 1
function asserttrue called 19 returned 100% blocks executed 100%
       19:   19:int asserttrue (int expectedVal, int testedVal) 
        -:   20:{
       19:   21:	if (testedVal == expectedVal) {
branch  0 taken 79% (fallthrough)
branch  1 taken 21%
        -:   22:		#if (NOISY_TEST == 1)
       15:   23:			printf("\n	Expected value: %d, actual value: %d\n", expectedVal, testedVal);
call    0 returned 100%
       15:   24:			printf("\n	PASS (assertion true)\n");
call    0 returned 100%
        -:   25:		#endif
       15:   26:		return 0;
        -:   27:	} else {
        -:   28:		#if (NOISY_TEST == 1)
        4:   29:			printf("\n	Expected value: %d, actual value: %d\n", expectedVal, testedVal);	
call    0 returned 100%
        4:   30:			printf("\n	FAIL (assertion false)\n");
call    0 returned 100%
        -:   31:		#endif
        4:   32:		return 1;
        -:   33:	}
        -:   34:}
        -:   35:
        -:   36:// testing the cardEffect() function (refactored) from dominion.c
        -:   37:// test should work whether a card is implemented inside cardEffect or in its own function
function main called 1 returned 100% blocks executed 96%
        1:   38:int main()
        -:   39:{
        -:   40:    // counts failed tests
        1:   41:	int failure = 0;
        -:   42:    
        -:   43:    // test variable initialization
        -:   44:	int i;
        1:   45:	int handpos = 0;
        1:   46:	int choice1 = 0;
        1:   47:	int choice2 = 0;
        1:   48:	int choice3 = 0;
        1:   49:	int bonus = 0;
        -:   50:	
        1:   51:	int numPlayer = 2;
        1:   52:	int player1 = 0;
        1:   53:	int player2 = 1;
        -:   54:
        1:   55:	int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   56:               remodel, smithy, village, baron, great_hall};
        -:   57:	struct gameState G, savedData;
        -:   58:	
        1:   59:	int seed = 5656;
        -:   60:	
        1:   61:	printf("**********************************************\n");
call    0 returned 100%
        1:   62:    printf("Testing -> Council Room Card\n");
call    0 returned 100%
        1:   63:    memset(&G, 23, sizeof(struct gameState));   		 // clear the game state
        1:   64:    initializeGame(numPlayer, k, seed, &G);   // initialize a new game
call    0 returned 100%
        1:   65:    memcpy(&savedData, &G, sizeof(struct gameState));
        -:   66:	
        1:   67:	printf("\n< P1 Data BEFORE Council Room Card is Played >\n");
call    0 returned 100%
        -:   68:	// 1. check player 1's # of card in hand
        1:   69:	printf("Player 1 has %d cards in hand.\n", savedData.handCount[player1]);
call    0 returned 100%
        -:   70:	
        -:   71:	// 2. check player 1's # of card in deck
        1:   72:	printf("Player 1 has %d cards in deck.\n", savedData.deckCount[player1]);
call    0 returned 100%
        -:   73:	
        -:   74:	// 3. check player 1's # of card in discard pile
        1:   75:	printf("Player 1 has %d cards in discard pile.\n", savedData.discardCount[player1]);
call    0 returned 100%
        -:   76:	
        -:   77:	// 4. Play Smithy Card
        1:   78:	cardEffect(council_room, choice1, choice2, choice3, &G, handpos, &bonus);
call    0 returned 100%
        -:   79:	
        1:   80:	printf("\n< P1 Data AFTER Council Room Card is Played >\n");
call    0 returned 100%
        -:   81:	// 5. check player 1's # of card in hand
        1:   82:	printf("Player 1 has %d cards in hand.\n", G.handCount[player1]);
call    0 returned 100%
        -:   83:	
        -:   84:	// 6. check player 1's # of card in deck
        1:   85:	printf("Player 1 has %d cards in deck.\n", G.deckCount[player1]);
call    0 returned 100%
        -:   86:	
        -:   87:	// 7. check player 1's # of card in discard pile
        1:   88:	printf("Player 1 has %d cards in discard pile.\n", G.discardCount[player1]);
call    0 returned 100%
        -:   89:	
        -:   90:	
        -:   91:
        1:   92:	printf("\n***************** RESULTS *********************\n");
call    0 returned 100%
        1:   93:	printf("\nTEST 1. Check player 1 get 4 extra cards from player's card pile \n");
call    0 returned 100%
        1:   94:	printf("\n   Checking player 1's handCount\n");
call    0 returned 100%
        1:   95:	failure  += asserttrue (savedData.handCount[player1]+3, G.handCount[player1]);
call    0 returned 100%
        1:   96:	printf("\n   Checking player 1's deckCount\n");
call    0 returned 100%
        1:   97:	failure  += asserttrue (savedData.deckCount[player1]-4,G.deckCount[player1]);
call    0 returned 100%
        -:   98:	
        1:   99:	printf("\nTEST 2. Check to see discardCard() function within Council Room Card's code worked\n");
call    0 returned 100%
        -:  100:	// NOTE: used card sent to discardCard() to be added on to a played pile
        1:  101:	printf("\n   Checking... \n");
call    0 returned 100%
        1:  102:	printf("\n   Prev # of discard count = %d\n", savedData.playedCardCount);
call    0 returned 100%
        1:  103:	printf("\n   Current # of discard count = %d\n", G.playedCardCount);
call    0 returned 100%
        1:  104:	failure  += asserttrue (savedData.playedCardCount+1,G.playedCardCount);
call    0 returned 100%
        -:  105:	
        1:  106:	printf("\nTEST 3. Check if player1's numBuys increased from 1\n");
call    0 returned 100%
        1:  107:	printf("\n   Checking... \n");
call    0 returned 100%
        1:  108:	printf("\n   Prev # of discard count = %d\n", savedData.numBuys);
call    0 returned 100%
        1:  109:	printf("\n   Current # of discard count = %d\n", G.numBuys);
call    0 returned 100%
        1:  110:	failure  += asserttrue (savedData.numBuys+1,G.numBuys);
call    0 returned 100%
        -:  111:	
        1:  112:	printf("\nTEST 4. Check if player 2's gets to draw one card for free\n");
call    0 returned 100%
        1:  113:	printf("\n   Checking player 2's handCount\n");
call    0 returned 100%
        1:  114:	failure  += asserttrue (savedData.handCount[player2]+1,G.handCount[player2]);
call    0 returned 100%
        1:  115:	printf("\n   Checking player 2's deckCount\n");
call    0 returned 100%
        1:  116:	failure  += asserttrue (savedData.deckCount[player2]-1,G.deckCount[player2]);
call    0 returned 100%
        -:  117:	
        1:  118:	printf("\nTEST 5. Check if kingdom and victory cards have any bugs\n");
call    0 returned 100%
        1:  119:	printf("\n   Checking kingdom cards' supply piles\n");
call    0 returned 100%
       11:  120:	for (i = 0; i < 10; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       10:  121:		failure  += asserttrue (savedData.supplyCount[k[i]], G.supplyCount[k[i]]);
call    0 returned 100%
        -:  122:	}
        1:  123:	printf("\n   Checking province card pile:\n");
call    0 returned 100%
        1:  124:	failure  += asserttrue (savedData.supplyCount[province], G.supplyCount[province]);
call    0 returned 100%
        1:  125:	printf("\n   Checking duchy card pile:\n");
call    0 returned 100%
        1:  126:	failure  += asserttrue (savedData.supplyCount[duchy], G.supplyCount[duchy]);
call    0 returned 100%
        1:  127:	printf("\n   Checking estate card pile:\n");
call    0 returned 100%
        1:  128:	failure  += asserttrue (savedData.supplyCount[estate], G.supplyCount[estate]);
call    0 returned 100%
        -:  129:	
        1:  130:    if (failure > 0) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  131:        printf("\nTEST FAILED\n");
call    0 returned 100%
        1:  132:        printf("Count of failed tests: %d\n",failure);
call    0 returned 100%
        -:  133:    }
        -:  134:    else {
    #####:  135:    	printf("\nPASSED ALL THE TESTS\n");
call    0 never executed
    #####:  136:        printf("\nTEST SUCCESSFULLY COMPLETED\n\n");
call    0 never executed
        -:  137:    }
        1:  138:    printf("**********************************************\n");
call    0 returned 100%
        1:  139:	return 0;
        -:  140:}
File 'dominion.c'
Lines executed:37.46% of 558
Branches executed:38.61% of 417
Taken at least once:30.46% of 417
Calls executed:21.05% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:7
        -:    0:Programs:7
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 3240 returned 100% blocks executed 83%
     3240:    8:int compare(const void* a, const void* b) {
     3240:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
     3240:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
      864:   12:    return -1;
     2376:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 108 returned 100% blocks executed 88%
      108:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      108:   44:  SelectStream(1);
call    0 returned 100%
      108:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
      108:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      108:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     1188:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
    11880:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
    10800:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      108:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
      108:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      108:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
      108:   89:      state->supplyCount[estate] = 8;
      108:   90:      state->supplyCount[duchy] = 8;
      108:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      108:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      108:  102:  state->supplyCount[silver] = 40;
      108:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     2268:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
    17820:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
    16740:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     1080:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
      432:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      216:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      864:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     1080:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    15660:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      324:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
      216:  140:      state->deckCount[i] = 0;
      864:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
      648:  143:	  state->deck[i][j] = estate;
      648:  144:	  state->deckCount[i]++;
        -:  145:	}
     1728:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
     1512:  148:	  state->deck[i][j] = copper;
     1512:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      324:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
      216:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      324:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      216:  166:      state->handCount[i] = 0;
      216:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     3024:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
     2916:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      108:  182:  state->outpostPlayed = 0;
      108:  183:  state->phase = 0;
      108:  184:  state->numActions = 1;
      108:  185:  state->numBuys = 1;
      108:  186:  state->playedCardCount = 0;
      108:  187:  state->whoseTurn = 0;
      108:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      648:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      540:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
      108:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
      108:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 224 returned 100% blocks executed 100%
      224:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      224:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      224:  209:  if (state->deckCount[player] < 1)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        8:  210:    return -1;
      216:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     2592:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     2160:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     2160:  216:    newDeck[newDeckPos] = state->deck[player][card];
     2160:  217:    newDeckPos++;
     7656:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
     5496:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     2160:  221:    state->deckCount[player]--;
        -:  222:  }
     2376:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     2160:  224:    state->deck[player][i] = newDeck[i];
     2160:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      216:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 14 returned 100% blocks executed 100%
       14:  320:int supplyCount(int card, struct gameState *state) {
       14:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 3 returned 100% blocks executed 100%
        3:  346:int whoseTurn(struct gameState *state) {
        3:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 6 returned 100% blocks executed 100%
        6:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        6:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        4:  401:  j = 0;
      104:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
      100:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  405:	{
        6:  406:	  j++;
        -:  407:	}
        -:  408:    }
        4:  409:  if ( j >= 3)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        3:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 556 returned 100% blocks executed 85%
      556:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      556:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
        4:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        4:  538:    state->deckCount[player] = state->discardCount[player];
        4:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        4:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        4:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        4:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        4:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        4:  559:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      552:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      552:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      552:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      552:  576:    state->deckCount[player]--;
      552:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      552:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 29 returned 100% blocks executed 100%
       29:  583:int getCost(int cardNumber)
        -:  584:{
       29:  585:  switch( cardNumber ) 
branch  0 taken 3%
branch  1 taken 3%
branch  2 taken 3%
branch  3 taken 3%
branch  4 taken 3%
branch  5 taken 3%
branch  6 taken 3%
branch  7 taken 3%
branch  8 taken 3%
branch  9 taken 3%
branch 10 taken 3%
branch 11 taken 3%
branch 12 taken 3%
branch 13 taken 3%
branch 14 taken 3%
branch 15 taken 3%
branch 16 taken 3%
branch 17 taken 3%
branch 18 taken 3%
branch 19 taken 3%
branch 20 taken 3%
branch 21 taken 3%
branch 22 taken 3%
branch 23 taken 3%
branch 24 taken 3%
branch 25 taken 3%
branch 26 taken 3%
branch 27 taken 7%
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
        1:  590:      return 2;
        -:  591:    case duchy:
        1:  592:      return 5;
        -:  593:    case province:
        1:  594:      return 8;
        -:  595:    case copper:
        1:  596:      return 0;
        -:  597:    case silver:
        1:  598:      return 3;
        -:  599:    case gold:
        1:  600:      return 6;
        -:  601:    case adventurer:
        1:  602:      return 6;
        -:  603:    case council_room:
        1:  604:      return 5;
        -:  605:    case feast:
        1:  606:      return 4;
        -:  607:    case gardens:
        1:  608:      return 4;
        -:  609:    case mine:
        1:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
        1:  614:      return 4;
        -:  615:    case village:
        1:  616:      return 3;
        -:  617:    case baron:
        1:  618:      return 4;
        -:  619:    case great_hall:
        1:  620:      return 3;
        -:  621:    case minion:
        1:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
        1:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
        1:  630:      return 4;
        -:  631:    case embargo: 
        1:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
        1:  636:      return 4;
        -:  637:    case sea_hag:
        1:  638:      return 4;
        -:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:	
        2:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 3 returned 100% blocks executed 4%
        3:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int index;
        3:  652:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        3:  653:  int nextPlayer = currentPlayer + 1;
        3:  654:  int tributeRevealedCards[2] = {-1, -1};
        3:  655:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  656:    nextPlayer = 0;
        -:  657:  }
        -:  658:  // variables NOT needed after refactoring
        -:  659:  //int x;
        -:  660:  //int temphand[MAX_HAND];// moved above the if statement
        -:  661:  //int drawntreasure=0;
        -:  662:  //int cardDrawn;
        -:  663:  //int z = 0;// this is the counter for the temp hand
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
        3:  667:  switch( card ) 
branch  0 taken 33%
branch  1 taken 33%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 33%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  668:    {
        -:  669:    // Code Refactored with Bugs
        -:  670:    case adventurer:
        1:  671:      return cardEffect_adventurer (currentPlayer, state);
call    0 returned 100%
        -:  672:	
        -:  673:	// Code Refactored with Bugs
        -:  674:    case council_room:
        1:  675:      return cardEffect_council_room (currentPlayer, state, handPos);
call    0 returned 100%
        -:  676:	
        -:  677:	// Code Refactored		
        -:  678:    case feast:
    #####:  679:      return cardEffect_feast (currentPlayer, state, handPos, choice1);
call    0 never executed
        -:  680:     
        -:  681:    case gardens:
    #####:  682:      return -1;
        -:  683:			
        -:  684:    case mine:
    #####:  685:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  686:
    #####:  687:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  688:	{
    #####:  689:	  return -1;
        -:  690:	}
        -:  691:		
    #####:  692:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  693:	{
    #####:  694:	  return -1;
        -:  695:	}
        -:  696:
    #####:  697:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  698:	{
    #####:  699:	  return -1;
        -:  700:	}
        -:  701:
    #####:  702:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  703:
        -:  704:      //discard card from hand
    #####:  705:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  706:
        -:  707:      //discard trashed card
    #####:  708:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  709:	{
    #####:  710:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  711:	    {
    #####:  712:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  713:	      break;
        -:  714:	    }
        -:  715:	}
        -:  716:			
    #####:  717:      return 0;
        -:  718:			
        -:  719:    case remodel:
    #####:  720:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  721:
    #####:  722:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  723:	{
    #####:  724:	  return -1;
        -:  725:	}
        -:  726:
    #####:  727:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  728:
        -:  729:      //discard card from hand
    #####:  730:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  731:
        -:  732:      //discard trashed card
    #####:  733:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  734:	{
    #####:  735:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  736:	    {
    #####:  737:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  738:	      break;
        -:  739:	    }
        -:  740:	}
    #####:  741:      return 0;
        -:  742:		
        -:  743:    // Code Refactored with Bugs
        -:  744:    case smithy:
        1:  745:    	return cardEffect_smithy(currentPlayer, state, handPos);
call    0 returned 100%
        -:  746:		
        -:  747:    // Code Refactored with Bugs
        -:  748:    case village:
    #####:  749:    	return cardEffect_village (currentPlayer, state, handPos);
call    0 never executed
        -:  750:		
        -:  751:    case baron:
    #####:  752:      state->numBuys++;//Increase buys by 1!
    #####:  753:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  754:	int p = 0;//Iterator for hand!
    #####:  755:	int card_not_discarded = 1;//Flag for discard set!
    #####:  756:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  757:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  758:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  759:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  760:	    state->discardCount[currentPlayer]++;
    #####:  761:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  762:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  763:	    }
    #####:  764:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  765:	    state->handCount[currentPlayer]--;
    #####:  766:	    card_not_discarded = 0;//Exit the loop
        -:  767:	  }
    #####:  768:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  769:	    if(DEBUG) {
        -:  770:	      printf("No estate cards in your hand, invalid choice\n");
        -:  771:	      printf("Must gain an estate if there are any\n");
        -:  772:	    }
    #####:  773:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  774:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  775:	      state->supplyCount[estate]--;//Decrement estates
    #####:  776:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  777:		isGameOver(state);
call    0 never executed
        -:  778:	      }
        -:  779:	    }
    #####:  780:	    card_not_discarded = 0;//Exit the loop
        -:  781:	  }
        -:  782:			    
        -:  783:	  else{
    #####:  784:	    p++;//Next card
        -:  785:	  }
        -:  786:	}
        -:  787:      }
        -:  788:			    
        -:  789:      else{
    #####:  790:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  791:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  792:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  793:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  794:	    isGameOver(state);
call    0 never executed
        -:  795:	  }
        -:  796:	}
        -:  797:      }
        -:  798:	    
        -:  799:      
    #####:  800:      return 0;
        -:  801:		
        -:  802:    case great_hall:
        -:  803:      //+1 Card
    #####:  804:      drawCard(currentPlayer, state);
call    0 never executed
        -:  805:			
        -:  806:      //+1 Actions
    #####:  807:      state->numActions++;
        -:  808:			
        -:  809:      //discard card from hand
    #####:  810:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  811:      return 0;
        -:  812:		
        -:  813:    case minion:
        -:  814:      //+1 action
    #####:  815:      state->numActions++;
        -:  816:			
        -:  817:      //discard card from hand
    #####:  818:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  819:			
    #####:  820:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  821:	{
    #####:  822:	  state->coins = state->coins + 2;
        -:  823:	}
        -:  824:			
    #####:  825:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  826:	{
        -:  827:	  //discard hand
    #####:  828:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  829:	    {
    #####:  830:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  831:	    }
        -:  832:				
        -:  833:	  //draw 4
    #####:  834:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  835:	    {
    #####:  836:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  837:	    }
        -:  838:				
        -:  839:	  //other players discard hand and redraw if hand size > 4
    #####:  840:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  841:	    {
    #####:  842:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  843:		{
    #####:  844:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  845:		    {
        -:  846:		      //discard hand
    #####:  847:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  848:			{
    #####:  849:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  850:			}
        -:  851:							
        -:  852:		      //draw 4
    #####:  853:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  854:			{
    #####:  855:			  drawCard(i, state);
call    0 never executed
        -:  856:			}
        -:  857:		    }
        -:  858:		}
        -:  859:	    }
        -:  860:				
        -:  861:	}
    #####:  862:      return 0;
        -:  863:		
        -:  864:    case steward:
    #####:  865:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  866:	{
        -:  867:	  //+2 cards
    #####:  868:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  869:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  870:	}
    #####:  871:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  872:	{
        -:  873:	  //+2 coins
    #####:  874:	  state->coins = state->coins + 2;
        -:  875:	}
        -:  876:      else
        -:  877:	{
        -:  878:	  //trash 2 cards in hand
    #####:  879:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  880:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  881:	}
        -:  882:			
        -:  883:      //discard card from hand
    #####:  884:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  885:      return 0;
        -:  886:		
        -:  887:    case tribute:
    #####:  888:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  889:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  890:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  891:	  state->deckCount[nextPlayer]--;
        -:  892:	}
    #####:  893:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  894:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  895:	  state->discardCount[nextPlayer]--;
        -:  896:	}
        -:  897:	else{
        -:  898:	  //No Card to Reveal
        -:  899:	  if (DEBUG){
        -:  900:	    printf("No cards to reveal\n");
        -:  901:	  }
        -:  902:	}
        -:  903:      }
        -:  904:	    
        -:  905:      else{
    #####:  906:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  907:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  908:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  909:	    state->deckCount[nextPlayer]++;
    #####:  910:	    state->discard[nextPlayer][i] = -1;
    #####:  911:	    state->discardCount[nextPlayer]--;
        -:  912:	  }
        -:  913:			    
    #####:  914:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  915:	} 
    #####:  916:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  917:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  918:	state->deckCount[nextPlayer]--;
    #####:  919:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  920:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  921:	state->deckCount[nextPlayer]--;
        -:  922:      }    
        -:  923:		       
    #####:  924:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  925:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  926:	state->playedCardCount++;
    #####:  927:	tributeRevealedCards[1] = -1;
        -:  928:      }
        -:  929:
    #####:  930:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  931:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  932:	  state->coins += 2;
        -:  933:	}
        -:  934:		    
    #####:  935:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  936:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  937:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  938:	}
        -:  939:	else{//Action Card
    #####:  940:	  state->numActions = state->numActions + 2;
        -:  941:	}
        -:  942:      }
        -:  943:	    
    #####:  944:      return 0;
        -:  945:		
        -:  946:    case ambassador:
    #####:  947:      j = 0;		//used to check if player has enough cards to discard
        -:  948:
    #####:  949:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  950:	{
    #####:  951:	  return -1;				
        -:  952:	}
        -:  953:
    #####:  954:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  955:	{
    #####:  956:	  return -1;
        -:  957:	}
        -:  958:
    #####:  959:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  960:	{
    #####:  961:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  962:	    {
    #####:  963:	      j++;
        -:  964:	    }
        -:  965:	}
    #####:  966:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  967:	{
    #####:  968:	  return -1;				
        -:  969:	}
        -:  970:
        -:  971:      if (DEBUG) 
        -:  972:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  973:
        -:  974:      //increase supply count for choosen card by amount being discarded
    #####:  975:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  976:			
        -:  977:      //each other player gains a copy of revealed card
    #####:  978:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  979:	{
    #####:  980:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  981:	    {
    #####:  982:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  983:	    }
        -:  984:	}
        -:  985:
        -:  986:      //discard played card from hand
    #####:  987:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  988:
        -:  989:      //trash copies of cards returned to supply
    #####:  990:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  991:	{
    #####:  992:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  993:	    {
    #####:  994:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  995:		{
    #####:  996:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  997:		  break;
        -:  998:		}
        -:  999:	    }
        -: 1000:	}			
        -: 1001:
    #####: 1002:      return 0;
        -: 1003:		
        -: 1004:    case cutpurse:
        -: 1005:
    #####: 1006:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1007:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1008:	{
    #####: 1009:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1010:	    {
    #####: 1011:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1012:		{
    #####: 1013:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1014:		    {
    #####: 1015:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1016:		      break;
        -: 1017:		    }
    #####: 1018:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1019:		    {
    #####: 1020:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1021:			{
        -: 1022:			  if (DEBUG)
        -: 1023:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1024:			}	
    #####: 1025:		      break;
        -: 1026:		    }		
        -: 1027:		}
        -: 1028:					
        -: 1029:	    }
        -: 1030:				
        -: 1031:	}				
        -: 1032:
        -: 1033:      //discard played card from hand
    #####: 1034:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1035:
    #####: 1036:      return 0;
        -: 1037:
        -: 1038:		
        -: 1039:    case embargo: 
        -: 1040:      //+2 Coins
    #####: 1041:      state->coins = state->coins + 2;
        -: 1042:			
        -: 1043:      //see if selected pile is in play
    #####: 1044:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1045:	{
    #####: 1046:	  return -1;
        -: 1047:	}
        -: 1048:			
        -: 1049:      //add embargo token to selected supply pile
    #####: 1050:      state->embargoTokens[choice1]++;
        -: 1051:			
        -: 1052:      //trash card
    #####: 1053:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1054:      return 0;
        -: 1055:		
        -: 1056:    case outpost:
        -: 1057:      //set outpost flag
    #####: 1058:      state->outpostPlayed++;
        -: 1059:			
        -: 1060:      //discard card
    #####: 1061:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1062:      return 0;
        -: 1063:		
        -: 1064:    case salvager:
        -: 1065:      //+1 buy
    #####: 1066:      state->numBuys++;
        -: 1067:			
    #####: 1068:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1069:	{
        -: 1070:	  //gain coins equal to trashed card
    #####: 1071:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1072:	  //trash card
    #####: 1073:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1074:	}
        -: 1075:			
        -: 1076:      //discard card
    #####: 1077:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1078:      return 0;
        -: 1079:		
        -: 1080:    case sea_hag:
    #####: 1081:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1082:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1083:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1084:	  state->discardCount[i]++;
    #####: 1085:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1086:	}
        -: 1087:      }
    #####: 1088:      return 0;
        -: 1089:		
        -: 1090:    case treasure_map:
        -: 1091:      //search hand for another treasure_map
    #####: 1092:      index = -1;
    #####: 1093:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1094:	{
    #####: 1095:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1096:	    {
    #####: 1097:	      index = i;
    #####: 1098:	      break;
        -: 1099:	    }
        -: 1100:	}
    #####: 1101:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1102:	{
        -: 1103:	  //trash both treasure cards
    #####: 1104:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1105:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1106:
        -: 1107:	  //gain 4 Gold cards
    #####: 1108:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1109:	    {
    #####: 1110:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1111:	    }
        -: 1112:				
        -: 1113:	  //return success
    #####: 1114:	  return 1;
        -: 1115:	}
        -: 1116:			
        -: 1117:      //no second treasure_map found in hand
    #####: 1118:      return -1;
        -: 1119:    }
        -: 1120:	
    #####: 1121:  return -1;
        -: 1122:}
        -: 1123:
function discardCard called 2 returned 100% blocks executed 78%
        2: 1124:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1125:{
        -: 1126:	
        -: 1127:  //if card is not trashed, added to Played pile 
        2: 1128:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1129:    {
        -: 1130:      //add card to played pile
        2: 1131:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        2: 1132:      state->playedCardCount++;
        -: 1133:    }
        -: 1134:	
        -: 1135:  //set played card to -1
        2: 1136:  state->hand[currentPlayer][handPos] = -1;
        -: 1137:	
        -: 1138:  //remove card from player's hand
        2: 1139:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1140:    {
        -: 1141:      //reduce number of cards in hand
    #####: 1142:      state->handCount[currentPlayer]--;
        -: 1143:    }
        2: 1144:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1145:    {
        -: 1146:      //reduce number of cards in hand
    #####: 1147:      state->handCount[currentPlayer]--;
        -: 1148:    }
        -: 1149:  else 	
        -: 1150:    {
        -: 1151:      //replace discarded card with last card in hand
        2: 1152:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1153:      //set last card to -1
        2: 1154:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1155:      //reduce number of cards in hand
        2: 1156:      state->handCount[currentPlayer]--;
        -: 1157:    }
        -: 1158:	
        2: 1159:  return 0;
        -: 1160:}
        -: 1161:
function gainCard called 14 returned 100% blocks executed 100%
       14: 1162:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1163:{
        -: 1164:  //Note: supplyPos is enum of choosen card
        -: 1165:	
        -: 1166:  //check if supply pile is empty (0) or card is not used in game (-1)
       14: 1167:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 43% (fallthrough)
branch  2 taken 57%
        -: 1168:    {
        6: 1169:      return -1;
        -: 1170:    }
        -: 1171:	
        -: 1172:  //added card for [whoseTurn] current player:
        -: 1173:  // toFlag = 0 : add to discard
        -: 1174:  // toFlag = 1 : add to deck
        -: 1175:  // toFlag = 2 : add to hand
        -: 1176:
        8: 1177:  if (toFlag == 1)
branch  0 taken 13% (fallthrough)
branch  1 taken 88%
        -: 1178:    {
        1: 1179:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1180:      state->deckCount[player]++;
        -: 1181:    }
        7: 1182:  else if (toFlag == 2)
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        -: 1183:    {
        1: 1184:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1185:      state->handCount[player]++;
        -: 1186:    }
        -: 1187:  else
        -: 1188:    {
        6: 1189:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        6: 1190:      state->discardCount[player]++;
        -: 1191:    }
        -: 1192:	
        -: 1193:  //decrease number in supply pile
        8: 1194:  state->supplyCount[supplyPos]--;
        -: 1195:	 
        8: 1196:  return 0;
        -: 1197:}
        -: 1198:
function updateCoins called 408 returned 100% blocks executed 100%
      408: 1199:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1200:{
        -: 1201:  int i;
        -: 1202:	
        -: 1203:  //reset coin count
      408: 1204:  state->coins = 0;
        -: 1205:
        -: 1206:  //add coins for each Treasure card in player's hand
     1848: 1207:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 78%
branch  1 taken 22% (fallthrough)
        -: 1208:    {
     1440: 1209:      if (state->hand[player][i] == copper)
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
        -: 1210:	{
      731: 1211:	  state->coins += 1;
        -: 1212:	}
      709: 1213:      else if (state->hand[player][i] == silver)
branch  0 taken 42% (fallthrough)
branch  1 taken 58%
        -: 1214:	{
      300: 1215:	  state->coins += 2;
        -: 1216:	}
      409: 1217:      else if (state->hand[player][i] == gold)
branch  0 taken 73% (fallthrough)
branch  1 taken 27%
        -: 1218:	{
      300: 1219:	  state->coins += 3;
        -: 1220:	}	
        -: 1221:    }	
        -: 1222:
        -: 1223:  //add bonus
      408: 1224:  state->coins += bonus;
        -: 1225:
      408: 1226:  return 0;
        -: 1227:}
        -: 1228:
        -: 1229:/*** CS 362 Assignment 2 ***/
        -: 1230:
        -: 1231:/** Card #1. Adventurer
        -: 1232: * Function: cardEffect_adventurer
        -: 1233: * Refactored switch statements into function for adventurer card
        -: 1234: * Inputs: int currentPlayer, struct gameState *state
        -: 1235: * Outputs: returns 0
        -: 1236: * Bug: while(drawntreasure<6){ ... 
        -: 1237: *      Changed drawntreasure<2 to drawntreasure<6
        -: 1238: *      This bug causes the current player to draw more treasure cards. 
        -: 1239: */
function cardEffect_adventurer called 1 returned 100% blocks executed 100%
        1: 1240:int cardEffect_adventurer (int currentPlayer, struct gameState *state)
        -: 1241:{
        -: 1242:	int temphand[MAX_HAND], // moved above the if statement
        1: 1243:		z = 0, // this is the counter for the temp hand
        1: 1244:	    drawntreasure = 0,
        -: 1245:	    cardDrawn;
        -: 1246:	
       11: 1247:	while(drawntreasure<6){ //BUG: changed drawntreasure<2 to drawntreasure<6
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
        9: 1248:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 44% (fallthrough)
branch  1 taken 56%
        4: 1249:	  		shuffle(currentPlayer, state);
call    0 returned 100%
        -: 1250:		}
        9: 1251:		drawCard(currentPlayer, state);
call    0 returned 100%
        9: 1252:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        9: 1253:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        6: 1254:	  		drawntreasure++;
        -: 1255:		else{
        3: 1256:	  		temphand[z]=cardDrawn;
        3: 1257:	  		state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        3: 1258:	  		z++;
        -: 1259:		}
        -: 1260:      }
        5: 1261:    while(z-1>=0) { 
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3: 1262:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        3: 1263:		z=z-1;
        -: 1264:    }
        1: 1265:    return 0;
        -: 1266:}
        -: 1267:
        -: 1268:/** Card #2. Council Room
        -: 1269: * Function: cardEffect_council_room
        -: 1270: * Refactored switch statements into function for council room card
        -: 1271: * Inputs: int currentPlayer, struct gameState *state, int handPos
        -: 1272: * Outputs: returns 0
        -: 1273: * Bugs: 
        -: 1274: * 1)for (i = 0; i < 2; i++){ ... 
        -: 1275: *   Changed from "for (i = 0; i < 4; i++){ ... "
        -: 1276: * 2)if ( i == currentPlayer )
        -: 1277: *	 Changed from i != currentPlayer
        -: 1278: */
function cardEffect_council_room called 1 returned 100% blocks executed 100%
        1: 1279:int cardEffect_council_room (int currentPlayer, struct gameState *state, int handPos)
        -: 1280:{
        -: 1281:	int i;
        -: 1282:	
        -: 1283:	//+4 Cards
        3: 1284:	for (i = 0; i < 2; i++) // BUG: i < 2 changed from for (i = 0; i < 4; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -: 1285:	{
        2: 1286:		drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1287:	}
        -: 1288:	
        -: 1289:	//+1 Buy
        1: 1290:    state->numBuys++;
        -: 1291:			
        -: 1292:    //Each other player draws a card
        3: 1293:    for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -: 1294:	{
        2: 1295:		if ( i == currentPlayer ) //BUG: changed to i ++ currentPlayerfrom i != currentPlayer
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1296:	    {
        1: 1297:	    	drawCard(i, state);
call    0 returned 100%
        -: 1298:	    }
        -: 1299:	}
        -: 1300:			
        -: 1301:    //put played card in played card pile
        1: 1302:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -: 1303:			
        1: 1304:    return 0;
        -: 1305:}
        -: 1306:
        -: 1307:/** Card #3. Feast
        -: 1308: * Function: cardEffect_feast
        -: 1309: * Refactored switch statements into function for feast card
        -: 1310: * Inputs: int currentPlayer, struct gameState *state, int handPos, int choice1
        -: 1311: * Outputs: returns 0
        -: 1312: */
function cardEffect_feast called 0 returned 0% blocks executed 0%
    #####: 1313:int cardEffect_feast (int currentPlayer, struct gameState *state, int handPos, int choice1)
        -: 1314:{
        -: 1315:	int i, x;
        -: 1316:	int temphand[MAX_HAND];
        -: 1317:	
        -: 1318:	//gain card with cost up to 5
        -: 1319:	//Backup hand
    #####: 1320:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1321:		temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1322:		state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1323:    }
        -: 1324:    //Backup hand
        -: 1325:
        -: 1326:    //Update Coins for Buy
    #####: 1327:    updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####: 1328:    x = 1;//Condition to loop on
    #####: 1329:    while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####: 1330:		if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1331:	  		if (DEBUG){
        -: 1332:	    		printf("None of that card left, sorry!\n");
        -: 1333:	    	}
        -: 1334:	  		if (DEBUG){
        -: 1335:	    		printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1336:	  		}
        -: 1337:		}
    #####: 1338:		else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1339:	  		printf("That card is too expensive!\n");
call    0 never executed
        -: 1340:	  		if (DEBUG){
        -: 1341:	    		printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1342:	  		}
        -: 1343:		}
        -: 1344:		else{
        -: 1345:			if (DEBUG){
        -: 1346:	    		printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1347:	  		}
    #####: 1348:			gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####: 1349:			x = 0;//No more buying cards
        -: 1350:			if (DEBUG){
        -: 1351:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1352:			}
        -: 1353:		}
        -: 1354:    }     
        -: 1355:
        -: 1356:    //Reset Hand
    #####: 1357:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1358:		state->hand[currentPlayer][i] = temphand[i];
    #####: 1359:		temphand[i] = -1;
        -: 1360:    }
        -: 1361:    //Reset Hand		
    #####: 1362:    return 0;
        -: 1363:}
        -: 1364:
        -: 1365:/** Card #4. Smithy
        -: 1366: * Function: cardEffect_smithy
        -: 1367: * Refactored switch statements into function for smithy card
        -: 1368: * Inputs: int currentPlayer, struct gameState *state, int handPos
        -: 1369: * Outputs: returns 0
        -: 1370: * Bugs: for (i = 0; i < 1; i++) changed from "for (i = 0; i < 3; i++)"
        -: 1371: */
function cardEffect_smithy called 1 returned 100% blocks executed 100%
        1: 1372:int cardEffect_smithy(int currentPlayer, struct gameState *state, int handPos)
        -: 1373:{
        -: 1374:	int i;
        -: 1375:	
        -: 1376:	//+3 Cards
        5: 1377:	for (i = 0; i < 4; i++) // Bug: changed from "for (i = 0; i < 3; i++)"
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1378:	{
        4: 1379:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1380:	}
        -: 1381:			
        -: 1382:    //discard card from hand
        1: 1383:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1: 1384:    return 0;	
        -: 1385:}
        -: 1386:
        -: 1387:/** Card #5. Village
        -: 1388: * Function: cardEffect_village
        -: 1389: * Refactored switch statements into function for village card
        -: 1390: * Inputs: int currentPlayer, struct gameState *state, int handPos
        -: 1391: * Outputs: returns 0
        -: 1392: * Bugs: Code for +2 actions changed to +4 actions
        -: 1393: */
function cardEffect_village called 0 returned 0% blocks executed 0%
    #####: 1394:int cardEffect_village (int currentPlayer, struct gameState *state, int handPos)
        -: 1395:{
        -: 1396:	//+1 Card
    #####: 1397:    drawCard(currentPlayer, state);
call    0 never executed
        -: 1398:			
        -: 1399:     //+2 Actions
    #####: 1400:    state->numActions = state->numActions + 4; //Bug: 2 changed to 4
        -: 1401:			
        -: 1402:    //discard played card from hand
    #####: 1403:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1404:    return 0;
        -: 1405:}
        -: 1406:
        -: 1407:
        -: 1408://end of dominion.c
        -: 1409:
cardtest4.c:
**********************************************
Testing -> Village Card

< P1 Data BEFORE Village Card is Played >
Player 1 has 5 cards in hand.
Player 1 has 5 cards in deck.
Player 1 has 0 cards in discard pile.

< P1 Data AFTER Village Card is Played >
Player 1 has 5 cards in hand.
Player 1 has 4 cards in deck.
Player 1 has 0 cards in discard pile.

***************** RESULTS *********************

TEST 1. Check player 1 gets to draw 1 card 

   Check player 1's deckCount

	Expected value: 5, actual value: 5

	PASS (assertion true)

   Check player 1's deckCount

	Expected value: 4, actual value: 4

	PASS (assertion true)

TEST 2. Check to see discardCard() function within Village Card's code worked

   Checking... 

   Prev # of discard count = 0

   Current # of discard count = 1

	Expected value: 1, actual value: 1

	PASS (assertion true)

TEST 3. Check if player1's numActions increased by +2

   Checking... 

   Prev numActions = 1

   Current of numActions = 5

	Expected value: 3, actual value: 5

	FAIL (assertion false)

TEST 4. Check if player 2's hand and deck cards remains the same

   Check player 2's handCount

	Expected value: 0, actual value: 0

	PASS (assertion true)

   Check player 2's deckCount

	Expected value: 10, actual value: 10

	PASS (assertion true)

TEST 5. Check if kingdom and victory cards have any bugs

   Checking kingdom cards' supply piles

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 8, actual value: 8

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 8, actual value: 8

	PASS (assertion true)

   Checking province card pile:

	Expected value: 8, actual value: 8

	PASS (assertion true)

   Checking duchy card pile:

	Expected value: 8, actual value: 8

	PASS (assertion true)

   Checking estate card pile:

	Expected value: 8, actual value: 8

	PASS (assertion true)

TEST FAILED
Count of failed tests: 1
**********************************************
File 'cardtest4.c'
Lines executed:97.22% of 72
Branches executed:100.00% of 6
Taken at least once:83.33% of 6
Calls executed:96.08% of 51
Creating 'cardtest4.c.gcov'

        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:* Author: Ju An
        -:    3:* Date: April 29, 2018
        -:    4:* OSU CS 362 - Assignment 3: Card Test 4
        -:    5:* This is a unit test for Village card in dominion.c
        -:    6:*/
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include "rngs.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:
        -:   14:// for more detailed results, use NOISY_TEST 1
        -:   15:#define NOISY_TEST 1
        -:   16:
        -:   17:// asserttrue function instead of the standard C assert
        -:   18:// if assert is not true return 1
function asserttrue called 19 returned 100% blocks executed 100%
       19:   19:int asserttrue (int expectedVal, int testedVal) 
        -:   20:{
       19:   21:	if (testedVal == expectedVal) {
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
        -:   22:		#if (NOISY_TEST == 1)
       18:   23:			printf("\n	Expected value: %d, actual value: %d\n", expectedVal, testedVal);
call    0 returned 100%
       18:   24:			printf("\n	PASS (assertion true)\n");
call    0 returned 100%
        -:   25:		#endif
       18:   26:		return 0;
        -:   27:	} else {
        -:   28:		#if (NOISY_TEST == 1)
        1:   29:			printf("\n	Expected value: %d, actual value: %d\n", expectedVal, testedVal);	
call    0 returned 100%
        1:   30:			printf("\n	FAIL (assertion false)\n");
call    0 returned 100%
        -:   31:		#endif
        1:   32:		return 1;
        -:   33:	}
        -:   34:}
        -:   35:
        -:   36:// testing the cardEffect() function (refactored) from dominion.c
        -:   37:// test should work whether a card is implemented inside cardEffect or in its own function
function main called 1 returned 100% blocks executed 96%
        1:   38:int main()
        -:   39:{
        -:   40:    // counts failed tests
        1:   41:	int failure = 0;
        -:   42:    
        -:   43:    // test variable initialization
        -:   44:	int i;
        1:   45:	int handpos = 0;
        1:   46:	int choice1 = 0;
        1:   47:	int choice2 = 0;
        1:   48:	int choice3 = 0;
        1:   49:	int bonus = 0;
        -:   50:	
        1:   51:	int numPlayer = 2;
        1:   52:	int player1 = 0;
        1:   53:	int player2 = 1;
        -:   54:	
        1:   55:	int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   56:               remodel, smithy, village, baron, great_hall};
        -:   57:	struct gameState G, savedData;
        -:   58:	
        1:   59:	int seed = 5656;
        -:   60:	
        1:   61:	printf("**********************************************\n");
call    0 returned 100%
        1:   62:    printf("Testing -> Village Card\n");
call    0 returned 100%
        1:   63:    memset(&G, 23, sizeof(struct gameState));   		 // clear the game state
        1:   64:    initializeGame(numPlayer, k, seed, &G);   // initialize a new game
call    0 returned 100%
        1:   65:    memcpy(&savedData, &G, sizeof(struct gameState));
        -:   66:	
        1:   67:	printf("\n< P1 Data BEFORE Village Card is Played >\n");
call    0 returned 100%
        -:   68:	// 1. check player 1's # of card in hand
        1:   69:	printf("Player 1 has %d cards in hand.\n", savedData.handCount[player1]);
call    0 returned 100%
        -:   70:	
        -:   71:	// 2. check player 1's # of card in deck
        1:   72:	printf("Player 1 has %d cards in deck.\n", savedData.deckCount[player1]);
call    0 returned 100%
        -:   73:	
        -:   74:	// 3. check player 1's # of card in discard pile
        1:   75:	printf("Player 1 has %d cards in discard pile.\n", savedData.discardCount[player1]);
call    0 returned 100%
        -:   76:	
        -:   77:	// 4. Play Village Card
        1:   78:	cardEffect(village, choice1, choice2, choice3, &G, handpos, &bonus);
call    0 returned 100%
        -:   79:	
        1:   80:	printf("\n< P1 Data AFTER Village Card is Played >\n");
call    0 returned 100%
        -:   81:	// 5. check player 1's # of card in hand
        1:   82:	printf("Player 1 has %d cards in hand.\n", G.handCount[player1]);
call    0 returned 100%
        -:   83:	
        -:   84:	// 6. check player 1's # of card in deck
        1:   85:	printf("Player 1 has %d cards in deck.\n", G.deckCount[player1]);
call    0 returned 100%
        -:   86:	
        -:   87:	// 7. check player 1's # of card in discard pile
        1:   88:	printf("Player 1 has %d cards in discard pile.\n", G.discardCount[player1]);
call    0 returned 100%
        -:   89:	
        -:   90:	
        1:   91:	printf("\n***************** RESULTS *********************\n");
call    0 returned 100%
        -:   92:	
        1:   93:	printf("\nTEST 1. Check player 1 gets to draw 1 card \n");
call    0 returned 100%
        1:   94:	printf("\n   Check player 1's deckCount\n");
call    0 returned 100%
        1:   95:	failure  += asserttrue (savedData.handCount[player1], G.handCount[player1]);
call    0 returned 100%
        1:   96:	printf("\n   Check player 1's deckCount\n");
call    0 returned 100%
        1:   97:	failure  += asserttrue (savedData.deckCount[player1]-1,G.deckCount[player1]);
call    0 returned 100%
        -:   98:	
        1:   99:	printf("\nTEST 2. Check to see discardCard() function within Village Card's code worked\n");
call    0 returned 100%
        -:  100:	// NOTE: used card sent to discardCard() to be added on to a played pile
        1:  101:	printf("\n   Checking... \n");
call    0 returned 100%
        1:  102:	printf("\n   Prev # of discard count = %d\n", savedData.playedCardCount);
call    0 returned 100%
        1:  103:	printf("\n   Current # of discard count = %d\n", G.playedCardCount);
call    0 returned 100%
        1:  104:	failure  += asserttrue (savedData.playedCardCount+1,G.playedCardCount);
call    0 returned 100%
        -:  105:	
        1:  106:	printf("\nTEST 3. Check if player1's numActions increased by +2\n");
call    0 returned 100%
        1:  107:	printf("\n   Checking... \n");
call    0 returned 100%
        1:  108:	printf("\n   Prev numActions = %d\n", savedData.numActions);
call    0 returned 100%
        1:  109:	printf("\n   Current of numActions = %d\n", G.numActions);
call    0 returned 100%
        1:  110:	failure  += asserttrue (savedData.numActions+2,G.numActions);
call    0 returned 100%
        -:  111:	
        1:  112:	printf("\nTEST 4. Check if player 2's hand and deck cards remains the same\n");
call    0 returned 100%
        1:  113:	printf("\n   Check player 2's handCount\n");
call    0 returned 100%
        1:  114:	failure  += asserttrue (savedData.handCount[player2],G.handCount[player2]);
call    0 returned 100%
        1:  115:	printf("\n   Check player 2's deckCount\n");
call    0 returned 100%
        1:  116:	failure  += asserttrue (savedData.deckCount[player2],G.deckCount[player2]);
call    0 returned 100%
        -:  117:	
        1:  118:	printf("\nTEST 5. Check if kingdom and victory cards have any bugs\n");
call    0 returned 100%
        1:  119:	printf("\n   Checking kingdom cards' supply piles\n");
call    0 returned 100%
       11:  120:	for (i = 0; i < 10; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       10:  121:		failure  += asserttrue (savedData.supplyCount[k[i]], G.supplyCount[k[i]]);
call    0 returned 100%
        -:  122:	}
        1:  123:	printf("\n   Checking province card pile:\n");
call    0 returned 100%
        1:  124:	failure  += asserttrue (savedData.supplyCount[province], G.supplyCount[province]);
call    0 returned 100%
        1:  125:	printf("\n   Checking duchy card pile:\n");
call    0 returned 100%
        1:  126:	failure  += asserttrue (savedData.supplyCount[duchy], G.supplyCount[duchy]);
call    0 returned 100%
        1:  127:	printf("\n   Checking estate card pile:\n");
call    0 returned 100%
        1:  128:	failure  += asserttrue (savedData.supplyCount[estate], G.supplyCount[estate]);
call    0 returned 100%
        -:  129:	
        1:  130:    if (failure > 0) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  131:        printf("\nTEST FAILED\n");
call    0 returned 100%
        1:  132:        printf("Count of failed tests: %d\n",failure);
call    0 returned 100%
        -:  133:    }
        -:  134:    else {
    #####:  135:    	printf("\nPASSED ALL THE TESTS\n");
call    0 never executed
    #####:  136:        printf("\nTEST SUCCESSFULLY COMPLETED\n\n");
call    0 never executed
        -:  137:    }
        1:  138:    printf("**********************************************\n");
call    0 returned 100%
        1:  139:	return 0;
        -:  140:}
File 'dominion.c'
Lines executed:38.53% of 558
Branches executed:38.61% of 417
Taken at least once:30.70% of 417
Calls executed:24.21% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 3270 returned 100% blocks executed 83%
     3270:    8:int compare(const void* a, const void* b) {
     3270:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
     3270:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
      872:   12:    return -1;
     2398:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 109 returned 100% blocks executed 88%
      109:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      109:   44:  SelectStream(1);
call    0 returned 100%
      109:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
      109:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      109:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     1199:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
    11990:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
    10900:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      109:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
      109:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      109:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
      109:   89:      state->supplyCount[estate] = 8;
      109:   90:      state->supplyCount[duchy] = 8;
      109:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      109:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      109:  102:  state->supplyCount[silver] = 40;
      109:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     2289:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
    17985:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
    16895:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     1090:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
      436:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      218:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      872:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     1090:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    15805:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      327:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
      218:  140:      state->deckCount[i] = 0;
      872:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
      654:  143:	  state->deck[i][j] = estate;
      654:  144:	  state->deckCount[i]++;
        -:  145:	}
     1744:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
     1526:  148:	  state->deck[i][j] = copper;
     1526:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      327:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
      218:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      327:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      218:  166:      state->handCount[i] = 0;
      218:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     3052:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
     2943:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      109:  182:  state->outpostPlayed = 0;
      109:  183:  state->phase = 0;
      109:  184:  state->numActions = 1;
      109:  185:  state->numBuys = 1;
      109:  186:  state->playedCardCount = 0;
      109:  187:  state->whoseTurn = 0;
      109:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      654:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      545:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
      109:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
      109:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 226 returned 100% blocks executed 100%
      226:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      226:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      226:  209:  if (state->deckCount[player] < 1)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        8:  210:    return -1;
      218:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     2616:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     2180:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     2180:  216:    newDeck[newDeckPos] = state->deck[player][card];
     2180:  217:    newDeckPos++;
     7717:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
     5537:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     2180:  221:    state->deckCount[player]--;
        -:  222:  }
     2398:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     2180:  224:    state->deck[player][i] = newDeck[i];
     2180:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      218:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 14 returned 100% blocks executed 100%
       14:  320:int supplyCount(int card, struct gameState *state) {
       14:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 4 returned 100% blocks executed 100%
        4:  346:int whoseTurn(struct gameState *state) {
        4:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 6 returned 100% blocks executed 100%
        6:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        6:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        4:  401:  j = 0;
      104:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
      100:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  405:	{
        6:  406:	  j++;
        -:  407:	}
        -:  408:    }
        4:  409:  if ( j >= 3)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        3:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 562 returned 100% blocks executed 85%
      562:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      562:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
        4:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        4:  538:    state->deckCount[player] = state->discardCount[player];
        4:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        4:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        4:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        4:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        4:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        4:  559:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      558:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      558:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      558:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      558:  576:    state->deckCount[player]--;
      558:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      558:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 29 returned 100% blocks executed 100%
       29:  583:int getCost(int cardNumber)
        -:  584:{
       29:  585:  switch( cardNumber ) 
branch  0 taken 3%
branch  1 taken 3%
branch  2 taken 3%
branch  3 taken 3%
branch  4 taken 3%
branch  5 taken 3%
branch  6 taken 3%
branch  7 taken 3%
branch  8 taken 3%
branch  9 taken 3%
branch 10 taken 3%
branch 11 taken 3%
branch 12 taken 3%
branch 13 taken 3%
branch 14 taken 3%
branch 15 taken 3%
branch 16 taken 3%
branch 17 taken 3%
branch 18 taken 3%
branch 19 taken 3%
branch 20 taken 3%
branch 21 taken 3%
branch 22 taken 3%
branch 23 taken 3%
branch 24 taken 3%
branch 25 taken 3%
branch 26 taken 3%
branch 27 taken 7%
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
        1:  590:      return 2;
        -:  591:    case duchy:
        1:  592:      return 5;
        -:  593:    case province:
        1:  594:      return 8;
        -:  595:    case copper:
        1:  596:      return 0;
        -:  597:    case silver:
        1:  598:      return 3;
        -:  599:    case gold:
        1:  600:      return 6;
        -:  601:    case adventurer:
        1:  602:      return 6;
        -:  603:    case council_room:
        1:  604:      return 5;
        -:  605:    case feast:
        1:  606:      return 4;
        -:  607:    case gardens:
        1:  608:      return 4;
        -:  609:    case mine:
        1:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
        1:  614:      return 4;
        -:  615:    case village:
        1:  616:      return 3;
        -:  617:    case baron:
        1:  618:      return 4;
        -:  619:    case great_hall:
        1:  620:      return 3;
        -:  621:    case minion:
        1:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
        1:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
        1:  630:      return 4;
        -:  631:    case embargo: 
        1:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
        1:  636:      return 4;
        -:  637:    case sea_hag:
        1:  638:      return 4;
        -:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:	
        2:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 4 returned 100% blocks executed 4%
        4:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int index;
        4:  652:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        4:  653:  int nextPlayer = currentPlayer + 1;
        4:  654:  int tributeRevealedCards[2] = {-1, -1};
        4:  655:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  656:    nextPlayer = 0;
        -:  657:  }
        -:  658:  // variables NOT needed after refactoring
        -:  659:  //int x;
        -:  660:  //int temphand[MAX_HAND];// moved above the if statement
        -:  661:  //int drawntreasure=0;
        -:  662:  //int cardDrawn;
        -:  663:  //int z = 0;// this is the counter for the temp hand
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
        4:  667:  switch( card ) 
branch  0 taken 25%
branch  1 taken 25%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 25%
branch  7 taken 25%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  668:    {
        -:  669:    // Code Refactored with Bugs
        -:  670:    case adventurer:
        1:  671:      return cardEffect_adventurer (currentPlayer, state);
call    0 returned 100%
        -:  672:	
        -:  673:	// Code Refactored with Bugs
        -:  674:    case council_room:
        1:  675:      return cardEffect_council_room (currentPlayer, state, handPos);
call    0 returned 100%
        -:  676:	
        -:  677:	// Code Refactored		
        -:  678:    case feast:
    #####:  679:      return cardEffect_feast (currentPlayer, state, handPos, choice1);
call    0 never executed
        -:  680:     
        -:  681:    case gardens:
    #####:  682:      return -1;
        -:  683:			
        -:  684:    case mine:
    #####:  685:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  686:
    #####:  687:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  688:	{
    #####:  689:	  return -1;
        -:  690:	}
        -:  691:		
    #####:  692:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  693:	{
    #####:  694:	  return -1;
        -:  695:	}
        -:  696:
    #####:  697:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  698:	{
    #####:  699:	  return -1;
        -:  700:	}
        -:  701:
    #####:  702:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  703:
        -:  704:      //discard card from hand
    #####:  705:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  706:
        -:  707:      //discard trashed card
    #####:  708:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  709:	{
    #####:  710:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  711:	    {
    #####:  712:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  713:	      break;
        -:  714:	    }
        -:  715:	}
        -:  716:			
    #####:  717:      return 0;
        -:  718:			
        -:  719:    case remodel:
    #####:  720:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  721:
    #####:  722:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  723:	{
    #####:  724:	  return -1;
        -:  725:	}
        -:  726:
    #####:  727:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  728:
        -:  729:      //discard card from hand
    #####:  730:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  731:
        -:  732:      //discard trashed card
    #####:  733:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  734:	{
    #####:  735:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  736:	    {
    #####:  737:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  738:	      break;
        -:  739:	    }
        -:  740:	}
    #####:  741:      return 0;
        -:  742:		
        -:  743:    // Code Refactored with Bugs
        -:  744:    case smithy:
        1:  745:    	return cardEffect_smithy(currentPlayer, state, handPos);
call    0 returned 100%
        -:  746:		
        -:  747:    // Code Refactored with Bugs
        -:  748:    case village:
        1:  749:    	return cardEffect_village (currentPlayer, state, handPos);
call    0 returned 100%
        -:  750:		
        -:  751:    case baron:
    #####:  752:      state->numBuys++;//Increase buys by 1!
    #####:  753:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  754:	int p = 0;//Iterator for hand!
    #####:  755:	int card_not_discarded = 1;//Flag for discard set!
    #####:  756:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  757:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  758:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  759:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  760:	    state->discardCount[currentPlayer]++;
    #####:  761:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  762:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  763:	    }
    #####:  764:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  765:	    state->handCount[currentPlayer]--;
    #####:  766:	    card_not_discarded = 0;//Exit the loop
        -:  767:	  }
    #####:  768:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  769:	    if(DEBUG) {
        -:  770:	      printf("No estate cards in your hand, invalid choice\n");
        -:  771:	      printf("Must gain an estate if there are any\n");
        -:  772:	    }
    #####:  773:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  774:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  775:	      state->supplyCount[estate]--;//Decrement estates
    #####:  776:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  777:		isGameOver(state);
call    0 never executed
        -:  778:	      }
        -:  779:	    }
    #####:  780:	    card_not_discarded = 0;//Exit the loop
        -:  781:	  }
        -:  782:			    
        -:  783:	  else{
    #####:  784:	    p++;//Next card
        -:  785:	  }
        -:  786:	}
        -:  787:      }
        -:  788:			    
        -:  789:      else{
    #####:  790:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  791:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  792:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  793:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  794:	    isGameOver(state);
call    0 never executed
        -:  795:	  }
        -:  796:	}
        -:  797:      }
        -:  798:	    
        -:  799:      
    #####:  800:      return 0;
        -:  801:		
        -:  802:    case great_hall:
        -:  803:      //+1 Card
    #####:  804:      drawCard(currentPlayer, state);
call    0 never executed
        -:  805:			
        -:  806:      //+1 Actions
    #####:  807:      state->numActions++;
        -:  808:			
        -:  809:      //discard card from hand
    #####:  810:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  811:      return 0;
        -:  812:		
        -:  813:    case minion:
        -:  814:      //+1 action
    #####:  815:      state->numActions++;
        -:  816:			
        -:  817:      //discard card from hand
    #####:  818:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  819:			
    #####:  820:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  821:	{
    #####:  822:	  state->coins = state->coins + 2;
        -:  823:	}
        -:  824:			
    #####:  825:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  826:	{
        -:  827:	  //discard hand
    #####:  828:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  829:	    {
    #####:  830:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  831:	    }
        -:  832:				
        -:  833:	  //draw 4
    #####:  834:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  835:	    {
    #####:  836:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  837:	    }
        -:  838:				
        -:  839:	  //other players discard hand and redraw if hand size > 4
    #####:  840:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  841:	    {
    #####:  842:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  843:		{
    #####:  844:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  845:		    {
        -:  846:		      //discard hand
    #####:  847:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  848:			{
    #####:  849:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  850:			}
        -:  851:							
        -:  852:		      //draw 4
    #####:  853:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  854:			{
    #####:  855:			  drawCard(i, state);
call    0 never executed
        -:  856:			}
        -:  857:		    }
        -:  858:		}
        -:  859:	    }
        -:  860:				
        -:  861:	}
    #####:  862:      return 0;
        -:  863:		
        -:  864:    case steward:
    #####:  865:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  866:	{
        -:  867:	  //+2 cards
    #####:  868:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  869:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  870:	}
    #####:  871:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  872:	{
        -:  873:	  //+2 coins
    #####:  874:	  state->coins = state->coins + 2;
        -:  875:	}
        -:  876:      else
        -:  877:	{
        -:  878:	  //trash 2 cards in hand
    #####:  879:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  880:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  881:	}
        -:  882:			
        -:  883:      //discard card from hand
    #####:  884:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  885:      return 0;
        -:  886:		
        -:  887:    case tribute:
    #####:  888:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  889:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  890:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  891:	  state->deckCount[nextPlayer]--;
        -:  892:	}
    #####:  893:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  894:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  895:	  state->discardCount[nextPlayer]--;
        -:  896:	}
        -:  897:	else{
        -:  898:	  //No Card to Reveal
        -:  899:	  if (DEBUG){
        -:  900:	    printf("No cards to reveal\n");
        -:  901:	  }
        -:  902:	}
        -:  903:      }
        -:  904:	    
        -:  905:      else{
    #####:  906:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  907:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  908:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  909:	    state->deckCount[nextPlayer]++;
    #####:  910:	    state->discard[nextPlayer][i] = -1;
    #####:  911:	    state->discardCount[nextPlayer]--;
        -:  912:	  }
        -:  913:			    
    #####:  914:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  915:	} 
    #####:  916:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  917:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  918:	state->deckCount[nextPlayer]--;
    #####:  919:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  920:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  921:	state->deckCount[nextPlayer]--;
        -:  922:      }    
        -:  923:		       
    #####:  924:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  925:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  926:	state->playedCardCount++;
    #####:  927:	tributeRevealedCards[1] = -1;
        -:  928:      }
        -:  929:
    #####:  930:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  931:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  932:	  state->coins += 2;
        -:  933:	}
        -:  934:		    
    #####:  935:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  936:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  937:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  938:	}
        -:  939:	else{//Action Card
    #####:  940:	  state->numActions = state->numActions + 2;
        -:  941:	}
        -:  942:      }
        -:  943:	    
    #####:  944:      return 0;
        -:  945:		
        -:  946:    case ambassador:
    #####:  947:      j = 0;		//used to check if player has enough cards to discard
        -:  948:
    #####:  949:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  950:	{
    #####:  951:	  return -1;				
        -:  952:	}
        -:  953:
    #####:  954:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  955:	{
    #####:  956:	  return -1;
        -:  957:	}
        -:  958:
    #####:  959:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  960:	{
    #####:  961:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  962:	    {
    #####:  963:	      j++;
        -:  964:	    }
        -:  965:	}
    #####:  966:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  967:	{
    #####:  968:	  return -1;				
        -:  969:	}
        -:  970:
        -:  971:      if (DEBUG) 
        -:  972:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  973:
        -:  974:      //increase supply count for choosen card by amount being discarded
    #####:  975:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  976:			
        -:  977:      //each other player gains a copy of revealed card
    #####:  978:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  979:	{
    #####:  980:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  981:	    {
    #####:  982:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  983:	    }
        -:  984:	}
        -:  985:
        -:  986:      //discard played card from hand
    #####:  987:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  988:
        -:  989:      //trash copies of cards returned to supply
    #####:  990:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  991:	{
    #####:  992:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  993:	    {
    #####:  994:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  995:		{
    #####:  996:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  997:		  break;
        -:  998:		}
        -:  999:	    }
        -: 1000:	}			
        -: 1001:
    #####: 1002:      return 0;
        -: 1003:		
        -: 1004:    case cutpurse:
        -: 1005:
    #####: 1006:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1007:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1008:	{
    #####: 1009:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1010:	    {
    #####: 1011:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1012:		{
    #####: 1013:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1014:		    {
    #####: 1015:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1016:		      break;
        -: 1017:		    }
    #####: 1018:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1019:		    {
    #####: 1020:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1021:			{
        -: 1022:			  if (DEBUG)
        -: 1023:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1024:			}	
    #####: 1025:		      break;
        -: 1026:		    }		
        -: 1027:		}
        -: 1028:					
        -: 1029:	    }
        -: 1030:				
        -: 1031:	}				
        -: 1032:
        -: 1033:      //discard played card from hand
    #####: 1034:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1035:
    #####: 1036:      return 0;
        -: 1037:
        -: 1038:		
        -: 1039:    case embargo: 
        -: 1040:      //+2 Coins
    #####: 1041:      state->coins = state->coins + 2;
        -: 1042:			
        -: 1043:      //see if selected pile is in play
    #####: 1044:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1045:	{
    #####: 1046:	  return -1;
        -: 1047:	}
        -: 1048:			
        -: 1049:      //add embargo token to selected supply pile
    #####: 1050:      state->embargoTokens[choice1]++;
        -: 1051:			
        -: 1052:      //trash card
    #####: 1053:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1054:      return 0;
        -: 1055:		
        -: 1056:    case outpost:
        -: 1057:      //set outpost flag
    #####: 1058:      state->outpostPlayed++;
        -: 1059:			
        -: 1060:      //discard card
    #####: 1061:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1062:      return 0;
        -: 1063:		
        -: 1064:    case salvager:
        -: 1065:      //+1 buy
    #####: 1066:      state->numBuys++;
        -: 1067:			
    #####: 1068:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1069:	{
        -: 1070:	  //gain coins equal to trashed card
    #####: 1071:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1072:	  //trash card
    #####: 1073:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1074:	}
        -: 1075:			
        -: 1076:      //discard card
    #####: 1077:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1078:      return 0;
        -: 1079:		
        -: 1080:    case sea_hag:
    #####: 1081:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1082:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1083:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1084:	  state->discardCount[i]++;
    #####: 1085:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1086:	}
        -: 1087:      }
    #####: 1088:      return 0;
        -: 1089:		
        -: 1090:    case treasure_map:
        -: 1091:      //search hand for another treasure_map
    #####: 1092:      index = -1;
    #####: 1093:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1094:	{
    #####: 1095:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1096:	    {
    #####: 1097:	      index = i;
    #####: 1098:	      break;
        -: 1099:	    }
        -: 1100:	}
    #####: 1101:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1102:	{
        -: 1103:	  //trash both treasure cards
    #####: 1104:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1105:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1106:
        -: 1107:	  //gain 4 Gold cards
    #####: 1108:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1109:	    {
    #####: 1110:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1111:	    }
        -: 1112:				
        -: 1113:	  //return success
    #####: 1114:	  return 1;
        -: 1115:	}
        -: 1116:			
        -: 1117:      //no second treasure_map found in hand
    #####: 1118:      return -1;
        -: 1119:    }
        -: 1120:	
    #####: 1121:  return -1;
        -: 1122:}
        -: 1123:
function discardCard called 3 returned 100% blocks executed 78%
        3: 1124:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1125:{
        -: 1126:	
        -: 1127:  //if card is not trashed, added to Played pile 
        3: 1128:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1129:    {
        -: 1130:      //add card to played pile
        3: 1131:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        3: 1132:      state->playedCardCount++;
        -: 1133:    }
        -: 1134:	
        -: 1135:  //set played card to -1
        3: 1136:  state->hand[currentPlayer][handPos] = -1;
        -: 1137:	
        -: 1138:  //remove card from player's hand
        3: 1139:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1140:    {
        -: 1141:      //reduce number of cards in hand
    #####: 1142:      state->handCount[currentPlayer]--;
        -: 1143:    }
        3: 1144:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1145:    {
        -: 1146:      //reduce number of cards in hand
    #####: 1147:      state->handCount[currentPlayer]--;
        -: 1148:    }
        -: 1149:  else 	
        -: 1150:    {
        -: 1151:      //replace discarded card with last card in hand
        3: 1152:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1153:      //set last card to -1
        3: 1154:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1155:      //reduce number of cards in hand
        3: 1156:      state->handCount[currentPlayer]--;
        -: 1157:    }
        -: 1158:	
        3: 1159:  return 0;
        -: 1160:}
        -: 1161:
function gainCard called 14 returned 100% blocks executed 100%
       14: 1162:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1163:{
        -: 1164:  //Note: supplyPos is enum of choosen card
        -: 1165:	
        -: 1166:  //check if supply pile is empty (0) or card is not used in game (-1)
       14: 1167:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 43% (fallthrough)
branch  2 taken 57%
        -: 1168:    {
        6: 1169:      return -1;
        -: 1170:    }
        -: 1171:	
        -: 1172:  //added card for [whoseTurn] current player:
        -: 1173:  // toFlag = 0 : add to discard
        -: 1174:  // toFlag = 1 : add to deck
        -: 1175:  // toFlag = 2 : add to hand
        -: 1176:
        8: 1177:  if (toFlag == 1)
branch  0 taken 13% (fallthrough)
branch  1 taken 88%
        -: 1178:    {
        1: 1179:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1180:      state->deckCount[player]++;
        -: 1181:    }
        7: 1182:  else if (toFlag == 2)
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        -: 1183:    {
        1: 1184:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1185:      state->handCount[player]++;
        -: 1186:    }
        -: 1187:  else
        -: 1188:    {
        6: 1189:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        6: 1190:      state->discardCount[player]++;
        -: 1191:    }
        -: 1192:	
        -: 1193:  //decrease number in supply pile
        8: 1194:  state->supplyCount[supplyPos]--;
        -: 1195:	 
        8: 1196:  return 0;
        -: 1197:}
        -: 1198:
function updateCoins called 409 returned 100% blocks executed 100%
      409: 1199:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1200:{
        -: 1201:  int i;
        -: 1202:	
        -: 1203:  //reset coin count
      409: 1204:  state->coins = 0;
        -: 1205:
        -: 1206:  //add coins for each Treasure card in player's hand
     1854: 1207:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 78%
branch  1 taken 22% (fallthrough)
        -: 1208:    {
     1445: 1209:      if (state->hand[player][i] == copper)
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
        -: 1210:	{
      734: 1211:	  state->coins += 1;
        -: 1212:	}
      711: 1213:      else if (state->hand[player][i] == silver)
branch  0 taken 42% (fallthrough)
branch  1 taken 58%
        -: 1214:	{
      300: 1215:	  state->coins += 2;
        -: 1216:	}
      411: 1217:      else if (state->hand[player][i] == gold)
branch  0 taken 73% (fallthrough)
branch  1 taken 27%
        -: 1218:	{
      300: 1219:	  state->coins += 3;
        -: 1220:	}	
        -: 1221:    }	
        -: 1222:
        -: 1223:  //add bonus
      409: 1224:  state->coins += bonus;
        -: 1225:
      409: 1226:  return 0;
        -: 1227:}
        -: 1228:
        -: 1229:/*** CS 362 Assignment 2 ***/
        -: 1230:
        -: 1231:/** Card #1. Adventurer
        -: 1232: * Function: cardEffect_adventurer
        -: 1233: * Refactored switch statements into function for adventurer card
        -: 1234: * Inputs: int currentPlayer, struct gameState *state
        -: 1235: * Outputs: returns 0
        -: 1236: * Bug: while(drawntreasure<6){ ... 
        -: 1237: *      Changed drawntreasure<2 to drawntreasure<6
        -: 1238: *      This bug causes the current player to draw more treasure cards. 
        -: 1239: */
function cardEffect_adventurer called 1 returned 100% blocks executed 100%
        1: 1240:int cardEffect_adventurer (int currentPlayer, struct gameState *state)
        -: 1241:{
        -: 1242:	int temphand[MAX_HAND], // moved above the if statement
        1: 1243:		z = 0, // this is the counter for the temp hand
        1: 1244:	    drawntreasure = 0,
        -: 1245:	    cardDrawn;
        -: 1246:	
       11: 1247:	while(drawntreasure<6){ //BUG: changed drawntreasure<2 to drawntreasure<6
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
        9: 1248:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 44% (fallthrough)
branch  1 taken 56%
        4: 1249:	  		shuffle(currentPlayer, state);
call    0 returned 100%
        -: 1250:		}
        9: 1251:		drawCard(currentPlayer, state);
call    0 returned 100%
        9: 1252:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        9: 1253:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        6: 1254:	  		drawntreasure++;
        -: 1255:		else{
        3: 1256:	  		temphand[z]=cardDrawn;
        3: 1257:	  		state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        3: 1258:	  		z++;
        -: 1259:		}
        -: 1260:      }
        5: 1261:    while(z-1>=0) { 
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3: 1262:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        3: 1263:		z=z-1;
        -: 1264:    }
        1: 1265:    return 0;
        -: 1266:}
        -: 1267:
        -: 1268:/** Card #2. Council Room
        -: 1269: * Function: cardEffect_council_room
        -: 1270: * Refactored switch statements into function for council room card
        -: 1271: * Inputs: int currentPlayer, struct gameState *state, int handPos
        -: 1272: * Outputs: returns 0
        -: 1273: * Bugs: 
        -: 1274: * 1)for (i = 0; i < 2; i++){ ... 
        -: 1275: *   Changed from "for (i = 0; i < 4; i++){ ... "
        -: 1276: * 2)if ( i == currentPlayer )
        -: 1277: *	 Changed from i != currentPlayer
        -: 1278: */
function cardEffect_council_room called 1 returned 100% blocks executed 100%
        1: 1279:int cardEffect_council_room (int currentPlayer, struct gameState *state, int handPos)
        -: 1280:{
        -: 1281:	int i;
        -: 1282:	
        -: 1283:	//+4 Cards
        3: 1284:	for (i = 0; i < 2; i++) // BUG: i < 2 changed from for (i = 0; i < 4; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -: 1285:	{
        2: 1286:		drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1287:	}
        -: 1288:	
        -: 1289:	//+1 Buy
        1: 1290:    state->numBuys++;
        -: 1291:			
        -: 1292:    //Each other player draws a card
        3: 1293:    for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -: 1294:	{
        2: 1295:		if ( i == currentPlayer ) //BUG: changed to i ++ currentPlayerfrom i != currentPlayer
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1296:	    {
        1: 1297:	    	drawCard(i, state);
call    0 returned 100%
        -: 1298:	    }
        -: 1299:	}
        -: 1300:			
        -: 1301:    //put played card in played card pile
        1: 1302:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -: 1303:			
        1: 1304:    return 0;
        -: 1305:}
        -: 1306:
        -: 1307:/** Card #3. Feast
        -: 1308: * Function: cardEffect_feast
        -: 1309: * Refactored switch statements into function for feast card
        -: 1310: * Inputs: int currentPlayer, struct gameState *state, int handPos, int choice1
        -: 1311: * Outputs: returns 0
        -: 1312: */
function cardEffect_feast called 0 returned 0% blocks executed 0%
    #####: 1313:int cardEffect_feast (int currentPlayer, struct gameState *state, int handPos, int choice1)
        -: 1314:{
        -: 1315:	int i, x;
        -: 1316:	int temphand[MAX_HAND];
        -: 1317:	
        -: 1318:	//gain card with cost up to 5
        -: 1319:	//Backup hand
    #####: 1320:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1321:		temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1322:		state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1323:    }
        -: 1324:    //Backup hand
        -: 1325:
        -: 1326:    //Update Coins for Buy
    #####: 1327:    updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####: 1328:    x = 1;//Condition to loop on
    #####: 1329:    while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####: 1330:		if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1331:	  		if (DEBUG){
        -: 1332:	    		printf("None of that card left, sorry!\n");
        -: 1333:	    	}
        -: 1334:	  		if (DEBUG){
        -: 1335:	    		printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1336:	  		}
        -: 1337:		}
    #####: 1338:		else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1339:	  		printf("That card is too expensive!\n");
call    0 never executed
        -: 1340:	  		if (DEBUG){
        -: 1341:	    		printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1342:	  		}
        -: 1343:		}
        -: 1344:		else{
        -: 1345:			if (DEBUG){
        -: 1346:	    		printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1347:	  		}
    #####: 1348:			gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####: 1349:			x = 0;//No more buying cards
        -: 1350:			if (DEBUG){
        -: 1351:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1352:			}
        -: 1353:		}
        -: 1354:    }     
        -: 1355:
        -: 1356:    //Reset Hand
    #####: 1357:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1358:		state->hand[currentPlayer][i] = temphand[i];
    #####: 1359:		temphand[i] = -1;
        -: 1360:    }
        -: 1361:    //Reset Hand		
    #####: 1362:    return 0;
        -: 1363:}
        -: 1364:
        -: 1365:/** Card #4. Smithy
        -: 1366: * Function: cardEffect_smithy
        -: 1367: * Refactored switch statements into function for smithy card
        -: 1368: * Inputs: int currentPlayer, struct gameState *state, int handPos
        -: 1369: * Outputs: returns 0
        -: 1370: * Bugs: for (i = 0; i < 1; i++) changed from "for (i = 0; i < 3; i++)"
        -: 1371: */
function cardEffect_smithy called 1 returned 100% blocks executed 100%
        1: 1372:int cardEffect_smithy(int currentPlayer, struct gameState *state, int handPos)
        -: 1373:{
        -: 1374:	int i;
        -: 1375:	
        -: 1376:	//+3 Cards
        5: 1377:	for (i = 0; i < 4; i++) // Bug: changed from "for (i = 0; i < 3; i++)"
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1378:	{
        4: 1379:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1380:	}
        -: 1381:			
        -: 1382:    //discard card from hand
        1: 1383:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1: 1384:    return 0;	
        -: 1385:}
        -: 1386:
        -: 1387:/** Card #5. Village
        -: 1388: * Function: cardEffect_village
        -: 1389: * Refactored switch statements into function for village card
        -: 1390: * Inputs: int currentPlayer, struct gameState *state, int handPos
        -: 1391: * Outputs: returns 0
        -: 1392: * Bugs: Code for +2 actions changed to +4 actions
        -: 1393: */
function cardEffect_village called 1 returned 100% blocks executed 100%
        1: 1394:int cardEffect_village (int currentPlayer, struct gameState *state, int handPos)
        -: 1395:{
        -: 1396:	//+1 Card
        1: 1397:    drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1398:			
        -: 1399:     //+2 Actions
        1: 1400:    state->numActions = state->numActions + 4; //Bug: 2 changed to 4
        -: 1401:			
        -: 1402:    //discard played card from hand
        1: 1403:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1: 1404:    return 0;
        -: 1405:}
        -: 1406:
        -: 1407:
        -: 1408://end of dominion.c
        -: 1409:
