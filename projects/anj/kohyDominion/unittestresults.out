ASSIGNMENT 3: UNIT TEST RESULTS
cardtest1.c:
**********************************************
Testing -> Adventurer Card

< P1 Data BEFORE Adventurer Card is Played >
Player 1 has 5 cards in hand.
Player 1 has 5 cards in deck.
Player 1 has 5 treasure cards in hand.
Player 1 has 2 treasure cards in deck.
Player 1 has 1 actions.

< P1 Data AFTER Adventurer Card is Played >
Player 1 has 7 cards in hand.
Player 1 has 0 cards in deck.
Player 1 has 7 treasure cards in hand.
Player 1 has 0 treasure cards in deck.
Player 1 has 1 actions.

***************** RESULTS *********************

TEST 1. Player 1's Treasure counts should increase by 2 after card is played 

   Checking Player 1's handCount

	Expected value: 7, actual value: 7

	PASS (assertion true)

   Checking Player 1's treasure count in hand

	Expected value: 7, actual value: 7

	PASS (assertion true)

TEST 2. Player 2's handCount and deckCount remains the same

   Checking Player 2's handCount

	Expected value: 0, actual value: 0

	PASS (assertion true)

   Checking Player 2's deckCount

	Expected value: 10, actual value: 10

	PASS (assertion true)

TEST 3. Check if kingdom and victory cards have any bugs

   Checking kingdom cards' supply piles

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 8, actual value: 8

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 8, actual value: 8

	PASS (assertion true)

   Checking province card pile:

	Expected value: 8, actual value: 8

	PASS (assertion true)

   Checking duchy card pile:

	Expected value: 8, actual value: 8

	PASS (assertion true)

   Checking estate card pile:

	Expected value: 8, actual value: 8

	PASS (assertion true)

PASSED ALL THE TESTS

TEST SUCCESSFULLY COMPLETED

**********************************************
File 'cardtest1.c'
Lines executed:91.21% of 91
Branches executed:63.16% of 38
Taken at least once:44.74% of 38
Calls executed:91.11% of 45
Creating 'cardtest1.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:* Author: Ju An
        -:    3:* Date: April 29, 2018
        -:    4:* OSU CS 362 - Assignment 3: Card Test 1
        -:    5:* This is a unit test for Adventurer card in dominion.c
        -:    6:*/
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include "rngs.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:
        -:   14:// for more detailed results, use NOISY_TEST 1
        -:   15:#define NOISY_TEST 1
        -:   16:
        -:   17:// asserttrue function instead of the standard C assert
        -:   18:// if assert is not true return 1
function asserttrue called 17 returned 100% blocks executed 63%
       17:   19:int asserttrue (int expectedVal, int testedVal) 
        -:   20:{
       17:   21:	if (testedVal == expectedVal) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   22:		#if (NOISY_TEST == 1)
       17:   23:			printf("\n	Expected value: %d, actual value: %d\n", expectedVal, testedVal);
call    0 returned 100%
       17:   24:			printf("\n	PASS (assertion true)\n");
call    0 returned 100%
        -:   25:		#endif
       17:   26:		return 0;
        -:   27:	} else {
        -:   28:		#if (NOISY_TEST == 1)
    #####:   29:			printf("\n	Expected value: %d, actual value: %d\n", expectedVal, testedVal);	
call    0 never executed
    #####:   30:			printf("\n	FAIL (assertion false)\n");
call    0 never executed
        -:   31:		#endif
    #####:   32:		return 1;
        -:   33:	}
        -:   34:}
        -:   35:
        -:   36:// testing the cardEffect() function (refactored) from dominion.c
        -:   37:// test should work whether a card is implemented inside cardEffect or in its own function
function main called 1 returned 100% blocks executed 85%
        1:   38:int main()
        -:   39:{
        -:   40:    // counts failed tests
        1:   41:	int failure = 0;
        -:   42:    
        -:   43:    // test variable initialization
        -:   44:	int i;
        1:   45:	int handpos = 0;
        1:   46:	int choice1 = 0;
        1:   47:	int choice2 = 0;
        1:   48:	int choice3 = 0;
        1:   49:	int bonus = 0;
        -:   50:	
        1:   51:	int numPlayer = 2;
        1:   52:	int player1 = 0;
        1:   53:	int player2 = 1;
        -:   54:	
        -:   55:	int card;
        1:   56:	int origTreasureCount = 0;
        1:   57:	int newTreasureCount = 0;
        -:   58:
        1:   59:	int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   60:               remodel, smithy, village, baron, great_hall};
        -:   61:	struct gameState G, savedData;
        -:   62:	
        1:   63:	int seed = 72645;
        -:   64:	
        1:   65:	printf("**********************************************\n");
call    0 returned 100%
        1:   66:    printf("Testing -> Adventurer Card\n");
call    0 returned 100%
        1:   67:    memset(&G, 23, sizeof(struct gameState));   		 // clear the game state
        1:   68:    initializeGame(numPlayer, k, seed, &G);   // initialize a new game
call    0 returned 100%
        1:   69:    memcpy(&savedData, &G, sizeof(struct gameState));
        -:   70:    
        1:   71:	printf("\n< P1 Data BEFORE Adventurer Card is Played >\n");
call    0 returned 100%
        -:   72:	// 1. check player 1's # of card in hand
        1:   73:	printf("Player 1 has %d cards in hand.\n", savedData.handCount[player1]);
call    0 returned 100%
        -:   74:	
        -:   75:	// 2. check player 1's # of card in deck
        1:   76:	printf("Player 1 has %d cards in deck.\n", savedData.deckCount[player1]);
call    0 returned 100%
        1:   77:	int numDeckCards = savedData.deckCount[player1];
        -:   78:	// 3. check player 1's # of treasure cards in hand
        6:   79:	for (i = 0; i < savedData.handCount[player1]; i++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:   80:		card = savedData.hand[player1][i];
        5:   81:		if (card == copper || card == silver || card == gold) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        5:   82:			origTreasureCount++;
        -:   83:		}
        -:   84:	}
        1:   85:	int origHandTreasure = origTreasureCount;
        1:   86:	printf("Player 1 has %d treasure cards in hand.\n", origHandTreasure);
call    0 returned 100%
        -:   87:	
        -:   88:	
        -:   89:	
        1:   90:	origTreasureCount = 0;
        -:   91:	// 4. check player 1's # of treasure cards in hand
        6:   92:	for (i = 0; i < savedData.deckCount[player1]; i++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:   93:		card = savedData.deck[player1][i];
        5:   94:		if (card == copper || card == silver || card == gold) {
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        2:   95:			origTreasureCount++;
        -:   96:		}
        -:   97:	}
        1:   98:	int origDeckTreasure = origTreasureCount;
        1:   99:	printf("Player 1 has %d treasure cards in deck.\n", origDeckTreasure);
call    0 returned 100%
        -:  100:	
        -:  101:	// 5. check player 1's # of actions left to do
        1:  102:	printf("Player 1 has %d actions.\n", savedData.numActions);
call    0 returned 100%
        -:  103:	
        -:  104:	// 6. Play Adventurer Card
        1:  105:	cardEffect(adventurer, choice1, choice2, choice3, &G, handpos, &bonus);
call    0 returned 100%
        -:  106:	
        1:  107:	printf("\n< P1 Data AFTER Adventurer Card is Played >\n");
call    0 returned 100%
        -:  108:	// 7. check player 1's # of card in hand
        1:  109:	printf("Player 1 has %d cards in hand.\n", G.handCount[player1]);
call    0 returned 100%
        -:  110:	
        -:  111:	// 8. check player 1's # of card in deck
        1:  112:	printf("Player 1 has %d cards in deck.\n", G.deckCount[player1]);
call    0 returned 100%
        -:  113:	
        -:  114:	// 9. check player 1's # of treasure cards in hand
        8:  115:	for (i = 0; i < G.handCount[player1]; i++) {
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        7:  116:		card = G.hand[player1][i];
        7:  117:		if (card == copper || card == silver || card == gold) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        7:  118:			newTreasureCount++;
        -:  119:		}
        -:  120:	}
        1:  121:	int newHandTreasure = newTreasureCount;
        1:  122:	printf("Player 1 has %d treasure cards in hand.\n", newHandTreasure);
call    0 returned 100%
        -:  123:	
        1:  124:	newTreasureCount = 0;
        -:  125:	// 10. check player 1's # of treasure cards in hand
        1:  126:	for (i = 0; i < G.deckCount[player1]; i++) {
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  127:		card = G.deck[player1][i];
    #####:  128:		if (card == copper || card == silver || card == gold) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  129:			newTreasureCount++;
        -:  130:		}
        -:  131:	}
        1:  132:	int newDeckTreasure = newTreasureCount;
        1:  133:	printf("Player 1 has %d treasure cards in deck.\n", newDeckTreasure);
call    0 returned 100%
        -:  134:	
        -:  135:	// 11. check player 1's # of actions left to do
        1:  136:	printf("Player 1 has %d actions.\n", G.numActions);
call    0 returned 100%
        -:  137:	
        1:  138:	printf("\n***************** RESULTS *********************\n");
call    0 returned 100%
        -:  139:	
        1:  140:	printf("\nTEST 1. Player 1's Treasure counts should increase by 2 after card is played \n");
call    0 returned 100%
        1:  141:	printf("\n   Checking Player 1's handCount\n");
call    0 returned 100%
        1:  142:	failure  += asserttrue (savedData.handCount[player1]+2,G.handCount[player1]);
call    0 returned 100%
        -:  143:	/*printf("\n   Checking Player 1's deckCount\n");
        -:  144:	failure  += asserttrue (savedData.deckCount[player1],G.deckCount[player1] + 2);
        -:  145:	*/
        1:  146:	printf("\n   Checking Player 1's treasure count in hand\n");
call    0 returned 100%
        1:  147:	failure  += asserttrue (newHandTreasure,origHandTreasure+2);
call    0 returned 100%
        -:  148:	
        1:  149:	printf("\nTEST 2. Player 2's handCount and deckCount remains the same\n");
call    0 returned 100%
        1:  150:	printf("\n   Checking Player 2's handCount\n");
call    0 returned 100%
        1:  151:	failure  += asserttrue (savedData.handCount[player2],G.handCount[player2]);
call    0 returned 100%
        1:  152:	printf("\n   Checking Player 2's deckCount\n");
call    0 returned 100%
        1:  153:	failure  += asserttrue (savedData.deckCount[player2],G.deckCount[player2]);
call    0 returned 100%
        -:  154:	
        1:  155:	printf("\nTEST 3. Check if kingdom and victory cards have any bugs\n");
call    0 returned 100%
        1:  156:	printf("\n   Checking kingdom cards' supply piles\n");
call    0 returned 100%
       11:  157:	for (i = 0; i < 10; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       10:  158:		failure  += asserttrue (savedData.supplyCount[k[i]], G.supplyCount[k[i]]);
call    0 returned 100%
        -:  159:	}
        1:  160:	printf("\n   Checking province card pile:\n");
call    0 returned 100%
        1:  161:	failure  += asserttrue (savedData.supplyCount[province], G.supplyCount[province]);
call    0 returned 100%
        1:  162:	printf("\n   Checking duchy card pile:\n");
call    0 returned 100%
        1:  163:	failure  += asserttrue (savedData.supplyCount[duchy], G.supplyCount[duchy]);
call    0 returned 100%
        1:  164:	printf("\n   Checking estate card pile:\n");
call    0 returned 100%
        1:  165:	failure  += asserttrue (savedData.supplyCount[estate], G.supplyCount[estate]);
call    0 returned 100%
        -:  166:	
        1:  167:    if (failure > 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  168:        printf("\nTEST FAILED\n");
call    0 never executed
    #####:  169:        printf("Count of failed tests: %d\n",failure);
call    0 never executed
        -:  170:    }
        -:  171:    else {
        1:  172:    	printf("\nPASSED ALL THE TESTS\n");
call    0 returned 100%
        1:  173:        printf("\nTEST SUCCESSFULLY COMPLETED\n\n");
call    0 returned 100%
        -:  174:    }
        1:  175:    printf("**********************************************\n");
call    0 returned 100%
        1:  176:	return 0;
        -:  177:}
File 'dominion.c'
Lines executed:20.25% of 563
Branches executed:23.26% of 417
Taken at least once:15.11% of 417
Calls executed:11.58% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:Team 4: (ONID: kohy) Kaylie's dominion.c code
        -:    3:https://github.com/kaylieko/CS362-004-S2018/tree/kohy-assignment-3/projects/kohy/dominion
        -:    4:*/
        -:    5:
        -:    6:#include "dominion.h"
        -:    7:#include "dominion_helpers.h"
        -:    8:#include "rngs.h"
        -:    9:#include <stdio.h>
        -:   10:#include <math.h>
        -:   11:#include <stdlib.h>
        -:   12:
function compare called 30 returned 100% blocks executed 83%
       30:   13:int compare(const void* a, const void* b) {
       30:   14:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   15:    return 1;
       30:   16:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
        8:   17:    return -1;
       22:   18:  return 0;
        -:   19:}
        -:   20:
function newGame called 0 returned 0% blocks executed 0%
    #####:   21:struct gameState* newGame() {
    #####:   22:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   23:  return g;
        -:   24:}
        -:   25:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   26:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   27:		  int k8, int k9, int k10) {
    #####:   28:  int* k = malloc(10 * sizeof(int));
    #####:   29:  k[0] = k1;
    #####:   30:  k[1] = k2;
    #####:   31:  k[2] = k3;
    #####:   32:  k[3] = k4;
    #####:   33:  k[4] = k5;
    #####:   34:  k[5] = k6;
    #####:   35:  k[6] = k7;
    #####:   36:  k[7] = k8;
    #####:   37:  k[8] = k9;
    #####:   38:  k[9] = k10;
    #####:   39:  return k;
        -:   40:}
        -:   41:
function initializeGame called 1 returned 100% blocks executed 88%
        1:   42:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   43:		   struct gameState *state) {
        -:   44:
        -:   45:  int i;
        -:   46:  int j;
        -:   47:  int it;			
        -:   48:  //set up random number generator
        1:   49:  SelectStream(1);
call    0 returned 100%
        1:   50:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   51:  
        -:   52:  //check number of players
        1:   53:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   54:    {
    #####:   55:      return -1;
        -:   56:    }
        -:   57:
        -:   58:  //set number of players
        1:   59:  state->numPlayers = numPlayers;
        -:   60:
        -:   61:  //check selected kingdom cards are different
       11:   62:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   63:    {
      110:   64:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   65:        {
      100:   66:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   67:	    {
    #####:   68:	      return -1;
        -:   69:	    }
        -:   70:        }
        -:   71:    }
        -:   72:
        -:   73:
        -:   74:  //initialize supply
        -:   75:  ///////////////////////////////
        -:   76:
        -:   77:  //set number of Curse cards
        1:   78:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   79:    {
        1:   80:      state->supplyCount[curse] = 10;
        -:   81:    }
    #####:   82:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   83:    {
    #####:   84:      state->supplyCount[curse] = 20;
        -:   85:    }
        -:   86:  else
        -:   87:    {
    #####:   88:      state->supplyCount[curse] = 30;
        -:   89:    }
        -:   90:
        -:   91:  //set number of Victory cards
        1:   92:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   93:    {
        1:   94:      state->supplyCount[estate] = 8;
        1:   95:      state->supplyCount[duchy] = 8;
        1:   96:      state->supplyCount[province] = 8;
        -:   97:    }
        -:   98:  else
        -:   99:    {
    #####:  100:      state->supplyCount[estate] = 12;
    #####:  101:      state->supplyCount[duchy] = 12;
    #####:  102:      state->supplyCount[province] = 12;
        -:  103:    }
        -:  104:
        -:  105:  //set number of Treasure cards
        1:  106:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  107:  state->supplyCount[silver] = 40;
        1:  108:  state->supplyCount[gold] = 30;
        -:  109:
        -:  110:  //set number of Kingdom cards
       21:  111:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  112:    {
      165:  113:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  114:	{
      155:  115:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  116:	    {
        -:  117:	      //check if card is a 'Victory' Kingdom card
       10:  118:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  119:		{
        4:  120:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:  121:		    state->supplyCount[i] = 8; 
        -:  122:		  }
    #####:  123:		  else{ state->supplyCount[i] = 12; }
        -:  124:		}
        -:  125:	      else
        -:  126:		{
        8:  127:		  state->supplyCount[i] = 10;
        -:  128:		}
       10:  129:	      break;
        -:  130:	    }
        -:  131:	  else    //card is not in the set choosen for the game
        -:  132:	    {
      145:  133:	      state->supplyCount[i] = -1;
        -:  134:	    }
        -:  135:	}
        -:  136:
        -:  137:    }
        -:  138:
        -:  139:  ////////////////////////
        -:  140:  //supply intilization complete
        -:  141:
        -:  142:  //set player decks
        3:  143:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  144:    {
        2:  145:      state->deckCount[i] = 0;
        8:  146:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  147:	{
        6:  148:	  state->deck[i][j] = estate;
        6:  149:	  state->deckCount[i]++;
        -:  150:	}
       16:  151:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  152:	{
       14:  153:	  state->deck[i][j] = copper;
       14:  154:	  state->deckCount[i]++;		
        -:  155:	}
        -:  156:    }
        -:  157:
        -:  158:  //shuffle player decks
        3:  159:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  160:    {
        2:  161:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  162:	{
    #####:  163:	  return -1;
        -:  164:	}
        -:  165:    }
        -:  166:
        -:  167:  //draw player hands
        3:  168:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  169:    {  
        -:  170:      //initialize hand size to zero
        2:  171:      state->handCount[i] = 0;
        2:  172:      state->discardCount[i] = 0;
        -:  173:      //draw 5 cards
        -:  174:      // for (j = 0; j < 5; j++)
        -:  175:      //	{
        -:  176:      //	  drawCard(i, state);
        -:  177:      //	}
        -:  178:    }
        -:  179:  
        -:  180:  //set embargo tokens to 0 for all supply piles
       28:  181:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  182:    {
       27:  183:      state->embargoTokens[i] = 0;
        -:  184:    }
        -:  185:
        -:  186:  //initialize first player's turn
        1:  187:  state->outpostPlayed = 0;
        1:  188:  state->phase = 0;
        1:  189:  state->numActions = 1;
        1:  190:  state->numBuys = 1;
        1:  191:  state->playedCardCount = 0;
        1:  192:  state->whoseTurn = 0;
        1:  193:  state->handCount[state->whoseTurn] = 0;
        -:  194:  //int it; move to top
        -:  195:
        -:  196:  //Moved draw cards to here, only drawing at the start of a turn
        6:  197:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:  198:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  199:  }
        -:  200:
        1:  201:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  202:
        1:  203:  return 0;
        -:  204:}
        -:  205:
function shuffle called 3 returned 100% blocks executed 94%
        3:  206:int shuffle(int player, struct gameState *state) {
        -:  207: 
        -:  208:
        -:  209:  int newDeck[MAX_DECK];
        3:  210:  int newDeckPos = 0;
        -:  211:  int card;
        -:  212:  int i;
        -:  213:
        3:  214:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  215:    return -1;
        3:  216:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  217:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  218:
       27:  219:  while (state->deckCount[player] > 0) {
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
       21:  220:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
       21:  221:    newDeck[newDeckPos] = state->deck[player][card];
       21:  222:    newDeckPos++;
       80:  223:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 74%
branch  1 taken 26% (fallthrough)
       59:  224:      state->deck[player][i] = state->deck[player][i+1];
        -:  225:    }
       21:  226:    state->deckCount[player]--;
        -:  227:  }
       24:  228:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
       21:  229:    state->deck[player][i] = newDeck[i];
       21:  230:    state->deckCount[player]++;
        -:  231:  }
        -:  232:
        3:  233:  return 0;
        -:  234:}
        -:  235:
function playCard called 0 returned 0% blocks executed 0%
    #####:  236:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  237:{	
        -:  238:  int card;
    #####:  239:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  240:
        -:  241:  //check if it is the right phase
    #####:  242:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  243:    {
    #####:  244:      return -1;
        -:  245:    }
        -:  246:	
        -:  247:  //check if player has enough actions
    #####:  248:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  249:    {
    #####:  250:      return -1;
        -:  251:    }
        -:  252:	
        -:  253:  //get card played
    #####:  254:  card = handCard(handPos, state);
call    0 never executed
        -:  255:	
        -:  256:  //check if selected card is an action
    #####:  257:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  258:    {
    #####:  259:      return -1;
        -:  260:    }
        -:  261:	
        -:  262:  //play card
    #####:  263:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  264:    {
    #####:  265:      return -1;
        -:  266:    }
        -:  267:	
        -:  268:  //reduce number of actions
    #####:  269:  state->numActions--;
        -:  270:
        -:  271:  //update coins (Treasure cards may be added with card draws)
    #####:  272:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  273:	
    #####:  274:  return 0;
        -:  275:}
        -:  276:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  277:int buyCard(int supplyPos, struct gameState *state) {
        -:  278:  int who;
        -:  279:  if (DEBUG){
        -:  280:    printf("Entering buyCard...\n");
        -:  281:  }
        -:  282:
        -:  283:  // I don't know what to do about the phase thing.
        -:  284:
    #####:  285:  who = state->whoseTurn;
        -:  286:
    #####:  287:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  288:    if (DEBUG)
        -:  289:      printf("You do not have any buys left\n");
    #####:  290:    return -1;
    #####:  291:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  292:    if (DEBUG)
        -:  293:      printf("There are not any of that type of card left\n");
    #####:  294:    return -1;
    #####:  295:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  296:    if (DEBUG) 
        -:  297:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  298:    return -1;
        -:  299:  } else {
    #####:  300:    state->phase=1;
        -:  301:    //state->supplyCount[supplyPos]--;
    #####:  302:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  303:  
    #####:  304:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  305:    state->numBuys--;
        -:  306:    if (DEBUG)
        -:  307:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  308:  }
        -:  309:
        -:  310:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  311:  //state->discardCount[who]++;
        -:  312:    
    #####:  313:  return 0;
        -:  314:}
        -:  315:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  316:int numHandCards(struct gameState *state) {
    #####:  317:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  318:}
        -:  319:
function handCard called 0 returned 0% blocks executed 0%
    #####:  320:int handCard(int handPos, struct gameState *state) {
    #####:  321:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  322:  return state->hand[currentPlayer][handPos];
        -:  323:}
        -:  324:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  325:int supplyCount(int card, struct gameState *state) {
    #####:  326:  return state->supplyCount[card];
        -:  327:}
        -:  328:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  329:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  330:  int i;
    #####:  331:  int count = 0;
        -:  332:
    #####:  333:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  344:    {
    #####:  345:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  346:    }
        -:  347:
    #####:  348:  return count;
        -:  349:}
        -:  350:
function whoseTurn called 1 returned 100% blocks executed 100%
        1:  351:int whoseTurn(struct gameState *state) {
        1:  352:  return state->whoseTurn;
        -:  353:}
        -:  354:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  355:int endTurn(struct gameState *state) {
        -:  356:  int k;
        -:  357:  int i;
    #####:  358:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  359:  
        -:  360:  //Discard hand
    #####:  361:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  362:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  363:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  364:  }
    #####:  365:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  366:    
        -:  367:  //Code for determining the player
    #####:  368:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  369:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  370:  }
        -:  371:  else{
    #####:  372:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  373:  }
        -:  374:
    #####:  375:  state->outpostPlayed = 0;
    #####:  376:  state->phase = 0;
    #####:  377:  state->numActions = 1;
    #####:  378:  state->coins = 0;
    #####:  379:  state->numBuys = 1;
    #####:  380:  state->playedCardCount = 0;
    #####:  381:  state->handCount[state->whoseTurn] = 0;
        -:  382:
        -:  383:  //int k; move to top
        -:  384:  //Next player draws hand
    #####:  385:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  386:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  387:  }
        -:  388:
        -:  389:  //Update money
    #####:  390:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  391:
    #####:  392:  return 0;
        -:  393:}
        -:  394:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  395:int isGameOver(struct gameState *state) {
        -:  396:  int i;
        -:  397:  int j;
        -:  398:	
        -:  399:  //if stack of Province cards is empty, the game ends
    #####:  400:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  401:    {
    #####:  402:      return 1;
        -:  403:    }
        -:  404:
        -:  405:  //if three supply pile are at 0, the game ends
    #####:  406:  j = 0;
    #####:  407:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  408:    {
    #####:  409:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  410:	{
    #####:  411:	  j++;
        -:  412:	}
        -:  413:    }
    #####:  414:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  415:    {
    #####:  416:      return 1;
        -:  417:    }
        -:  418:
    #####:  419:  return 0;
        -:  420:}
        -:  421:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  422:int scoreFor (int player, struct gameState *state) {
        -:  423:
        -:  424:  int i;
    #####:  425:  int score = 0;
        -:  426:  //score from hand
    #####:  427:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  428:    {
    #####:  429:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  430:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  431:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  432:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  433:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  434:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  435:    }
        -:  436:
        -:  437:  //score from discard
    #####:  438:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  439:    {
    #####:  440:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  441:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  442:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  443:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  444:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  445:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  446:    }
        -:  447:
        -:  448:  //score from deck
    #####:  449:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  450:    {
    #####:  451:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  452:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  453:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  454:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  455:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  456:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  457:    }
        -:  458:
    #####:  459:  return score;
        -:  460:}
        -:  461:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  462:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  463:  int i;	
        -:  464:  int j;
        -:  465:  int highScore;
        -:  466:  int currentPlayer;
        -:  467:
        -:  468:  //get score for each player
    #####:  469:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  470:    {
        -:  471:      //set unused player scores to -9999
    #####:  472:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  473:	{
    #####:  474:	  players[i] = -9999;
        -:  475:	}
        -:  476:      else
        -:  477:	{
    #####:  478:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  479:	}
        -:  480:    }
        -:  481:
        -:  482:  //find highest score
    #####:  483:  j = 0;
    #####:  484:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  485:    {
    #####:  486:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  487:	{
    #####:  488:	  j = i;
        -:  489:	}
        -:  490:    }
    #####:  491:  highScore = players[j];
        -:  492:
        -:  493:  //add 1 to players who had less turns
    #####:  494:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  495:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  496:    {
    #####:  497:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  498:	{
    #####:  499:	  players[i]++;
        -:  500:	}
        -:  501:    }
        -:  502:
        -:  503:  //find new highest score
    #####:  504:  j = 0;
    #####:  505:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  506:    {
    #####:  507:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  508:	{
    #####:  509:	  j = i;
        -:  510:	}
        -:  511:    }
    #####:  512:  highScore = players[j];
        -:  513:
        -:  514:  //set winners in array to 1 and rest to 0
    #####:  515:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  516:    {
    #####:  517:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  518:	{
    #####:  519:	  players[i] = 1;
        -:  520:	}
        -:  521:      else
        -:  522:	{
    #####:  523:	  players[i] = 0;
        -:  524:	}
        -:  525:    }
        -:  526:
    #####:  527:  return 0;
        -:  528:}
        -:  529:
function drawCard called 10 returned 100% blocks executed 38%
       10:  530:int drawCard(int player, struct gameState *state)
        -:  531:{	int count;
        -:  532:  int deckCounter;
       10:  533:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  534:    
        -:  535:    //Step 1 Shuffle the discard pile back into a deck
        -:  536:    int i;
        -:  537:    //Move discard to deck
    #####:  538:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  539:      state->deck[player][i] = state->discard[player][i];
    #####:  540:      state->discard[player][i] = -1;
        -:  541:    }
        -:  542:
    #####:  543:    state->deckCount[player] = state->discardCount[player];
    #####:  544:    state->discardCount[player] = 0;//Reset discard
        -:  545:
        -:  546:    //Shufffle the deck
    #####:  547:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  548:   
        -:  549:    if (DEBUG){//Debug statements
        -:  550:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  551:    }
        -:  552:    
    #####:  553:    state->discardCount[player] = 0;
        -:  554:
        -:  555:    //Step 2 Draw Card
    #####:  556:    count = state->handCount[player];//Get current player's hand count
        -:  557:    
        -:  558:    if (DEBUG){//Debug statements
        -:  559:      printf("Current hand count: %d\n", count);
        -:  560:    }
        -:  561:    
    #####:  562:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  563:
    #####:  564:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  565:      return -1;
        -:  566:
    #####:  567:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  568:    state->deckCount[player]--;
    #####:  569:    state->handCount[player]++;//Increment hand count
        -:  570:  }
        -:  571:
        -:  572:  else{
       10:  573:    int count = state->handCount[player];//Get current hand count for player
        -:  574:    int deckCounter;
        -:  575:    if (DEBUG){//Debug statements
        -:  576:      printf("Current hand count: %d\n", count);
        -:  577:    }
        -:  578:
       10:  579:    deckCounter = state->deckCount[player];//Create holder for the deck count
       10:  580:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       10:  581:    state->deckCount[player]--;
       10:  582:    state->handCount[player]++;//Increment hand count
        -:  583:  }
        -:  584:
       10:  585:  return 0;
        -:  586:}
        -:  587:
function getCost called 0 returned 0% blocks executed 0%
    #####:  588:int getCost(int cardNumber)
        -:  589:{
    #####:  590:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  591:    {
        -:  592:    case curse:
    #####:  593:      return 0;
        -:  594:    case estate:
    #####:  595:      return 2;
        -:  596:    case duchy:
    #####:  597:      return 5;
        -:  598:    case province:
    #####:  599:      return 8;
        -:  600:    case copper:
    #####:  601:      return 0;
        -:  602:    case silver:
    #####:  603:      return 3;
        -:  604:    case gold:
    #####:  605:      return 6;
        -:  606:    case adventurer:
    #####:  607:      return 6;
        -:  608:    case council_room:
    #####:  609:      return 5;
        -:  610:    case feast:
    #####:  611:      return 4;
        -:  612:    case gardens:
    #####:  613:      return 4;
        -:  614:    case mine:
    #####:  615:      return 5;
        -:  616:    case remodel:
    #####:  617:      return 4;
        -:  618:    case smithy:
    #####:  619:      return 4;
        -:  620:    case village:
    #####:  621:      return 3;
        -:  622:    case baron:
    #####:  623:      return 4;
        -:  624:    case great_hall:
    #####:  625:      return 3;
        -:  626:    case minion:
    #####:  627:      return 5;
        -:  628:    case steward:
    #####:  629:      return 3;
        -:  630:    case tribute:
    #####:  631:      return 5;
        -:  632:    case ambassador:
    #####:  633:      return 3;
        -:  634:    case cutpurse:
    #####:  635:      return 4;
        -:  636:    case embargo: 
    #####:  637:      return 2;
        -:  638:    case outpost:
    #####:  639:      return 5;
        -:  640:    case salvager:
    #####:  641:      return 4;
        -:  642:    case sea_hag:
    #####:  643:      return 4;
        -:  644:    case treasure_map:
    #####:  645:      return 4;
        -:  646:    }
        -:  647:	
    #####:  648:  return -1;
        -:  649:}
        -:  650:
        -:  651://Assignment #2, Refactor 'Adventurer'
function adventurerEffect called 1 returned 100% blocks executed 100%
        1:  652:int adventurerEffect(int currentPlayer, struct gameState *state){
        -:  653:  int cardDrawn;
        1:  654:  int drawntreasure = 0;
        1:  655:  int z = 0;
        -:  656:  int temphand[MAX_HAND];
        7:  657:  while(drawntreasure < 2) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  658:    //if the deck is empty we need to shuffle discard and add to deck
        -:  659:    //*Introduce a Bug: Instead of shuffling discard empty deck, this will result shuffle the deck with 1 or 0 card
        5:  660:    if (state->deckCount[currentPlayer] < 2) {
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        1:  661:      shuffle(currentPlayer, state);
call    0 returned 100%
        -:  662:    }
        5:  663:    drawCard(currentPlayer, state);
call    0 returned 100%
        5:  664:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
        5:  665:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        2:  666:      drawntreasure++;
        -:  667:    else{
        3:  668:      temphand[z] = cardDrawn;
        3:  669:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        3:  670:      z++;
        -:  671:    }
        -:  672:  }
        5:  673:  while(z - 1 >= 0) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3:  674:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
        3:  675:    z = z - 1;
        -:  676:  }
        1:  677:  return 0;
        -:  678:}
        -:  679:
        -:  680:
        -:  681://Assignment #2, Refactor 'Smithy'
function smithyEffect called 0 returned 0% blocks executed 0%
    #####:  682:int smithyEffect(int currentPlayer, struct gameState *state, int handPos)
        -:  683:{
        -:  684:  int i;
        -:  685:  //+3 cards
        -:  686:  //*Introduce a Bug: Draw +4 cards instead of +3
    #####:  687:  for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####:  688:    drawCard(currentPlayer, state);
call    0 never executed
        -:  689:  }  
        -:  690:  //discard card from hand
    #####:  691:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  692:  return 0;
        -:  693:}
        -:  694:
        -:  695:
        -:  696://Assignment #2, Refactor 'Counsil_Room'
function counsil_RoomEffect called 0 returned 0% blocks executed 0%
    #####:  697:int counsil_RoomEffect(int currentPlayer, struct gameState *state, int handPos)
        -:  698:{
        -:  699:  int i;
        -:  700:
        -:  701:  //+4 Cards
    #####:  702:  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  703:  {
    #####:  704:    drawCard(currentPlayer, state);
call    0 never executed
        -:  705:  }   
        -:  706:
        -:  707:  //Buy +1
    #####:  708:  state->numBuys++;
        -:  709:
        -:  710:  //Each other player draws a card
    #####:  711:  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  712:  {
    #####:  713:    if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  714:    {
    #####:  715:      drawCard(i, state);
call    0 never executed
        -:  716:    }
        -:  717:  }     
        -:  718:  //put played card in played card pile
        -:  719:  //*Introduce a Bug: Trash a card from hand instead of discard
    #####:  720:  discardCard(handPos, currentPlayer, state, 1);      
call    0 never executed
    #####:  721:  return 0;
        -:  722:}
        -:  723:
        -:  724:
        -:  725://Assignment #2, Refactor 'Village'
function villageEffect called 0 returned 0% blocks executed 0%
    #####:  726:int villageEffect(int currentPlayer, struct gameState *state, int handPos)
        -:  727:{
        -:  728:  //+1 Card
    #####:  729:  drawCard(currentPlayer, state); 
call    0 never executed
        -:  730:
        -:  731:  //+2 Actions
    #####:  732:  state->numActions = state->numActions + 2; 
        -:  733:
        -:  734:  //discard played card from hand
        -:  735:  
    #####:  736:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  737:  return 0;
        -:  738:}
        -:  739:
        -:  740:
        -:  741://Assignment #2, Refactor 'Great_Hall'
function great_HallEffect called 0 returned 0% blocks executed 0%
    #####:  742:int great_HallEffect(int currentPlayer, struct gameState *state, int handPos){
        -:  743:  //+1 Card
    #####:  744:  drawCard(currentPlayer, state); 
call    0 never executed
        -:  745:
        -:  746:  //+1 Actions
        -:  747:  //*Introduce a Bug: gain +2 actions instead of +1
    #####:  748:  state->numActions = state->numActions + 2;     
        -:  749:
        -:  750:  //discard card from hand
    #####:  751:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  752:  return 0;
        -:  753:}
        -:  754:
        -:  755:
function cardEffect called 1 returned 100% blocks executed 3%
        1:  756:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  757:{
        -:  758:  int i;
        -:  759:  int j;
        -:  760:  int k;
        -:  761:  int x;
        -:  762:  int index;
        1:  763:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        1:  764:  int nextPlayer = currentPlayer + 1;
        -:  765:
        1:  766:  int tributeRevealedCards[2] = {-1, -1};
        -:  767:  int temphand[MAX_HAND];// moved above the if statement
        -:  768:  //int drawntreasure=0; //moved into adventurerEffect function
        -:  769:  //int cardDrawn;       //moved into adventurerEffect function
        -:  770:  //int z = 0;           //moved into adventurerEffect function
        1:  771:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  772:    nextPlayer = 0;
        -:  773:  }
        -:  774:  
        -:  775:	
        -:  776:  //uses switch to select card and perform actions
        1:  777:  switch( card ) 
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  778:  {
        -:  779:    case adventurer:
        -:  780:      //call the adventurer card effect function
        1:  781:      adventurerEffect(currentPlayer, state);
call    0 returned 100%
        1:  782:      return 0;
        -:  783:		
        -:  784:    case smithy:
        -:  785:      //call the smithy card effect function
    #####:  786:      smithyEffect(currentPlayer, state, handPos);
call    0 never executed
    #####:  787:      return 0;
        -:  788:
        -:  789:    case council_room:
        -:  790:      //call the counsil_room card effect function
    #####:  791:      counsil_RoomEffect(currentPlayer, state, handPos);
call    0 never executed
    #####:  792:      return 0;
        -:  793:      
        -:  794:    case village:
        -:  795:      //call the village card effect function
    #####:  796:      villageEffect (currentPlayer, state, handPos);
call    0 never executed
    #####:  797:      return 0;  
        -:  798:			
        -:  799:    case great_hall:
        -:  800:      //call the great_hall card effect function
    #####:  801:      great_HallEffect (currentPlayer, state, handPos);
call    0 never executed
    #####:  802:      return 0;
        -:  803:
        -:  804:    case feast:
        -:  805:      //gain card with cost up to 5
        -:  806:      //Backup hand
    #####:  807:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  808:      	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  809:      	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  810:      }
        -:  811:      //Backup hand
        -:  812:
        -:  813:      //Update Coins for Buy
    #####:  814:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  815:      x = 1;//Condition to loop on
    #####:  816:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  817:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  818:	  if (DEBUG)
        -:  819:	    printf("None of that card left, sorry!\n");
        -:  820:
        -:  821:	  if (DEBUG){
        -:  822:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  823:	  }
        -:  824:	}
    #####:  825:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  826:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  827:
        -:  828:	  if (DEBUG){
        -:  829:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  830:	  }
        -:  831:	}
        -:  832:	else{
        -:  833:
        -:  834:	  if (DEBUG){
        -:  835:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  836:	  }
        -:  837:
    #####:  838:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  839:	  x = 0;//No more buying cards
        -:  840:
        -:  841:	  if (DEBUG){
        -:  842:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  843:	  }
        -:  844:
        -:  845:	}
        -:  846:      }     
        -:  847:
        -:  848:      //Reset Hand
    #####:  849:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  850:	state->hand[currentPlayer][i] = temphand[i];
    #####:  851:	temphand[i] = -1;
        -:  852:      }
        -:  853:      //Reset Hand
        -:  854:      			
    #####:  855:      return 0;
        -:  856:			
        -:  857:    case gardens:
    #####:  858:      return -1;
        -:  859:			
        -:  860:    case mine:
    #####:  861:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  862:
    #####:  863:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  864:	{
    #####:  865:	  return -1;
        -:  866:	}
        -:  867:		
    #####:  868:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  869:	{
    #####:  870:	  return -1;
        -:  871:	}
        -:  872:
    #####:  873:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  874:	{
    #####:  875:	  return -1;
        -:  876:	}
        -:  877:
    #####:  878:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  879:
        -:  880:      //discard card from hand
    #####:  881:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  882:
        -:  883:      //discard trashed card
    #####:  884:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  885:	{
    #####:  886:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  887:	    {
    #####:  888:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  889:	      break;
        -:  890:	    }
        -:  891:	}
        -:  892:			
    #####:  893:      return 0;
        -:  894:			
        -:  895:    case remodel:
    #####:  896:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  897:
    #####:  898:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  899:	{
    #####:  900:	  return -1;
        -:  901:	}
        -:  902:
    #####:  903:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  904:
        -:  905:      //discard card from hand
    #####:  906:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  907:
        -:  908:      //discard trashed card
    #####:  909:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  910:	{
    #####:  911:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  912:	    {
    #####:  913:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  914:	      break;
        -:  915:	    }
        -:  916:	}
        -:  917:
        -:  918:
    #####:  919:      return 0;
        -:  920:		
        -:  921:    
        -:  922:		
        -:  923:    
        -:  924:		
        -:  925:    case baron:
    #####:  926:      state->numBuys++;//Increase buys by 1!
    #####:  927:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  928:	int p = 0;//Iterator for hand!
    #####:  929:	int card_not_discarded = 1;//Flag for discard set!
    #####:  930:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  931:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  932:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  933:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  934:	    state->discardCount[currentPlayer]++;
    #####:  935:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  936:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  937:	    }
    #####:  938:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  939:	    state->handCount[currentPlayer]--;
    #####:  940:	    card_not_discarded = 0;//Exit the loop
        -:  941:	  }
    #####:  942:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  943:	    if(DEBUG) {
        -:  944:	      printf("No estate cards in your hand, invalid choice\n");
        -:  945:	      printf("Must gain an estate if there are any\n");
        -:  946:	    }
    #####:  947:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  948:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  949:	      state->supplyCount[estate]--;//Decrement estates
    #####:  950:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  951:		isGameOver(state);
call    0 never executed
        -:  952:	      }
        -:  953:	    }
    #####:  954:	    card_not_discarded = 0;//Exit the loop
        -:  955:	  }
        -:  956:			    
        -:  957:	  else{
    #####:  958:	    p++;//Next card
        -:  959:	  }
        -:  960:	}
        -:  961:      }
        -:  962:			    
        -:  963:      else{
    #####:  964:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  965:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  966:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  967:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  968:	    isGameOver(state);
call    0 never executed
        -:  969:	  }
        -:  970:	}
        -:  971:      }
        -:  972:	    
        -:  973:      
    #####:  974:      return 0;
        -:  975:		
        -:  976:    
        -:  977:		
        -:  978:    case minion:
        -:  979:      //+1 action
    #####:  980:      state->numActions++;
        -:  981:			
        -:  982:      //discard card from hand
    #####:  983:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  984:			
    #####:  985:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  986:	{
    #####:  987:	  state->coins = state->coins + 2;
        -:  988:	}
        -:  989:			
    #####:  990:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  991:	{
        -:  992:	  //discard hand
    #####:  993:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  994:	    {
    #####:  995:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  996:	    }
        -:  997:				
        -:  998:	  //draw 4
    #####:  999:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1000:	    {
    #####: 1001:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1002:	    }
        -: 1003:				
        -: 1004:	  //other players discard hand and redraw if hand size > 4
    #####: 1005:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1006:	    {
    #####: 1007:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1008:		{
    #####: 1009:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1010:		    {
        -: 1011:		      //discard hand
    #####: 1012:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1013:			{
    #####: 1014:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1015:			}
        -: 1016:							
        -: 1017:		      //draw 4
    #####: 1018:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1019:			{
    #####: 1020:			  drawCard(i, state);
call    0 never executed
        -: 1021:			}
        -: 1022:		    }
        -: 1023:		}
        -: 1024:	    }
        -: 1025:				
        -: 1026:	}
    #####: 1027:      return 0;
        -: 1028:		
        -: 1029:    case steward:
    #####: 1030:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1031:	{
        -: 1032:	  //+2 cards
    #####: 1033:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1034:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1035:	}
    #####: 1036:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1037:	{
        -: 1038:	  //+2 coins
    #####: 1039:	  state->coins = state->coins + 2;
        -: 1040:	}
        -: 1041:      else
        -: 1042:	{
        -: 1043:	  //trash 2 cards in hand
    #####: 1044:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1045:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1046:	}
        -: 1047:			
        -: 1048:      //discard card from hand
    #####: 1049:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1050:      return 0;
        -: 1051:		
        -: 1052:    case tribute:
    #####: 1053:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1054:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1055:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1056:	  state->deckCount[nextPlayer]--;
        -: 1057:	}
    #####: 1058:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1059:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1060:	  state->discardCount[nextPlayer]--;
        -: 1061:	}
        -: 1062:	else{
        -: 1063:	  //No Card to Reveal
        -: 1064:	  if (DEBUG){
        -: 1065:	    printf("No cards to reveal\n");
        -: 1066:	  }
        -: 1067:	}
        -: 1068:      }
        -: 1069:	    
        -: 1070:      else{
    #####: 1071:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1072:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1073:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1074:	    state->deckCount[nextPlayer]++;
    #####: 1075:	    state->discard[nextPlayer][i] = -1;
    #####: 1076:	    state->discardCount[nextPlayer]--;
        -: 1077:	  }
        -: 1078:			    
    #####: 1079:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1080:	} 
    #####: 1081:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1082:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1083:	state->deckCount[nextPlayer]--;
    #####: 1084:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1085:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1086:	state->deckCount[nextPlayer]--;
        -: 1087:      }    
        -: 1088:		       
    #####: 1089:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1090:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1091:	state->playedCardCount++;
    #####: 1092:	tributeRevealedCards[1] = -1;
        -: 1093:      }
        -: 1094:
    #####: 1095:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1096:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1097:	  state->coins += 2;
        -: 1098:	}
        -: 1099:		    
    #####: 1100:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1101:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1102:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1103:	}
        -: 1104:	else{//Action Card
    #####: 1105:	  state->numActions = state->numActions + 2;
        -: 1106:	}
        -: 1107:      }
        -: 1108:	    
    #####: 1109:      return 0;
        -: 1110:		
        -: 1111:    case ambassador:
    #####: 1112:      j = 0;		//used to check if player has enough cards to discard
        -: 1113:
    #####: 1114:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1115:	{
    #####: 1116:	  return -1;				
        -: 1117:	}
        -: 1118:
    #####: 1119:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1120:	{
    #####: 1121:	  return -1;
        -: 1122:	}
        -: 1123:
    #####: 1124:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1125:	{
    #####: 1126:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1127:	    {
    #####: 1128:	      j++;
        -: 1129:	    }
        -: 1130:	}
    #####: 1131:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1132:	{
    #####: 1133:	  return -1;				
        -: 1134:	}
        -: 1135:
        -: 1136:      if (DEBUG) 
        -: 1137:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1138:
        -: 1139:      //increase supply count for choosen card by amount being discarded
    #####: 1140:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1141:			
        -: 1142:      //each other player gains a copy of revealed card
    #####: 1143:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1144:	{
    #####: 1145:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1146:	    {
    #####: 1147:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1148:	    }
        -: 1149:	}
        -: 1150:
        -: 1151:      //discard played card from hand
    #####: 1152:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1153:
        -: 1154:      //trash copies of cards returned to supply
    #####: 1155:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1156:	{
    #####: 1157:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1158:	    {
    #####: 1159:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1160:		{
    #####: 1161:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1162:		  break;
        -: 1163:		}
        -: 1164:	    }
        -: 1165:	}			
        -: 1166:
    #####: 1167:      return 0;
        -: 1168:		
        -: 1169:    case cutpurse:
        -: 1170:
    #####: 1171:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1172:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1173:	{
    #####: 1174:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1175:	    {
    #####: 1176:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1177:		{
    #####: 1178:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1179:		    {
    #####: 1180:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1181:		      break;
        -: 1182:		    }
    #####: 1183:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1184:		    {
    #####: 1185:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1186:			{
        -: 1187:			  if (DEBUG)
        -: 1188:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1189:			}	
    #####: 1190:		      break;
        -: 1191:		    }		
        -: 1192:		}
        -: 1193:					
        -: 1194:	    }
        -: 1195:				
        -: 1196:	}				
        -: 1197:
        -: 1198:      //discard played card from hand
    #####: 1199:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1200:
    #####: 1201:      return 0;
        -: 1202:
        -: 1203:		
        -: 1204:    case embargo: 
        -: 1205:      //+2 Coins
    #####: 1206:      state->coins = state->coins + 2;
        -: 1207:			
        -: 1208:      //see if selected pile is in play
    #####: 1209:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1210:	{
    #####: 1211:	  return -1;
        -: 1212:	}
        -: 1213:			
        -: 1214:      //add embargo token to selected supply pile
    #####: 1215:      state->embargoTokens[choice1]++;
        -: 1216:			
        -: 1217:      //trash card
    #####: 1218:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1219:      return 0;
        -: 1220:		
        -: 1221:    case outpost:
        -: 1222:      //set outpost flag
    #####: 1223:      state->outpostPlayed++;
        -: 1224:			
        -: 1225:      //discard card
    #####: 1226:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1227:      return 0;
        -: 1228:		
        -: 1229:    case salvager:
        -: 1230:      //+1 buy
    #####: 1231:      state->numBuys++;
        -: 1232:			
    #####: 1233:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1234:	{
        -: 1235:	  //gain coins equal to trashed card
    #####: 1236:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1237:	  //trash card
    #####: 1238:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1239:	}
        -: 1240:			
        -: 1241:      //discard card
    #####: 1242:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1243:      return 0;
        -: 1244:		
        -: 1245:    case sea_hag:
    #####: 1246:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1247:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1248:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1249:	  state->discardCount[i]++;
    #####: 1250:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1251:	}
        -: 1252:      }
    #####: 1253:      return 0;
        -: 1254:		
        -: 1255:    case treasure_map:
        -: 1256:      //search hand for another treasure_map
    #####: 1257:      index = -1;
    #####: 1258:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1259:	{
    #####: 1260:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1261:	    {
    #####: 1262:	      index = i;
    #####: 1263:	      break;
        -: 1264:	    }
        -: 1265:	}
    #####: 1266:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1267:	{
        -: 1268:	  //trash both treasure cards
    #####: 1269:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1270:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1271:
        -: 1272:	  //gain 4 Gold cards
    #####: 1273:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1274:	    {
    #####: 1275:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1276:	    }
        -: 1277:				
        -: 1278:	  //return success
    #####: 1279:	  return 1;
        -: 1280:	}
        -: 1281:			
        -: 1282:      //no second treasure_map found in hand
    #####: 1283:      return -1;
        -: 1284:    }
        -: 1285:	
    #####: 1286:  return -1;
        -: 1287:}
        -: 1288:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1289:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1290:{
        -: 1291:	
        -: 1292:  //if card is not trashed, added to Played pile 
    #####: 1293:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1294:    {
        -: 1295:      //add card to played pile
    #####: 1296:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1297:      state->playedCardCount++;
        -: 1298:    }
        -: 1299:	
        -: 1300:  //set played card to -1
    #####: 1301:  state->hand[currentPlayer][handPos] = -1;
        -: 1302:	
        -: 1303:  //remove card from player's hand
    #####: 1304:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1305:    {
        -: 1306:      //reduce number of cards in hand
    #####: 1307:      state->handCount[currentPlayer]--;
        -: 1308:    }
    #####: 1309:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1310:    {
        -: 1311:      //reduce number of cards in hand
    #####: 1312:      state->handCount[currentPlayer]--;
        -: 1313:    }
        -: 1314:  else 	
        -: 1315:    {
        -: 1316:      //replace discarded card with last card in hand
    #####: 1317:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1318:      //set last card to -1
    #####: 1319:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1320:      //reduce number of cards in hand
    #####: 1321:      state->handCount[currentPlayer]--;
        -: 1322:    }
        -: 1323:	
    #####: 1324:  return 0;
        -: 1325:}
        -: 1326:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1327:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1328:{
        -: 1329:  //Note: supplyPos is enum of choosen card
        -: 1330:	
        -: 1331:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1332:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1333:    {
    #####: 1334:      return -1;
        -: 1335:    }
        -: 1336:	
        -: 1337:  //added card for [whoseTurn] current player:
        -: 1338:  // toFlag = 0 : add to discard
        -: 1339:  // toFlag = 1 : add to deck
        -: 1340:  // toFlag = 2 : add to hand
        -: 1341:
    #####: 1342:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1343:    {
    #####: 1344:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1345:      state->deckCount[player]++;
        -: 1346:    }
    #####: 1347:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1348:    {
    #####: 1349:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1350:      state->handCount[player]++;
        -: 1351:    }
        -: 1352:  else
        -: 1353:    {
    #####: 1354:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1355:      state->discardCount[player]++;
        -: 1356:    }
        -: 1357:	
        -: 1358:  //decrease number in supply pile
    #####: 1359:  state->supplyCount[supplyPos]--;
        -: 1360:	 
    #####: 1361:  return 0;
        -: 1362:}
        -: 1363:
function updateCoins called 1 returned 100% blocks executed 64%
        1: 1364:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1365:{
        -: 1366:  int i;
        -: 1367:	
        -: 1368:  //reset coin count
        1: 1369:  state->coins = 0;
        -: 1370:
        -: 1371:  //add coins for each Treasure card in player's hand
        6: 1372:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1373:    {
        5: 1374:      if (state->hand[player][i] == copper)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1375:	{
        5: 1376:	  state->coins += 1;
        -: 1377:	}
    #####: 1378:      else if (state->hand[player][i] == silver)
branch  0 never executed
branch  1 never executed
        -: 1379:	{
    #####: 1380:	  state->coins += 2;
        -: 1381:	}
    #####: 1382:      else if (state->hand[player][i] == gold)
branch  0 never executed
branch  1 never executed
        -: 1383:	{
    #####: 1384:	  state->coins += 3;
        -: 1385:	}	
        -: 1386:    }	
        -: 1387:
        -: 1388:  //add bonus
        1: 1389:  state->coins += bonus;
        -: 1390:
        1: 1391:  return 0;
        -: 1392:}
        -: 1393:
        -: 1394:
        -: 1395:
        -: 1396://end of dominion.c
cardtest2.c:
**********************************************
Testing -> Smithy Card

< P1 Data BEFORE Smithy Card is Played >
Player 1 has 5 cards in hand.
Player 1 has 5 cards in deck.
Player 1 has 0 cards in discard pile.

< P1 Data AFTER Smithy Card is Played >
Player 1 has 8 cards in hand.
Player 1 has 1 cards in deck.
Player 1 has 0 cards in discard pile.

***************** RESULTS *********************

TEST 1. Check to see whether or not player 1 got 3 extra cards 

   Checking to see if player1 got 3 cards

	Expected value: 7, actual value: 8

	FAIL (assertion false)

   Checking to see if the 3 cards were from current player's deck?

	Expected value: 2, actual value: 1

	FAIL (assertion false)

TEST 2. Check to see discardCard() function within Smithy Card's code worked

   Checking... 

   Prev # of discard count = 0

   Current # of discard count = 1

	Expected value: 1, actual value: 1

	PASS (assertion true)

TEST 3. Check to see if player 2's handCount and deckCount remains the same

   Checking player 2's handCount

	Expected value: 0, actual value: 0

	PASS (assertion true)

   Checking player 2's  deckCount

	Expected value: 10, actual value: 10

	PASS (assertion true)

TEST 4. Check if kingdom and victory cards have any bugs

   Checking kingdom cards' supply piles

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 8, actual value: 8

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 8, actual value: 8

	PASS (assertion true)

   Checking province card pile:

	Expected value: 8, actual value: 8

	PASS (assertion true)

   Checking duchy card pile:

	Expected value: 8, actual value: 8

	PASS (assertion true)

   Checking estate card pile:

	Expected value: 8, actual value: 8

	PASS (assertion true)

TEST FAILED
Count of failed tests: 2
**********************************************
File 'cardtest2.c'
Lines executed:97.01% of 67
Branches executed:100.00% of 6
Taken at least once:83.33% of 6
Calls executed:95.65% of 46
Creating 'cardtest2.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:* Author: Ju An
        -:    3:* Date: April 29, 2018
        -:    4:* OSU CS 362 - Assignment 3: Card Test 2
        -:    5:* This is a unit test for Smithy card in dominion.c
        -:    6:*/
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include "rngs.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:
        -:   14:// for more detailed results, use NOISY_TEST 1
        -:   15:#define NOISY_TEST 1
        -:   16:
        -:   17:// asserttrue function instead of the standard C assert
        -:   18:// if assert is not true return 1
function asserttrue called 18 returned 100% blocks executed 100%
       18:   19:int asserttrue (int expectedVal, int testedVal) 
        -:   20:{
       18:   21:	if (testedVal == expectedVal) {
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
        -:   22:		#if (NOISY_TEST == 1)
       16:   23:			printf("\n	Expected value: %d, actual value: %d\n", expectedVal, testedVal);
call    0 returned 100%
       16:   24:			printf("\n	PASS (assertion true)\n");
call    0 returned 100%
        -:   25:		#endif
       16:   26:		return 0;
        -:   27:	} else {
        -:   28:		#if (NOISY_TEST == 1)
        2:   29:			printf("\n	Expected value: %d, actual value: %d\n", expectedVal, testedVal);	
call    0 returned 100%
        2:   30:			printf("\n	FAIL (assertion false)\n");
call    0 returned 100%
        -:   31:		#endif
        2:   32:		return 1;
        -:   33:	}
        -:   34:}
        -:   35:
        -:   36:// testing the cardEffect() function (refactored) from dominion.c
        -:   37:// test should work whether a card is implemented inside cardEffect or in its own function
function main called 1 returned 100% blocks executed 96%
        1:   38:int main()
        -:   39:{
        -:   40:    // counts failed tests
        1:   41:	int failure = 0;
        -:   42:    
        -:   43:    // test variable initialization
        -:   44:	int i;
        1:   45:	int handpos = 0;
        1:   46:	int choice1 = 0;
        1:   47:	int choice2 = 0;
        1:   48:	int choice3 = 0;
        1:   49:	int bonus = 0;
        -:   50:	
        1:   51:	int numPlayer = 2;
        1:   52:	int player1 = 0;
        1:   53:	int player2 = 1;
        -:   54:	
        1:   55:	int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   56:               remodel, smithy, village, baron, great_hall};
        -:   57:	struct gameState G, savedData;
        -:   58:	
        1:   59:	int seed = 5656;
        -:   60:	
        1:   61:	printf("**********************************************\n");
call    0 returned 100%
        1:   62:    printf("Testing -> Smithy Card\n");
call    0 returned 100%
        1:   63:    memset(&G, 23, sizeof(struct gameState));   		 // clear the game state
        1:   64:    initializeGame(numPlayer, k, seed, &G);   // initialize a new game
call    0 returned 100%
        1:   65:    memcpy(&savedData, &G, sizeof(struct gameState));
        -:   66:	
        1:   67:	printf("\n< P1 Data BEFORE Smithy Card is Played >\n");
call    0 returned 100%
        -:   68:	// 1. check player 1's # of card in hand
        1:   69:	printf("Player 1 has %d cards in hand.\n", savedData.handCount[player1]);
call    0 returned 100%
        -:   70:	
        -:   71:	// 2. check player 1's # of card in deck
        1:   72:	printf("Player 1 has %d cards in deck.\n", savedData.deckCount[player1]);
call    0 returned 100%
        -:   73:	
        -:   74:	// 3. check player 1's # of card in discard pile
        1:   75:	printf("Player 1 has %d cards in discard pile.\n", savedData.discardCount[player1]);
call    0 returned 100%
        -:   76:	
        -:   77:	// 4. Play Smithy Card
        1:   78:	cardEffect(smithy, choice1, choice2, choice3, &G, handpos, &bonus);
call    0 returned 100%
        -:   79:	
        1:   80:	printf("\n< P1 Data AFTER Smithy Card is Played >\n");
call    0 returned 100%
        -:   81:	// 5. check player 1's # of card in hand
        1:   82:	printf("Player 1 has %d cards in hand.\n", G.handCount[player1]);
call    0 returned 100%
        -:   83:	
        -:   84:	// 6. check player 1's # of card in deck
        1:   85:	printf("Player 1 has %d cards in deck.\n", G.deckCount[player1]);
call    0 returned 100%
        -:   86:	
        -:   87:	// 7. check player 1's # of card in discard pile
        1:   88:	printf("Player 1 has %d cards in discard pile.\n", G.discardCount[player1]);
call    0 returned 100%
        -:   89:	
        -:   90:
        1:   91:	printf("\n***************** RESULTS *********************\n");
call    0 returned 100%
        -:   92:	
        1:   93:	printf("\nTEST 1. Check to see whether or not player 1 got 3 extra cards \n");
call    0 returned 100%
        1:   94:	printf("\n   Checking to see if player1 got 3 cards\n");
call    0 returned 100%
        1:   95:	failure  += asserttrue (savedData.handCount[player1]+2, G.handCount[player1]);
call    0 returned 100%
        1:   96:	printf("\n   Checking to see if the 3 cards were from current player's deck?\n");
call    0 returned 100%
        1:   97:	failure  += asserttrue (savedData.deckCount[player1]-3, G.deckCount[player1]);
call    0 returned 100%
        -:   98:
        -:   99:
        1:  100:	printf("\nTEST 2. Check to see discardCard() function within Smithy Card's code worked\n");
call    0 returned 100%
        -:  101:	// NOTE: used card sent to discardCard() to be added on to a played pile
        1:  102:	printf("\n   Checking... \n");
call    0 returned 100%
        1:  103:	printf("\n   Prev # of discard count = %d\n", savedData.playedCardCount);
call    0 returned 100%
        1:  104:	printf("\n   Current # of discard count = %d\n", G.playedCardCount);
call    0 returned 100%
        1:  105:	failure  += asserttrue (savedData.playedCardCount+1,G.playedCardCount);
call    0 returned 100%
        -:  106:	
        1:  107:	printf("\nTEST 3. Check to see if player 2's handCount and deckCount remains the same\n");
call    0 returned 100%
        1:  108:	printf("\n   Checking player 2's handCount\n");
call    0 returned 100%
        1:  109:	failure  += asserttrue (savedData.handCount[player2],G.handCount[player2]);
call    0 returned 100%
        1:  110:	printf("\n   Checking player 2's  deckCount\n");
call    0 returned 100%
        1:  111:	failure  += asserttrue (savedData.deckCount[player2],G.deckCount[player2]);
call    0 returned 100%
        -:  112:	
        1:  113:	printf("\nTEST 4. Check if kingdom and victory cards have any bugs\n");
call    0 returned 100%
        1:  114:	printf("\n   Checking kingdom cards' supply piles\n");
call    0 returned 100%
       11:  115:	for (i = 0; i < 10; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       10:  116:		failure  += asserttrue (savedData.supplyCount[k[i]], G.supplyCount[k[i]]);
call    0 returned 100%
        -:  117:	}
        1:  118:	printf("\n   Checking province card pile:\n");
call    0 returned 100%
        1:  119:	failure  += asserttrue (savedData.supplyCount[province], G.supplyCount[province]);
call    0 returned 100%
        1:  120:	printf("\n   Checking duchy card pile:\n");
call    0 returned 100%
        1:  121:	failure  += asserttrue (savedData.supplyCount[duchy], G.supplyCount[duchy]);
call    0 returned 100%
        1:  122:	printf("\n   Checking estate card pile:\n");
call    0 returned 100%
        1:  123:	failure  += asserttrue (savedData.supplyCount[estate], G.supplyCount[estate]);
call    0 returned 100%
        -:  124:	
        1:  125:    if (failure > 0) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  126:        printf("\nTEST FAILED\n");
call    0 returned 100%
        1:  127:        printf("Count of failed tests: %d\n",failure);
call    0 returned 100%
        -:  128:    }
        -:  129:    else {
    #####:  130:    	printf("\nPASSED ALL THE TESTS\n");
call    0 never executed
    #####:  131:        printf("\nTEST SUCCESSFULLY COMPLETED\n\n");
call    0 never executed
        -:  132:    }
        1:  133:    printf("**********************************************\n");
call    0 returned 100%
        1:  134:	return 0;
        -:  135:}
File 'dominion.c'
Lines executed:23.80% of 563
Branches executed:26.14% of 417
Taken at least once:17.27% of 417
Calls executed:14.74% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:2
        -:    1:/*
        -:    2:Team 4: (ONID: kohy) Kaylie's dominion.c code
        -:    3:https://github.com/kaylieko/CS362-004-S2018/tree/kohy-assignment-3/projects/kohy/dominion
        -:    4:*/
        -:    5:
        -:    6:#include "dominion.h"
        -:    7:#include "dominion_helpers.h"
        -:    8:#include "rngs.h"
        -:    9:#include <stdio.h>
        -:   10:#include <math.h>
        -:   11:#include <stdlib.h>
        -:   12:
function compare called 60 returned 100% blocks executed 83%
       60:   13:int compare(const void* a, const void* b) {
       60:   14:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   15:    return 1;
       60:   16:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       16:   17:    return -1;
       44:   18:  return 0;
        -:   19:}
        -:   20:
function newGame called 0 returned 0% blocks executed 0%
    #####:   21:struct gameState* newGame() {
    #####:   22:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   23:  return g;
        -:   24:}
        -:   25:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   26:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   27:		  int k8, int k9, int k10) {
    #####:   28:  int* k = malloc(10 * sizeof(int));
    #####:   29:  k[0] = k1;
    #####:   30:  k[1] = k2;
    #####:   31:  k[2] = k3;
    #####:   32:  k[3] = k4;
    #####:   33:  k[4] = k5;
    #####:   34:  k[5] = k6;
    #####:   35:  k[6] = k7;
    #####:   36:  k[7] = k8;
    #####:   37:  k[8] = k9;
    #####:   38:  k[9] = k10;
    #####:   39:  return k;
        -:   40:}
        -:   41:
function initializeGame called 2 returned 100% blocks executed 88%
        2:   42:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   43:		   struct gameState *state) {
        -:   44:
        -:   45:  int i;
        -:   46:  int j;
        -:   47:  int it;			
        -:   48:  //set up random number generator
        2:   49:  SelectStream(1);
call    0 returned 100%
        2:   50:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   51:  
        -:   52:  //check number of players
        2:   53:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   54:    {
    #####:   55:      return -1;
        -:   56:    }
        -:   57:
        -:   58:  //set number of players
        2:   59:  state->numPlayers = numPlayers;
        -:   60:
        -:   61:  //check selected kingdom cards are different
       22:   62:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   63:    {
      220:   64:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   65:        {
      200:   66:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   67:	    {
    #####:   68:	      return -1;
        -:   69:	    }
        -:   70:        }
        -:   71:    }
        -:   72:
        -:   73:
        -:   74:  //initialize supply
        -:   75:  ///////////////////////////////
        -:   76:
        -:   77:  //set number of Curse cards
        2:   78:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   79:    {
        2:   80:      state->supplyCount[curse] = 10;
        -:   81:    }
    #####:   82:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   83:    {
    #####:   84:      state->supplyCount[curse] = 20;
        -:   85:    }
        -:   86:  else
        -:   87:    {
    #####:   88:      state->supplyCount[curse] = 30;
        -:   89:    }
        -:   90:
        -:   91:  //set number of Victory cards
        2:   92:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   93:    {
        2:   94:      state->supplyCount[estate] = 8;
        2:   95:      state->supplyCount[duchy] = 8;
        2:   96:      state->supplyCount[province] = 8;
        -:   97:    }
        -:   98:  else
        -:   99:    {
    #####:  100:      state->supplyCount[estate] = 12;
    #####:  101:      state->supplyCount[duchy] = 12;
    #####:  102:      state->supplyCount[province] = 12;
        -:  103:    }
        -:  104:
        -:  105:  //set number of Treasure cards
        2:  106:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        2:  107:  state->supplyCount[silver] = 40;
        2:  108:  state->supplyCount[gold] = 30;
        -:  109:
        -:  110:  //set number of Kingdom cards
       42:  111:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  112:    {
      330:  113:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  114:	{
      310:  115:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  116:	    {
        -:  117:	      //check if card is a 'Victory' Kingdom card
       20:  118:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  119:		{
        8:  120:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4:  121:		    state->supplyCount[i] = 8; 
        -:  122:		  }
    #####:  123:		  else{ state->supplyCount[i] = 12; }
        -:  124:		}
        -:  125:	      else
        -:  126:		{
       16:  127:		  state->supplyCount[i] = 10;
        -:  128:		}
       20:  129:	      break;
        -:  130:	    }
        -:  131:	  else    //card is not in the set choosen for the game
        -:  132:	    {
      290:  133:	      state->supplyCount[i] = -1;
        -:  134:	    }
        -:  135:	}
        -:  136:
        -:  137:    }
        -:  138:
        -:  139:  ////////////////////////
        -:  140:  //supply intilization complete
        -:  141:
        -:  142:  //set player decks
        6:  143:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  144:    {
        4:  145:      state->deckCount[i] = 0;
       16:  146:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  147:	{
       12:  148:	  state->deck[i][j] = estate;
       12:  149:	  state->deckCount[i]++;
        -:  150:	}
       32:  151:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  152:	{
       28:  153:	  state->deck[i][j] = copper;
       28:  154:	  state->deckCount[i]++;		
        -:  155:	}
        -:  156:    }
        -:  157:
        -:  158:  //shuffle player decks
        6:  159:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  160:    {
        4:  161:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  162:	{
    #####:  163:	  return -1;
        -:  164:	}
        -:  165:    }
        -:  166:
        -:  167:  //draw player hands
        6:  168:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  169:    {  
        -:  170:      //initialize hand size to zero
        4:  171:      state->handCount[i] = 0;
        4:  172:      state->discardCount[i] = 0;
        -:  173:      //draw 5 cards
        -:  174:      // for (j = 0; j < 5; j++)
        -:  175:      //	{
        -:  176:      //	  drawCard(i, state);
        -:  177:      //	}
        -:  178:    }
        -:  179:  
        -:  180:  //set embargo tokens to 0 for all supply piles
       56:  181:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  182:    {
       54:  183:      state->embargoTokens[i] = 0;
        -:  184:    }
        -:  185:
        -:  186:  //initialize first player's turn
        2:  187:  state->outpostPlayed = 0;
        2:  188:  state->phase = 0;
        2:  189:  state->numActions = 1;
        2:  190:  state->numBuys = 1;
        2:  191:  state->playedCardCount = 0;
        2:  192:  state->whoseTurn = 0;
        2:  193:  state->handCount[state->whoseTurn] = 0;
        -:  194:  //int it; move to top
        -:  195:
        -:  196:  //Moved draw cards to here, only drawing at the start of a turn
       12:  197:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       10:  198:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  199:  }
        -:  200:
        2:  201:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  202:
        2:  203:  return 0;
        -:  204:}
        -:  205:
function shuffle called 5 returned 100% blocks executed 94%
        5:  206:int shuffle(int player, struct gameState *state) {
        -:  207: 
        -:  208:
        -:  209:  int newDeck[MAX_DECK];
        5:  210:  int newDeckPos = 0;
        -:  211:  int card;
        -:  212:  int i;
        -:  213:
        5:  214:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  215:    return -1;
        5:  216:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  217:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  218:
       51:  219:  while (state->deckCount[player] > 0) {
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
       41:  220:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
       41:  221:    newDeck[newDeckPos] = state->deck[player][card];
       41:  222:    newDeckPos++;
      141:  223:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
      100:  224:      state->deck[player][i] = state->deck[player][i+1];
        -:  225:    }
       41:  226:    state->deckCount[player]--;
        -:  227:  }
       46:  228:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
       41:  229:    state->deck[player][i] = newDeck[i];
       41:  230:    state->deckCount[player]++;
        -:  231:  }
        -:  232:
        5:  233:  return 0;
        -:  234:}
        -:  235:
function playCard called 0 returned 0% blocks executed 0%
    #####:  236:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  237:{	
        -:  238:  int card;
    #####:  239:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  240:
        -:  241:  //check if it is the right phase
    #####:  242:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  243:    {
    #####:  244:      return -1;
        -:  245:    }
        -:  246:	
        -:  247:  //check if player has enough actions
    #####:  248:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  249:    {
    #####:  250:      return -1;
        -:  251:    }
        -:  252:	
        -:  253:  //get card played
    #####:  254:  card = handCard(handPos, state);
call    0 never executed
        -:  255:	
        -:  256:  //check if selected card is an action
    #####:  257:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  258:    {
    #####:  259:      return -1;
        -:  260:    }
        -:  261:	
        -:  262:  //play card
    #####:  263:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  264:    {
    #####:  265:      return -1;
        -:  266:    }
        -:  267:	
        -:  268:  //reduce number of actions
    #####:  269:  state->numActions--;
        -:  270:
        -:  271:  //update coins (Treasure cards may be added with card draws)
    #####:  272:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  273:	
    #####:  274:  return 0;
        -:  275:}
        -:  276:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  277:int buyCard(int supplyPos, struct gameState *state) {
        -:  278:  int who;
        -:  279:  if (DEBUG){
        -:  280:    printf("Entering buyCard...\n");
        -:  281:  }
        -:  282:
        -:  283:  // I don't know what to do about the phase thing.
        -:  284:
    #####:  285:  who = state->whoseTurn;
        -:  286:
    #####:  287:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  288:    if (DEBUG)
        -:  289:      printf("You do not have any buys left\n");
    #####:  290:    return -1;
    #####:  291:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  292:    if (DEBUG)
        -:  293:      printf("There are not any of that type of card left\n");
    #####:  294:    return -1;
    #####:  295:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  296:    if (DEBUG) 
        -:  297:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  298:    return -1;
        -:  299:  } else {
    #####:  300:    state->phase=1;
        -:  301:    //state->supplyCount[supplyPos]--;
    #####:  302:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  303:  
    #####:  304:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  305:    state->numBuys--;
        -:  306:    if (DEBUG)
        -:  307:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  308:  }
        -:  309:
        -:  310:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  311:  //state->discardCount[who]++;
        -:  312:    
    #####:  313:  return 0;
        -:  314:}
        -:  315:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  316:int numHandCards(struct gameState *state) {
    #####:  317:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  318:}
        -:  319:
function handCard called 0 returned 0% blocks executed 0%
    #####:  320:int handCard(int handPos, struct gameState *state) {
    #####:  321:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  322:  return state->hand[currentPlayer][handPos];
        -:  323:}
        -:  324:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  325:int supplyCount(int card, struct gameState *state) {
    #####:  326:  return state->supplyCount[card];
        -:  327:}
        -:  328:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  329:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  330:  int i;
    #####:  331:  int count = 0;
        -:  332:
    #####:  333:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  344:    {
    #####:  345:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  346:    }
        -:  347:
    #####:  348:  return count;
        -:  349:}
        -:  350:
function whoseTurn called 2 returned 100% blocks executed 100%
        2:  351:int whoseTurn(struct gameState *state) {
        2:  352:  return state->whoseTurn;
        -:  353:}
        -:  354:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  355:int endTurn(struct gameState *state) {
        -:  356:  int k;
        -:  357:  int i;
    #####:  358:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  359:  
        -:  360:  //Discard hand
    #####:  361:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  362:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  363:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  364:  }
    #####:  365:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  366:    
        -:  367:  //Code for determining the player
    #####:  368:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  369:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  370:  }
        -:  371:  else{
    #####:  372:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  373:  }
        -:  374:
    #####:  375:  state->outpostPlayed = 0;
    #####:  376:  state->phase = 0;
    #####:  377:  state->numActions = 1;
    #####:  378:  state->coins = 0;
    #####:  379:  state->numBuys = 1;
    #####:  380:  state->playedCardCount = 0;
    #####:  381:  state->handCount[state->whoseTurn] = 0;
        -:  382:
        -:  383:  //int k; move to top
        -:  384:  //Next player draws hand
    #####:  385:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  386:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  387:  }
        -:  388:
        -:  389:  //Update money
    #####:  390:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  391:
    #####:  392:  return 0;
        -:  393:}
        -:  394:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  395:int isGameOver(struct gameState *state) {
        -:  396:  int i;
        -:  397:  int j;
        -:  398:	
        -:  399:  //if stack of Province cards is empty, the game ends
    #####:  400:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  401:    {
    #####:  402:      return 1;
        -:  403:    }
        -:  404:
        -:  405:  //if three supply pile are at 0, the game ends
    #####:  406:  j = 0;
    #####:  407:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  408:    {
    #####:  409:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  410:	{
    #####:  411:	  j++;
        -:  412:	}
        -:  413:    }
    #####:  414:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  415:    {
    #####:  416:      return 1;
        -:  417:    }
        -:  418:
    #####:  419:  return 0;
        -:  420:}
        -:  421:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  422:int scoreFor (int player, struct gameState *state) {
        -:  423:
        -:  424:  int i;
    #####:  425:  int score = 0;
        -:  426:  //score from hand
    #####:  427:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  428:    {
    #####:  429:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  430:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  431:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  432:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  433:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  434:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  435:    }
        -:  436:
        -:  437:  //score from discard
    #####:  438:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  439:    {
    #####:  440:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  441:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  442:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  443:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  444:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  445:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  446:    }
        -:  447:
        -:  448:  //score from deck
    #####:  449:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  450:    {
    #####:  451:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  452:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  453:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  454:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  455:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  456:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  457:    }
        -:  458:
    #####:  459:  return score;
        -:  460:}
        -:  461:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  462:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  463:  int i;	
        -:  464:  int j;
        -:  465:  int highScore;
        -:  466:  int currentPlayer;
        -:  467:
        -:  468:  //get score for each player
    #####:  469:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  470:    {
        -:  471:      //set unused player scores to -9999
    #####:  472:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  473:	{
    #####:  474:	  players[i] = -9999;
        -:  475:	}
        -:  476:      else
        -:  477:	{
    #####:  478:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  479:	}
        -:  480:    }
        -:  481:
        -:  482:  //find highest score
    #####:  483:  j = 0;
    #####:  484:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  485:    {
    #####:  486:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  487:	{
    #####:  488:	  j = i;
        -:  489:	}
        -:  490:    }
    #####:  491:  highScore = players[j];
        -:  492:
        -:  493:  //add 1 to players who had less turns
    #####:  494:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  495:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  496:    {
    #####:  497:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  498:	{
    #####:  499:	  players[i]++;
        -:  500:	}
        -:  501:    }
        -:  502:
        -:  503:  //find new highest score
    #####:  504:  j = 0;
    #####:  505:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  506:    {
    #####:  507:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  508:	{
    #####:  509:	  j = i;
        -:  510:	}
        -:  511:    }
    #####:  512:  highScore = players[j];
        -:  513:
        -:  514:  //set winners in array to 1 and rest to 0
    #####:  515:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  516:    {
    #####:  517:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  518:	{
    #####:  519:	  players[i] = 1;
        -:  520:	}
        -:  521:      else
        -:  522:	{
    #####:  523:	  players[i] = 0;
        -:  524:	}
        -:  525:    }
        -:  526:
    #####:  527:  return 0;
        -:  528:}
        -:  529:
function drawCard called 19 returned 100% blocks executed 38%
       19:  530:int drawCard(int player, struct gameState *state)
        -:  531:{	int count;
        -:  532:  int deckCounter;
       19:  533:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  534:    
        -:  535:    //Step 1 Shuffle the discard pile back into a deck
        -:  536:    int i;
        -:  537:    //Move discard to deck
    #####:  538:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  539:      state->deck[player][i] = state->discard[player][i];
    #####:  540:      state->discard[player][i] = -1;
        -:  541:    }
        -:  542:
    #####:  543:    state->deckCount[player] = state->discardCount[player];
    #####:  544:    state->discardCount[player] = 0;//Reset discard
        -:  545:
        -:  546:    //Shufffle the deck
    #####:  547:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  548:   
        -:  549:    if (DEBUG){//Debug statements
        -:  550:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  551:    }
        -:  552:    
    #####:  553:    state->discardCount[player] = 0;
        -:  554:
        -:  555:    //Step 2 Draw Card
    #####:  556:    count = state->handCount[player];//Get current player's hand count
        -:  557:    
        -:  558:    if (DEBUG){//Debug statements
        -:  559:      printf("Current hand count: %d\n", count);
        -:  560:    }
        -:  561:    
    #####:  562:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  563:
    #####:  564:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  565:      return -1;
        -:  566:
    #####:  567:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  568:    state->deckCount[player]--;
    #####:  569:    state->handCount[player]++;//Increment hand count
        -:  570:  }
        -:  571:
        -:  572:  else{
       19:  573:    int count = state->handCount[player];//Get current hand count for player
        -:  574:    int deckCounter;
        -:  575:    if (DEBUG){//Debug statements
        -:  576:      printf("Current hand count: %d\n", count);
        -:  577:    }
        -:  578:
       19:  579:    deckCounter = state->deckCount[player];//Create holder for the deck count
       19:  580:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       19:  581:    state->deckCount[player]--;
       19:  582:    state->handCount[player]++;//Increment hand count
        -:  583:  }
        -:  584:
       19:  585:  return 0;
        -:  586:}
        -:  587:
function getCost called 0 returned 0% blocks executed 0%
    #####:  588:int getCost(int cardNumber)
        -:  589:{
    #####:  590:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  591:    {
        -:  592:    case curse:
    #####:  593:      return 0;
        -:  594:    case estate:
    #####:  595:      return 2;
        -:  596:    case duchy:
    #####:  597:      return 5;
        -:  598:    case province:
    #####:  599:      return 8;
        -:  600:    case copper:
    #####:  601:      return 0;
        -:  602:    case silver:
    #####:  603:      return 3;
        -:  604:    case gold:
    #####:  605:      return 6;
        -:  606:    case adventurer:
    #####:  607:      return 6;
        -:  608:    case council_room:
    #####:  609:      return 5;
        -:  610:    case feast:
    #####:  611:      return 4;
        -:  612:    case gardens:
    #####:  613:      return 4;
        -:  614:    case mine:
    #####:  615:      return 5;
        -:  616:    case remodel:
    #####:  617:      return 4;
        -:  618:    case smithy:
    #####:  619:      return 4;
        -:  620:    case village:
    #####:  621:      return 3;
        -:  622:    case baron:
    #####:  623:      return 4;
        -:  624:    case great_hall:
    #####:  625:      return 3;
        -:  626:    case minion:
    #####:  627:      return 5;
        -:  628:    case steward:
    #####:  629:      return 3;
        -:  630:    case tribute:
    #####:  631:      return 5;
        -:  632:    case ambassador:
    #####:  633:      return 3;
        -:  634:    case cutpurse:
    #####:  635:      return 4;
        -:  636:    case embargo: 
    #####:  637:      return 2;
        -:  638:    case outpost:
    #####:  639:      return 5;
        -:  640:    case salvager:
    #####:  641:      return 4;
        -:  642:    case sea_hag:
    #####:  643:      return 4;
        -:  644:    case treasure_map:
    #####:  645:      return 4;
        -:  646:    }
        -:  647:	
    #####:  648:  return -1;
        -:  649:}
        -:  650:
        -:  651://Assignment #2, Refactor 'Adventurer'
function adventurerEffect called 1 returned 100% blocks executed 100%
        1:  652:int adventurerEffect(int currentPlayer, struct gameState *state){
        -:  653:  int cardDrawn;
        1:  654:  int drawntreasure = 0;
        1:  655:  int z = 0;
        -:  656:  int temphand[MAX_HAND];
        7:  657:  while(drawntreasure < 2) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  658:    //if the deck is empty we need to shuffle discard and add to deck
        -:  659:    //*Introduce a Bug: Instead of shuffling discard empty deck, this will result shuffle the deck with 1 or 0 card
        5:  660:    if (state->deckCount[currentPlayer] < 2) {
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        1:  661:      shuffle(currentPlayer, state);
call    0 returned 100%
        -:  662:    }
        5:  663:    drawCard(currentPlayer, state);
call    0 returned 100%
        5:  664:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
        5:  665:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        2:  666:      drawntreasure++;
        -:  667:    else{
        3:  668:      temphand[z] = cardDrawn;
        3:  669:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        3:  670:      z++;
        -:  671:    }
        -:  672:  }
        5:  673:  while(z - 1 >= 0) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3:  674:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
        3:  675:    z = z - 1;
        -:  676:  }
        1:  677:  return 0;
        -:  678:}
        -:  679:
        -:  680:
        -:  681://Assignment #2, Refactor 'Smithy'
function smithyEffect called 1 returned 100% blocks executed 100%
        1:  682:int smithyEffect(int currentPlayer, struct gameState *state, int handPos)
        -:  683:{
        -:  684:  int i;
        -:  685:  //+3 cards
        -:  686:  //*Introduce a Bug: Draw +4 cards instead of +3
        5:  687:  for (i = 0; i < 4; i++) {
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        4:  688:    drawCard(currentPlayer, state);
call    0 returned 100%
        -:  689:  }  
        -:  690:  //discard card from hand
        1:  691:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  692:  return 0;
        -:  693:}
        -:  694:
        -:  695:
        -:  696://Assignment #2, Refactor 'Counsil_Room'
function counsil_RoomEffect called 0 returned 0% blocks executed 0%
    #####:  697:int counsil_RoomEffect(int currentPlayer, struct gameState *state, int handPos)
        -:  698:{
        -:  699:  int i;
        -:  700:
        -:  701:  //+4 Cards
    #####:  702:  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  703:  {
    #####:  704:    drawCard(currentPlayer, state);
call    0 never executed
        -:  705:  }   
        -:  706:
        -:  707:  //Buy +1
    #####:  708:  state->numBuys++;
        -:  709:
        -:  710:  //Each other player draws a card
    #####:  711:  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  712:  {
    #####:  713:    if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  714:    {
    #####:  715:      drawCard(i, state);
call    0 never executed
        -:  716:    }
        -:  717:  }     
        -:  718:  //put played card in played card pile
        -:  719:  //*Introduce a Bug: Trash a card from hand instead of discard
    #####:  720:  discardCard(handPos, currentPlayer, state, 1);      
call    0 never executed
    #####:  721:  return 0;
        -:  722:}
        -:  723:
        -:  724:
        -:  725://Assignment #2, Refactor 'Village'
function villageEffect called 0 returned 0% blocks executed 0%
    #####:  726:int villageEffect(int currentPlayer, struct gameState *state, int handPos)
        -:  727:{
        -:  728:  //+1 Card
    #####:  729:  drawCard(currentPlayer, state); 
call    0 never executed
        -:  730:
        -:  731:  //+2 Actions
    #####:  732:  state->numActions = state->numActions + 2; 
        -:  733:
        -:  734:  //discard played card from hand
        -:  735:  
    #####:  736:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  737:  return 0;
        -:  738:}
        -:  739:
        -:  740:
        -:  741://Assignment #2, Refactor 'Great_Hall'
function great_HallEffect called 0 returned 0% blocks executed 0%
    #####:  742:int great_HallEffect(int currentPlayer, struct gameState *state, int handPos){
        -:  743:  //+1 Card
    #####:  744:  drawCard(currentPlayer, state); 
call    0 never executed
        -:  745:
        -:  746:  //+1 Actions
        -:  747:  //*Introduce a Bug: gain +2 actions instead of +1
    #####:  748:  state->numActions = state->numActions + 2;     
        -:  749:
        -:  750:  //discard card from hand
    #####:  751:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  752:  return 0;
        -:  753:}
        -:  754:
        -:  755:
function cardEffect called 2 returned 100% blocks executed 4%
        2:  756:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  757:{
        -:  758:  int i;
        -:  759:  int j;
        -:  760:  int k;
        -:  761:  int x;
        -:  762:  int index;
        2:  763:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        2:  764:  int nextPlayer = currentPlayer + 1;
        -:  765:
        2:  766:  int tributeRevealedCards[2] = {-1, -1};
        -:  767:  int temphand[MAX_HAND];// moved above the if statement
        -:  768:  //int drawntreasure=0; //moved into adventurerEffect function
        -:  769:  //int cardDrawn;       //moved into adventurerEffect function
        -:  770:  //int z = 0;           //moved into adventurerEffect function
        2:  771:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  772:    nextPlayer = 0;
        -:  773:  }
        -:  774:  
        -:  775:	
        -:  776:  //uses switch to select card and perform actions
        2:  777:  switch( card ) 
branch  0 taken 50%
branch  1 taken 50%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  778:  {
        -:  779:    case adventurer:
        -:  780:      //call the adventurer card effect function
        1:  781:      adventurerEffect(currentPlayer, state);
call    0 returned 100%
        1:  782:      return 0;
        -:  783:		
        -:  784:    case smithy:
        -:  785:      //call the smithy card effect function
        1:  786:      smithyEffect(currentPlayer, state, handPos);
call    0 returned 100%
        1:  787:      return 0;
        -:  788:
        -:  789:    case council_room:
        -:  790:      //call the counsil_room card effect function
    #####:  791:      counsil_RoomEffect(currentPlayer, state, handPos);
call    0 never executed
    #####:  792:      return 0;
        -:  793:      
        -:  794:    case village:
        -:  795:      //call the village card effect function
    #####:  796:      villageEffect (currentPlayer, state, handPos);
call    0 never executed
    #####:  797:      return 0;  
        -:  798:			
        -:  799:    case great_hall:
        -:  800:      //call the great_hall card effect function
    #####:  801:      great_HallEffect (currentPlayer, state, handPos);
call    0 never executed
    #####:  802:      return 0;
        -:  803:
        -:  804:    case feast:
        -:  805:      //gain card with cost up to 5
        -:  806:      //Backup hand
    #####:  807:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  808:      	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  809:      	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  810:      }
        -:  811:      //Backup hand
        -:  812:
        -:  813:      //Update Coins for Buy
    #####:  814:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  815:      x = 1;//Condition to loop on
    #####:  816:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  817:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  818:	  if (DEBUG)
        -:  819:	    printf("None of that card left, sorry!\n");
        -:  820:
        -:  821:	  if (DEBUG){
        -:  822:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  823:	  }
        -:  824:	}
    #####:  825:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  826:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  827:
        -:  828:	  if (DEBUG){
        -:  829:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  830:	  }
        -:  831:	}
        -:  832:	else{
        -:  833:
        -:  834:	  if (DEBUG){
        -:  835:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  836:	  }
        -:  837:
    #####:  838:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  839:	  x = 0;//No more buying cards
        -:  840:
        -:  841:	  if (DEBUG){
        -:  842:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  843:	  }
        -:  844:
        -:  845:	}
        -:  846:      }     
        -:  847:
        -:  848:      //Reset Hand
    #####:  849:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  850:	state->hand[currentPlayer][i] = temphand[i];
    #####:  851:	temphand[i] = -1;
        -:  852:      }
        -:  853:      //Reset Hand
        -:  854:      			
    #####:  855:      return 0;
        -:  856:			
        -:  857:    case gardens:
    #####:  858:      return -1;
        -:  859:			
        -:  860:    case mine:
    #####:  861:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  862:
    #####:  863:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  864:	{
    #####:  865:	  return -1;
        -:  866:	}
        -:  867:		
    #####:  868:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  869:	{
    #####:  870:	  return -1;
        -:  871:	}
        -:  872:
    #####:  873:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  874:	{
    #####:  875:	  return -1;
        -:  876:	}
        -:  877:
    #####:  878:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  879:
        -:  880:      //discard card from hand
    #####:  881:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  882:
        -:  883:      //discard trashed card
    #####:  884:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  885:	{
    #####:  886:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  887:	    {
    #####:  888:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  889:	      break;
        -:  890:	    }
        -:  891:	}
        -:  892:			
    #####:  893:      return 0;
        -:  894:			
        -:  895:    case remodel:
    #####:  896:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  897:
    #####:  898:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  899:	{
    #####:  900:	  return -1;
        -:  901:	}
        -:  902:
    #####:  903:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  904:
        -:  905:      //discard card from hand
    #####:  906:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  907:
        -:  908:      //discard trashed card
    #####:  909:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  910:	{
    #####:  911:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  912:	    {
    #####:  913:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  914:	      break;
        -:  915:	    }
        -:  916:	}
        -:  917:
        -:  918:
    #####:  919:      return 0;
        -:  920:		
        -:  921:    
        -:  922:		
        -:  923:    
        -:  924:		
        -:  925:    case baron:
    #####:  926:      state->numBuys++;//Increase buys by 1!
    #####:  927:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  928:	int p = 0;//Iterator for hand!
    #####:  929:	int card_not_discarded = 1;//Flag for discard set!
    #####:  930:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  931:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  932:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  933:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  934:	    state->discardCount[currentPlayer]++;
    #####:  935:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  936:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  937:	    }
    #####:  938:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  939:	    state->handCount[currentPlayer]--;
    #####:  940:	    card_not_discarded = 0;//Exit the loop
        -:  941:	  }
    #####:  942:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  943:	    if(DEBUG) {
        -:  944:	      printf("No estate cards in your hand, invalid choice\n");
        -:  945:	      printf("Must gain an estate if there are any\n");
        -:  946:	    }
    #####:  947:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  948:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  949:	      state->supplyCount[estate]--;//Decrement estates
    #####:  950:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  951:		isGameOver(state);
call    0 never executed
        -:  952:	      }
        -:  953:	    }
    #####:  954:	    card_not_discarded = 0;//Exit the loop
        -:  955:	  }
        -:  956:			    
        -:  957:	  else{
    #####:  958:	    p++;//Next card
        -:  959:	  }
        -:  960:	}
        -:  961:      }
        -:  962:			    
        -:  963:      else{
    #####:  964:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  965:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  966:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  967:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  968:	    isGameOver(state);
call    0 never executed
        -:  969:	  }
        -:  970:	}
        -:  971:      }
        -:  972:	    
        -:  973:      
    #####:  974:      return 0;
        -:  975:		
        -:  976:    
        -:  977:		
        -:  978:    case minion:
        -:  979:      //+1 action
    #####:  980:      state->numActions++;
        -:  981:			
        -:  982:      //discard card from hand
    #####:  983:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  984:			
    #####:  985:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  986:	{
    #####:  987:	  state->coins = state->coins + 2;
        -:  988:	}
        -:  989:			
    #####:  990:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  991:	{
        -:  992:	  //discard hand
    #####:  993:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  994:	    {
    #####:  995:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  996:	    }
        -:  997:				
        -:  998:	  //draw 4
    #####:  999:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1000:	    {
    #####: 1001:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1002:	    }
        -: 1003:				
        -: 1004:	  //other players discard hand and redraw if hand size > 4
    #####: 1005:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1006:	    {
    #####: 1007:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1008:		{
    #####: 1009:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1010:		    {
        -: 1011:		      //discard hand
    #####: 1012:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1013:			{
    #####: 1014:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1015:			}
        -: 1016:							
        -: 1017:		      //draw 4
    #####: 1018:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1019:			{
    #####: 1020:			  drawCard(i, state);
call    0 never executed
        -: 1021:			}
        -: 1022:		    }
        -: 1023:		}
        -: 1024:	    }
        -: 1025:				
        -: 1026:	}
    #####: 1027:      return 0;
        -: 1028:		
        -: 1029:    case steward:
    #####: 1030:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1031:	{
        -: 1032:	  //+2 cards
    #####: 1033:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1034:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1035:	}
    #####: 1036:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1037:	{
        -: 1038:	  //+2 coins
    #####: 1039:	  state->coins = state->coins + 2;
        -: 1040:	}
        -: 1041:      else
        -: 1042:	{
        -: 1043:	  //trash 2 cards in hand
    #####: 1044:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1045:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1046:	}
        -: 1047:			
        -: 1048:      //discard card from hand
    #####: 1049:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1050:      return 0;
        -: 1051:		
        -: 1052:    case tribute:
    #####: 1053:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1054:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1055:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1056:	  state->deckCount[nextPlayer]--;
        -: 1057:	}
    #####: 1058:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1059:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1060:	  state->discardCount[nextPlayer]--;
        -: 1061:	}
        -: 1062:	else{
        -: 1063:	  //No Card to Reveal
        -: 1064:	  if (DEBUG){
        -: 1065:	    printf("No cards to reveal\n");
        -: 1066:	  }
        -: 1067:	}
        -: 1068:      }
        -: 1069:	    
        -: 1070:      else{
    #####: 1071:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1072:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1073:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1074:	    state->deckCount[nextPlayer]++;
    #####: 1075:	    state->discard[nextPlayer][i] = -1;
    #####: 1076:	    state->discardCount[nextPlayer]--;
        -: 1077:	  }
        -: 1078:			    
    #####: 1079:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1080:	} 
    #####: 1081:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1082:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1083:	state->deckCount[nextPlayer]--;
    #####: 1084:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1085:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1086:	state->deckCount[nextPlayer]--;
        -: 1087:      }    
        -: 1088:		       
    #####: 1089:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1090:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1091:	state->playedCardCount++;
    #####: 1092:	tributeRevealedCards[1] = -1;
        -: 1093:      }
        -: 1094:
    #####: 1095:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1096:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1097:	  state->coins += 2;
        -: 1098:	}
        -: 1099:		    
    #####: 1100:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1101:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1102:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1103:	}
        -: 1104:	else{//Action Card
    #####: 1105:	  state->numActions = state->numActions + 2;
        -: 1106:	}
        -: 1107:      }
        -: 1108:	    
    #####: 1109:      return 0;
        -: 1110:		
        -: 1111:    case ambassador:
    #####: 1112:      j = 0;		//used to check if player has enough cards to discard
        -: 1113:
    #####: 1114:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1115:	{
    #####: 1116:	  return -1;				
        -: 1117:	}
        -: 1118:
    #####: 1119:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1120:	{
    #####: 1121:	  return -1;
        -: 1122:	}
        -: 1123:
    #####: 1124:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1125:	{
    #####: 1126:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1127:	    {
    #####: 1128:	      j++;
        -: 1129:	    }
        -: 1130:	}
    #####: 1131:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1132:	{
    #####: 1133:	  return -1;				
        -: 1134:	}
        -: 1135:
        -: 1136:      if (DEBUG) 
        -: 1137:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1138:
        -: 1139:      //increase supply count for choosen card by amount being discarded
    #####: 1140:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1141:			
        -: 1142:      //each other player gains a copy of revealed card
    #####: 1143:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1144:	{
    #####: 1145:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1146:	    {
    #####: 1147:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1148:	    }
        -: 1149:	}
        -: 1150:
        -: 1151:      //discard played card from hand
    #####: 1152:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1153:
        -: 1154:      //trash copies of cards returned to supply
    #####: 1155:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1156:	{
    #####: 1157:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1158:	    {
    #####: 1159:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1160:		{
    #####: 1161:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1162:		  break;
        -: 1163:		}
        -: 1164:	    }
        -: 1165:	}			
        -: 1166:
    #####: 1167:      return 0;
        -: 1168:		
        -: 1169:    case cutpurse:
        -: 1170:
    #####: 1171:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1172:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1173:	{
    #####: 1174:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1175:	    {
    #####: 1176:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1177:		{
    #####: 1178:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1179:		    {
    #####: 1180:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1181:		      break;
        -: 1182:		    }
    #####: 1183:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1184:		    {
    #####: 1185:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1186:			{
        -: 1187:			  if (DEBUG)
        -: 1188:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1189:			}	
    #####: 1190:		      break;
        -: 1191:		    }		
        -: 1192:		}
        -: 1193:					
        -: 1194:	    }
        -: 1195:				
        -: 1196:	}				
        -: 1197:
        -: 1198:      //discard played card from hand
    #####: 1199:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1200:
    #####: 1201:      return 0;
        -: 1202:
        -: 1203:		
        -: 1204:    case embargo: 
        -: 1205:      //+2 Coins
    #####: 1206:      state->coins = state->coins + 2;
        -: 1207:			
        -: 1208:      //see if selected pile is in play
    #####: 1209:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1210:	{
    #####: 1211:	  return -1;
        -: 1212:	}
        -: 1213:			
        -: 1214:      //add embargo token to selected supply pile
    #####: 1215:      state->embargoTokens[choice1]++;
        -: 1216:			
        -: 1217:      //trash card
    #####: 1218:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1219:      return 0;
        -: 1220:		
        -: 1221:    case outpost:
        -: 1222:      //set outpost flag
    #####: 1223:      state->outpostPlayed++;
        -: 1224:			
        -: 1225:      //discard card
    #####: 1226:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1227:      return 0;
        -: 1228:		
        -: 1229:    case salvager:
        -: 1230:      //+1 buy
    #####: 1231:      state->numBuys++;
        -: 1232:			
    #####: 1233:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1234:	{
        -: 1235:	  //gain coins equal to trashed card
    #####: 1236:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1237:	  //trash card
    #####: 1238:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1239:	}
        -: 1240:			
        -: 1241:      //discard card
    #####: 1242:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1243:      return 0;
        -: 1244:		
        -: 1245:    case sea_hag:
    #####: 1246:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1247:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1248:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1249:	  state->discardCount[i]++;
    #####: 1250:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1251:	}
        -: 1252:      }
    #####: 1253:      return 0;
        -: 1254:		
        -: 1255:    case treasure_map:
        -: 1256:      //search hand for another treasure_map
    #####: 1257:      index = -1;
    #####: 1258:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1259:	{
    #####: 1260:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1261:	    {
    #####: 1262:	      index = i;
    #####: 1263:	      break;
        -: 1264:	    }
        -: 1265:	}
    #####: 1266:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1267:	{
        -: 1268:	  //trash both treasure cards
    #####: 1269:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1270:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1271:
        -: 1272:	  //gain 4 Gold cards
    #####: 1273:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1274:	    {
    #####: 1275:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1276:	    }
        -: 1277:				
        -: 1278:	  //return success
    #####: 1279:	  return 1;
        -: 1280:	}
        -: 1281:			
        -: 1282:      //no second treasure_map found in hand
    #####: 1283:      return -1;
        -: 1284:    }
        -: 1285:	
    #####: 1286:  return -1;
        -: 1287:}
        -: 1288:
function discardCard called 1 returned 100% blocks executed 78%
        1: 1289:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1290:{
        -: 1291:	
        -: 1292:  //if card is not trashed, added to Played pile 
        1: 1293:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1294:    {
        -: 1295:      //add card to played pile
        1: 1296:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        1: 1297:      state->playedCardCount++;
        -: 1298:    }
        -: 1299:	
        -: 1300:  //set played card to -1
        1: 1301:  state->hand[currentPlayer][handPos] = -1;
        -: 1302:	
        -: 1303:  //remove card from player's hand
        1: 1304:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1305:    {
        -: 1306:      //reduce number of cards in hand
    #####: 1307:      state->handCount[currentPlayer]--;
        -: 1308:    }
        1: 1309:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1310:    {
        -: 1311:      //reduce number of cards in hand
    #####: 1312:      state->handCount[currentPlayer]--;
        -: 1313:    }
        -: 1314:  else 	
        -: 1315:    {
        -: 1316:      //replace discarded card with last card in hand
        1: 1317:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1318:      //set last card to -1
        1: 1319:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1320:      //reduce number of cards in hand
        1: 1321:      state->handCount[currentPlayer]--;
        -: 1322:    }
        -: 1323:	
        1: 1324:  return 0;
        -: 1325:}
        -: 1326:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1327:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1328:{
        -: 1329:  //Note: supplyPos is enum of choosen card
        -: 1330:	
        -: 1331:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1332:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1333:    {
    #####: 1334:      return -1;
        -: 1335:    }
        -: 1336:	
        -: 1337:  //added card for [whoseTurn] current player:
        -: 1338:  // toFlag = 0 : add to discard
        -: 1339:  // toFlag = 1 : add to deck
        -: 1340:  // toFlag = 2 : add to hand
        -: 1341:
    #####: 1342:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1343:    {
    #####: 1344:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1345:      state->deckCount[player]++;
        -: 1346:    }
    #####: 1347:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1348:    {
    #####: 1349:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1350:      state->handCount[player]++;
        -: 1351:    }
        -: 1352:  else
        -: 1353:    {
    #####: 1354:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1355:      state->discardCount[player]++;
        -: 1356:    }
        -: 1357:	
        -: 1358:  //decrease number in supply pile
    #####: 1359:  state->supplyCount[supplyPos]--;
        -: 1360:	 
    #####: 1361:  return 0;
        -: 1362:}
        -: 1363:
function updateCoins called 2 returned 100% blocks executed 82%
        2: 1364:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1365:{
        -: 1366:  int i;
        -: 1367:	
        -: 1368:  //reset coin count
        2: 1369:  state->coins = 0;
        -: 1370:
        -: 1371:  //add coins for each Treasure card in player's hand
       12: 1372:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1373:    {
       10: 1374:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1375:	{
        8: 1376:	  state->coins += 1;
        -: 1377:	}
        2: 1378:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1379:	{
    #####: 1380:	  state->coins += 2;
        -: 1381:	}
        2: 1382:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1383:	{
    #####: 1384:	  state->coins += 3;
        -: 1385:	}	
        -: 1386:    }	
        -: 1387:
        -: 1388:  //add bonus
        2: 1389:  state->coins += bonus;
        -: 1390:
        2: 1391:  return 0;
        -: 1392:}
        -: 1393:
        -: 1394:
        -: 1395:
        -: 1396://end of dominion.c
cardtest3.c:
**********************************************
Testing -> Council Room Card

< P1 Data BEFORE Council Room Card is Played >
Player 1 has 5 cards in hand.
Player 1 has 5 cards in deck.
Player 1 has 0 cards in discard pile.

< P1 Data AFTER Council Room Card is Played >
Player 1 has 8 cards in hand.
Player 1 has 1 cards in deck.
Player 1 has 0 cards in discard pile.

***************** RESULTS *********************

TEST 1. Check player 1 get 4 extra cards from player's card pile 

   Checking player 1's handCount

	Expected value: 8, actual value: 8

	PASS (assertion true)

   Checking player 1's deckCount

	Expected value: 1, actual value: 1

	PASS (assertion true)

TEST 2. Check to see discardCard() function within Council Room Card's code worked

   Checking... 

   Prev # of discard count = 0

   Current # of discard count = 0

	Expected value: 1, actual value: 0

	FAIL (assertion false)

TEST 3. Check if player1's numBuys increased from 1

   Checking... 

   Prev # of discard count = 1

   Current # of discard count = 2

	Expected value: 2, actual value: 2

	PASS (assertion true)

TEST 4. Check if player 2's gets to draw one card for free

   Checking player 2's handCount

	Expected value: 1, actual value: 1

	PASS (assertion true)

   Checking player 2's deckCount

	Expected value: 9, actual value: 9

	PASS (assertion true)

TEST 5. Check if kingdom and victory cards have any bugs

   Checking kingdom cards' supply piles

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 8, actual value: 8

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 8, actual value: 8

	PASS (assertion true)

   Checking province card pile:

	Expected value: 8, actual value: 8

	PASS (assertion true)

   Checking duchy card pile:

	Expected value: 8, actual value: 8

	PASS (assertion true)

   Checking estate card pile:

	Expected value: 8, actual value: 8

	PASS (assertion true)

TEST FAILED
Count of failed tests: 1
**********************************************
File 'cardtest3.c'
Lines executed:97.22% of 72
Branches executed:100.00% of 6
Taken at least once:83.33% of 6
Calls executed:96.08% of 51
Creating 'cardtest3.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:* Author: Ju An
        -:    3:* Date: April 29, 2018
        -:    4:* OSU CS 362 - Assignment 3: Card Test 3
        -:    5:* This is a unit test for Council Room card in dominion.c
        -:    6:*/
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include "rngs.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:
        -:   14:// for more detailed results, use NOISY_TEST 1
        -:   15:#define NOISY_TEST 1
        -:   16:
        -:   17:// asserttrue function instead of the standard C assert
        -:   18:// if assert is not true return 1
function asserttrue called 19 returned 100% blocks executed 100%
       19:   19:int asserttrue (int expectedVal, int testedVal) 
        -:   20:{
       19:   21:	if (testedVal == expectedVal) {
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
        -:   22:		#if (NOISY_TEST == 1)
       18:   23:			printf("\n	Expected value: %d, actual value: %d\n", expectedVal, testedVal);
call    0 returned 100%
       18:   24:			printf("\n	PASS (assertion true)\n");
call    0 returned 100%
        -:   25:		#endif
       18:   26:		return 0;
        -:   27:	} else {
        -:   28:		#if (NOISY_TEST == 1)
        1:   29:			printf("\n	Expected value: %d, actual value: %d\n", expectedVal, testedVal);	
call    0 returned 100%
        1:   30:			printf("\n	FAIL (assertion false)\n");
call    0 returned 100%
        -:   31:		#endif
        1:   32:		return 1;
        -:   33:	}
        -:   34:}
        -:   35:
        -:   36:// testing the cardEffect() function (refactored) from dominion.c
        -:   37:// test should work whether a card is implemented inside cardEffect or in its own function
function main called 1 returned 100% blocks executed 96%
        1:   38:int main()
        -:   39:{
        -:   40:    // counts failed tests
        1:   41:	int failure = 0;
        -:   42:    
        -:   43:    // test variable initialization
        -:   44:	int i;
        1:   45:	int handpos = 0;
        1:   46:	int choice1 = 0;
        1:   47:	int choice2 = 0;
        1:   48:	int choice3 = 0;
        1:   49:	int bonus = 0;
        -:   50:	
        1:   51:	int numPlayer = 2;
        1:   52:	int player1 = 0;
        1:   53:	int player2 = 1;
        -:   54:
        1:   55:	int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   56:               remodel, smithy, village, baron, great_hall};
        -:   57:	struct gameState G, savedData;
        -:   58:	
        1:   59:	int seed = 5656;
        -:   60:	
        1:   61:	printf("**********************************************\n");
call    0 returned 100%
        1:   62:    printf("Testing -> Council Room Card\n");
call    0 returned 100%
        1:   63:    memset(&G, 23, sizeof(struct gameState));   		 // clear the game state
        1:   64:    initializeGame(numPlayer, k, seed, &G);   // initialize a new game
call    0 returned 100%
        1:   65:    memcpy(&savedData, &G, sizeof(struct gameState));
        -:   66:	
        1:   67:	printf("\n< P1 Data BEFORE Council Room Card is Played >\n");
call    0 returned 100%
        -:   68:	// 1. check player 1's # of card in hand
        1:   69:	printf("Player 1 has %d cards in hand.\n", savedData.handCount[player1]);
call    0 returned 100%
        -:   70:	
        -:   71:	// 2. check player 1's # of card in deck
        1:   72:	printf("Player 1 has %d cards in deck.\n", savedData.deckCount[player1]);
call    0 returned 100%
        -:   73:	
        -:   74:	// 3. check player 1's # of card in discard pile
        1:   75:	printf("Player 1 has %d cards in discard pile.\n", savedData.discardCount[player1]);
call    0 returned 100%
        -:   76:	
        -:   77:	// 4. Play Smithy Card
        1:   78:	cardEffect(council_room, choice1, choice2, choice3, &G, handpos, &bonus);
call    0 returned 100%
        -:   79:	
        1:   80:	printf("\n< P1 Data AFTER Council Room Card is Played >\n");
call    0 returned 100%
        -:   81:	// 5. check player 1's # of card in hand
        1:   82:	printf("Player 1 has %d cards in hand.\n", G.handCount[player1]);
call    0 returned 100%
        -:   83:	
        -:   84:	// 6. check player 1's # of card in deck
        1:   85:	printf("Player 1 has %d cards in deck.\n", G.deckCount[player1]);
call    0 returned 100%
        -:   86:	
        -:   87:	// 7. check player 1's # of card in discard pile
        1:   88:	printf("Player 1 has %d cards in discard pile.\n", G.discardCount[player1]);
call    0 returned 100%
        -:   89:	
        -:   90:	
        -:   91:
        1:   92:	printf("\n***************** RESULTS *********************\n");
call    0 returned 100%
        1:   93:	printf("\nTEST 1. Check player 1 get 4 extra cards from player's card pile \n");
call    0 returned 100%
        1:   94:	printf("\n   Checking player 1's handCount\n");
call    0 returned 100%
        1:   95:	failure  += asserttrue (savedData.handCount[player1]+3, G.handCount[player1]);
call    0 returned 100%
        1:   96:	printf("\n   Checking player 1's deckCount\n");
call    0 returned 100%
        1:   97:	failure  += asserttrue (savedData.deckCount[player1]-4,G.deckCount[player1]);
call    0 returned 100%
        -:   98:	
        1:   99:	printf("\nTEST 2. Check to see discardCard() function within Council Room Card's code worked\n");
call    0 returned 100%
        -:  100:	// NOTE: used card sent to discardCard() to be added on to a played pile
        1:  101:	printf("\n   Checking... \n");
call    0 returned 100%
        1:  102:	printf("\n   Prev # of discard count = %d\n", savedData.playedCardCount);
call    0 returned 100%
        1:  103:	printf("\n   Current # of discard count = %d\n", G.playedCardCount);
call    0 returned 100%
        1:  104:	failure  += asserttrue (savedData.playedCardCount+1,G.playedCardCount);
call    0 returned 100%
        -:  105:	
        1:  106:	printf("\nTEST 3. Check if player1's numBuys increased from 1\n");
call    0 returned 100%
        1:  107:	printf("\n   Checking... \n");
call    0 returned 100%
        1:  108:	printf("\n   Prev # of discard count = %d\n", savedData.numBuys);
call    0 returned 100%
        1:  109:	printf("\n   Current # of discard count = %d\n", G.numBuys);
call    0 returned 100%
        1:  110:	failure  += asserttrue (savedData.numBuys+1,G.numBuys);
call    0 returned 100%
        -:  111:	
        1:  112:	printf("\nTEST 4. Check if player 2's gets to draw one card for free\n");
call    0 returned 100%
        1:  113:	printf("\n   Checking player 2's handCount\n");
call    0 returned 100%
        1:  114:	failure  += asserttrue (savedData.handCount[player2]+1,G.handCount[player2]);
call    0 returned 100%
        1:  115:	printf("\n   Checking player 2's deckCount\n");
call    0 returned 100%
        1:  116:	failure  += asserttrue (savedData.deckCount[player2]-1,G.deckCount[player2]);
call    0 returned 100%
        -:  117:	
        1:  118:	printf("\nTEST 5. Check if kingdom and victory cards have any bugs\n");
call    0 returned 100%
        1:  119:	printf("\n   Checking kingdom cards' supply piles\n");
call    0 returned 100%
       11:  120:	for (i = 0; i < 10; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       10:  121:		failure  += asserttrue (savedData.supplyCount[k[i]], G.supplyCount[k[i]]);
call    0 returned 100%
        -:  122:	}
        1:  123:	printf("\n   Checking province card pile:\n");
call    0 returned 100%
        1:  124:	failure  += asserttrue (savedData.supplyCount[province], G.supplyCount[province]);
call    0 returned 100%
        1:  125:	printf("\n   Checking duchy card pile:\n");
call    0 returned 100%
        1:  126:	failure  += asserttrue (savedData.supplyCount[duchy], G.supplyCount[duchy]);
call    0 returned 100%
        1:  127:	printf("\n   Checking estate card pile:\n");
call    0 returned 100%
        1:  128:	failure  += asserttrue (savedData.supplyCount[estate], G.supplyCount[estate]);
call    0 returned 100%
        -:  129:	
        1:  130:    if (failure > 0) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  131:        printf("\nTEST FAILED\n");
call    0 returned 100%
        1:  132:        printf("Count of failed tests: %d\n",failure);
call    0 returned 100%
        -:  133:    }
        -:  134:    else {
    #####:  135:    	printf("\nPASSED ALL THE TESTS\n");
call    0 never executed
    #####:  136:        printf("\nTEST SUCCESSFULLY COMPLETED\n\n");
call    0 never executed
        -:  137:    }
        1:  138:    printf("**********************************************\n");
call    0 returned 100%
        1:  139:	return 0;
        -:  140:}
File 'dominion.c'
Lines executed:25.75% of 563
Branches executed:27.58% of 417
Taken at least once:19.18% of 417
Calls executed:18.95% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:3
        -:    1:/*
        -:    2:Team 4: (ONID: kohy) Kaylie's dominion.c code
        -:    3:https://github.com/kaylieko/CS362-004-S2018/tree/kohy-assignment-3/projects/kohy/dominion
        -:    4:*/
        -:    5:
        -:    6:#include "dominion.h"
        -:    7:#include "dominion_helpers.h"
        -:    8:#include "rngs.h"
        -:    9:#include <stdio.h>
        -:   10:#include <math.h>
        -:   11:#include <stdlib.h>
        -:   12:
function compare called 90 returned 100% blocks executed 83%
       90:   13:int compare(const void* a, const void* b) {
       90:   14:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   15:    return 1;
       90:   16:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       24:   17:    return -1;
       66:   18:  return 0;
        -:   19:}
        -:   20:
function newGame called 0 returned 0% blocks executed 0%
    #####:   21:struct gameState* newGame() {
    #####:   22:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   23:  return g;
        -:   24:}
        -:   25:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   26:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   27:		  int k8, int k9, int k10) {
    #####:   28:  int* k = malloc(10 * sizeof(int));
    #####:   29:  k[0] = k1;
    #####:   30:  k[1] = k2;
    #####:   31:  k[2] = k3;
    #####:   32:  k[3] = k4;
    #####:   33:  k[4] = k5;
    #####:   34:  k[5] = k6;
    #####:   35:  k[6] = k7;
    #####:   36:  k[7] = k8;
    #####:   37:  k[8] = k9;
    #####:   38:  k[9] = k10;
    #####:   39:  return k;
        -:   40:}
        -:   41:
function initializeGame called 3 returned 100% blocks executed 88%
        3:   42:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   43:		   struct gameState *state) {
        -:   44:
        -:   45:  int i;
        -:   46:  int j;
        -:   47:  int it;			
        -:   48:  //set up random number generator
        3:   49:  SelectStream(1);
call    0 returned 100%
        3:   50:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   51:  
        -:   52:  //check number of players
        3:   53:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   54:    {
    #####:   55:      return -1;
        -:   56:    }
        -:   57:
        -:   58:  //set number of players
        3:   59:  state->numPlayers = numPlayers;
        -:   60:
        -:   61:  //check selected kingdom cards are different
       33:   62:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   63:    {
      330:   64:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   65:        {
      300:   66:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   67:	    {
    #####:   68:	      return -1;
        -:   69:	    }
        -:   70:        }
        -:   71:    }
        -:   72:
        -:   73:
        -:   74:  //initialize supply
        -:   75:  ///////////////////////////////
        -:   76:
        -:   77:  //set number of Curse cards
        3:   78:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   79:    {
        3:   80:      state->supplyCount[curse] = 10;
        -:   81:    }
    #####:   82:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   83:    {
    #####:   84:      state->supplyCount[curse] = 20;
        -:   85:    }
        -:   86:  else
        -:   87:    {
    #####:   88:      state->supplyCount[curse] = 30;
        -:   89:    }
        -:   90:
        -:   91:  //set number of Victory cards
        3:   92:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   93:    {
        3:   94:      state->supplyCount[estate] = 8;
        3:   95:      state->supplyCount[duchy] = 8;
        3:   96:      state->supplyCount[province] = 8;
        -:   97:    }
        -:   98:  else
        -:   99:    {
    #####:  100:      state->supplyCount[estate] = 12;
    #####:  101:      state->supplyCount[duchy] = 12;
    #####:  102:      state->supplyCount[province] = 12;
        -:  103:    }
        -:  104:
        -:  105:  //set number of Treasure cards
        3:  106:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        3:  107:  state->supplyCount[silver] = 40;
        3:  108:  state->supplyCount[gold] = 30;
        -:  109:
        -:  110:  //set number of Kingdom cards
       63:  111:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  112:    {
      495:  113:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  114:	{
      465:  115:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  116:	    {
        -:  117:	      //check if card is a 'Victory' Kingdom card
       30:  118:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  119:		{
       12:  120:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        6:  121:		    state->supplyCount[i] = 8; 
        -:  122:		  }
    #####:  123:		  else{ state->supplyCount[i] = 12; }
        -:  124:		}
        -:  125:	      else
        -:  126:		{
       24:  127:		  state->supplyCount[i] = 10;
        -:  128:		}
       30:  129:	      break;
        -:  130:	    }
        -:  131:	  else    //card is not in the set choosen for the game
        -:  132:	    {
      435:  133:	      state->supplyCount[i] = -1;
        -:  134:	    }
        -:  135:	}
        -:  136:
        -:  137:    }
        -:  138:
        -:  139:  ////////////////////////
        -:  140:  //supply intilization complete
        -:  141:
        -:  142:  //set player decks
        9:  143:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  144:    {
        6:  145:      state->deckCount[i] = 0;
       24:  146:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  147:	{
       18:  148:	  state->deck[i][j] = estate;
       18:  149:	  state->deckCount[i]++;
        -:  150:	}
       48:  151:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  152:	{
       42:  153:	  state->deck[i][j] = copper;
       42:  154:	  state->deckCount[i]++;		
        -:  155:	}
        -:  156:    }
        -:  157:
        -:  158:  //shuffle player decks
        9:  159:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  160:    {
        6:  161:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  162:	{
    #####:  163:	  return -1;
        -:  164:	}
        -:  165:    }
        -:  166:
        -:  167:  //draw player hands
        9:  168:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  169:    {  
        -:  170:      //initialize hand size to zero
        6:  171:      state->handCount[i] = 0;
        6:  172:      state->discardCount[i] = 0;
        -:  173:      //draw 5 cards
        -:  174:      // for (j = 0; j < 5; j++)
        -:  175:      //	{
        -:  176:      //	  drawCard(i, state);
        -:  177:      //	}
        -:  178:    }
        -:  179:  
        -:  180:  //set embargo tokens to 0 for all supply piles
       84:  181:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  182:    {
       81:  183:      state->embargoTokens[i] = 0;
        -:  184:    }
        -:  185:
        -:  186:  //initialize first player's turn
        3:  187:  state->outpostPlayed = 0;
        3:  188:  state->phase = 0;
        3:  189:  state->numActions = 1;
        3:  190:  state->numBuys = 1;
        3:  191:  state->playedCardCount = 0;
        3:  192:  state->whoseTurn = 0;
        3:  193:  state->handCount[state->whoseTurn] = 0;
        -:  194:  //int it; move to top
        -:  195:
        -:  196:  //Moved draw cards to here, only drawing at the start of a turn
       18:  197:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       15:  198:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  199:  }
        -:  200:
        3:  201:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  202:
        3:  203:  return 0;
        -:  204:}
        -:  205:
function shuffle called 7 returned 100% blocks executed 94%
        7:  206:int shuffle(int player, struct gameState *state) {
        -:  207: 
        -:  208:
        -:  209:  int newDeck[MAX_DECK];
        7:  210:  int newDeckPos = 0;
        -:  211:  int card;
        -:  212:  int i;
        -:  213:
        7:  214:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  215:    return -1;
        7:  216:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  217:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  218:
       75:  219:  while (state->deckCount[player] > 0) {
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
       61:  220:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
       61:  221:    newDeck[newDeckPos] = state->deck[player][card];
       61:  222:    newDeckPos++;
      202:  223:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
      141:  224:      state->deck[player][i] = state->deck[player][i+1];
        -:  225:    }
       61:  226:    state->deckCount[player]--;
        -:  227:  }
       68:  228:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
       61:  229:    state->deck[player][i] = newDeck[i];
       61:  230:    state->deckCount[player]++;
        -:  231:  }
        -:  232:
        7:  233:  return 0;
        -:  234:}
        -:  235:
function playCard called 0 returned 0% blocks executed 0%
    #####:  236:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  237:{	
        -:  238:  int card;
    #####:  239:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  240:
        -:  241:  //check if it is the right phase
    #####:  242:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  243:    {
    #####:  244:      return -1;
        -:  245:    }
        -:  246:	
        -:  247:  //check if player has enough actions
    #####:  248:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  249:    {
    #####:  250:      return -1;
        -:  251:    }
        -:  252:	
        -:  253:  //get card played
    #####:  254:  card = handCard(handPos, state);
call    0 never executed
        -:  255:	
        -:  256:  //check if selected card is an action
    #####:  257:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  258:    {
    #####:  259:      return -1;
        -:  260:    }
        -:  261:	
        -:  262:  //play card
    #####:  263:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  264:    {
    #####:  265:      return -1;
        -:  266:    }
        -:  267:	
        -:  268:  //reduce number of actions
    #####:  269:  state->numActions--;
        -:  270:
        -:  271:  //update coins (Treasure cards may be added with card draws)
    #####:  272:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  273:	
    #####:  274:  return 0;
        -:  275:}
        -:  276:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  277:int buyCard(int supplyPos, struct gameState *state) {
        -:  278:  int who;
        -:  279:  if (DEBUG){
        -:  280:    printf("Entering buyCard...\n");
        -:  281:  }
        -:  282:
        -:  283:  // I don't know what to do about the phase thing.
        -:  284:
    #####:  285:  who = state->whoseTurn;
        -:  286:
    #####:  287:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  288:    if (DEBUG)
        -:  289:      printf("You do not have any buys left\n");
    #####:  290:    return -1;
    #####:  291:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  292:    if (DEBUG)
        -:  293:      printf("There are not any of that type of card left\n");
    #####:  294:    return -1;
    #####:  295:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  296:    if (DEBUG) 
        -:  297:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  298:    return -1;
        -:  299:  } else {
    #####:  300:    state->phase=1;
        -:  301:    //state->supplyCount[supplyPos]--;
    #####:  302:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  303:  
    #####:  304:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  305:    state->numBuys--;
        -:  306:    if (DEBUG)
        -:  307:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  308:  }
        -:  309:
        -:  310:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  311:  //state->discardCount[who]++;
        -:  312:    
    #####:  313:  return 0;
        -:  314:}
        -:  315:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  316:int numHandCards(struct gameState *state) {
    #####:  317:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  318:}
        -:  319:
function handCard called 0 returned 0% blocks executed 0%
    #####:  320:int handCard(int handPos, struct gameState *state) {
    #####:  321:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  322:  return state->hand[currentPlayer][handPos];
        -:  323:}
        -:  324:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  325:int supplyCount(int card, struct gameState *state) {
    #####:  326:  return state->supplyCount[card];
        -:  327:}
        -:  328:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  329:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  330:  int i;
    #####:  331:  int count = 0;
        -:  332:
    #####:  333:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  344:    {
    #####:  345:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  346:    }
        -:  347:
    #####:  348:  return count;
        -:  349:}
        -:  350:
function whoseTurn called 3 returned 100% blocks executed 100%
        3:  351:int whoseTurn(struct gameState *state) {
        3:  352:  return state->whoseTurn;
        -:  353:}
        -:  354:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  355:int endTurn(struct gameState *state) {
        -:  356:  int k;
        -:  357:  int i;
    #####:  358:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  359:  
        -:  360:  //Discard hand
    #####:  361:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  362:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  363:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  364:  }
    #####:  365:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  366:    
        -:  367:  //Code for determining the player
    #####:  368:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  369:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  370:  }
        -:  371:  else{
    #####:  372:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  373:  }
        -:  374:
    #####:  375:  state->outpostPlayed = 0;
    #####:  376:  state->phase = 0;
    #####:  377:  state->numActions = 1;
    #####:  378:  state->coins = 0;
    #####:  379:  state->numBuys = 1;
    #####:  380:  state->playedCardCount = 0;
    #####:  381:  state->handCount[state->whoseTurn] = 0;
        -:  382:
        -:  383:  //int k; move to top
        -:  384:  //Next player draws hand
    #####:  385:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  386:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  387:  }
        -:  388:
        -:  389:  //Update money
    #####:  390:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  391:
    #####:  392:  return 0;
        -:  393:}
        -:  394:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  395:int isGameOver(struct gameState *state) {
        -:  396:  int i;
        -:  397:  int j;
        -:  398:	
        -:  399:  //if stack of Province cards is empty, the game ends
    #####:  400:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  401:    {
    #####:  402:      return 1;
        -:  403:    }
        -:  404:
        -:  405:  //if three supply pile are at 0, the game ends
    #####:  406:  j = 0;
    #####:  407:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  408:    {
    #####:  409:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  410:	{
    #####:  411:	  j++;
        -:  412:	}
        -:  413:    }
    #####:  414:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  415:    {
    #####:  416:      return 1;
        -:  417:    }
        -:  418:
    #####:  419:  return 0;
        -:  420:}
        -:  421:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  422:int scoreFor (int player, struct gameState *state) {
        -:  423:
        -:  424:  int i;
    #####:  425:  int score = 0;
        -:  426:  //score from hand
    #####:  427:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  428:    {
    #####:  429:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  430:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  431:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  432:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  433:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  434:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  435:    }
        -:  436:
        -:  437:  //score from discard
    #####:  438:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  439:    {
    #####:  440:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  441:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  442:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  443:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  444:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  445:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  446:    }
        -:  447:
        -:  448:  //score from deck
    #####:  449:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  450:    {
    #####:  451:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  452:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  453:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  454:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  455:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  456:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  457:    }
        -:  458:
    #####:  459:  return score;
        -:  460:}
        -:  461:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  462:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  463:  int i;	
        -:  464:  int j;
        -:  465:  int highScore;
        -:  466:  int currentPlayer;
        -:  467:
        -:  468:  //get score for each player
    #####:  469:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  470:    {
        -:  471:      //set unused player scores to -9999
    #####:  472:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  473:	{
    #####:  474:	  players[i] = -9999;
        -:  475:	}
        -:  476:      else
        -:  477:	{
    #####:  478:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  479:	}
        -:  480:    }
        -:  481:
        -:  482:  //find highest score
    #####:  483:  j = 0;
    #####:  484:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  485:    {
    #####:  486:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  487:	{
    #####:  488:	  j = i;
        -:  489:	}
        -:  490:    }
    #####:  491:  highScore = players[j];
        -:  492:
        -:  493:  //add 1 to players who had less turns
    #####:  494:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  495:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  496:    {
    #####:  497:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  498:	{
    #####:  499:	  players[i]++;
        -:  500:	}
        -:  501:    }
        -:  502:
        -:  503:  //find new highest score
    #####:  504:  j = 0;
    #####:  505:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  506:    {
    #####:  507:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  508:	{
    #####:  509:	  j = i;
        -:  510:	}
        -:  511:    }
    #####:  512:  highScore = players[j];
        -:  513:
        -:  514:  //set winners in array to 1 and rest to 0
    #####:  515:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  516:    {
    #####:  517:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  518:	{
    #####:  519:	  players[i] = 1;
        -:  520:	}
        -:  521:      else
        -:  522:	{
    #####:  523:	  players[i] = 0;
        -:  524:	}
        -:  525:    }
        -:  526:
    #####:  527:  return 0;
        -:  528:}
        -:  529:
function drawCard called 29 returned 100% blocks executed 38%
       29:  530:int drawCard(int player, struct gameState *state)
        -:  531:{	int count;
        -:  532:  int deckCounter;
       29:  533:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  534:    
        -:  535:    //Step 1 Shuffle the discard pile back into a deck
        -:  536:    int i;
        -:  537:    //Move discard to deck
    #####:  538:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  539:      state->deck[player][i] = state->discard[player][i];
    #####:  540:      state->discard[player][i] = -1;
        -:  541:    }
        -:  542:
    #####:  543:    state->deckCount[player] = state->discardCount[player];
    #####:  544:    state->discardCount[player] = 0;//Reset discard
        -:  545:
        -:  546:    //Shufffle the deck
    #####:  547:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  548:   
        -:  549:    if (DEBUG){//Debug statements
        -:  550:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  551:    }
        -:  552:    
    #####:  553:    state->discardCount[player] = 0;
        -:  554:
        -:  555:    //Step 2 Draw Card
    #####:  556:    count = state->handCount[player];//Get current player's hand count
        -:  557:    
        -:  558:    if (DEBUG){//Debug statements
        -:  559:      printf("Current hand count: %d\n", count);
        -:  560:    }
        -:  561:    
    #####:  562:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  563:
    #####:  564:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  565:      return -1;
        -:  566:
    #####:  567:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  568:    state->deckCount[player]--;
    #####:  569:    state->handCount[player]++;//Increment hand count
        -:  570:  }
        -:  571:
        -:  572:  else{
       29:  573:    int count = state->handCount[player];//Get current hand count for player
        -:  574:    int deckCounter;
        -:  575:    if (DEBUG){//Debug statements
        -:  576:      printf("Current hand count: %d\n", count);
        -:  577:    }
        -:  578:
       29:  579:    deckCounter = state->deckCount[player];//Create holder for the deck count
       29:  580:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       29:  581:    state->deckCount[player]--;
       29:  582:    state->handCount[player]++;//Increment hand count
        -:  583:  }
        -:  584:
       29:  585:  return 0;
        -:  586:}
        -:  587:
function getCost called 0 returned 0% blocks executed 0%
    #####:  588:int getCost(int cardNumber)
        -:  589:{
    #####:  590:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  591:    {
        -:  592:    case curse:
    #####:  593:      return 0;
        -:  594:    case estate:
    #####:  595:      return 2;
        -:  596:    case duchy:
    #####:  597:      return 5;
        -:  598:    case province:
    #####:  599:      return 8;
        -:  600:    case copper:
    #####:  601:      return 0;
        -:  602:    case silver:
    #####:  603:      return 3;
        -:  604:    case gold:
    #####:  605:      return 6;
        -:  606:    case adventurer:
    #####:  607:      return 6;
        -:  608:    case council_room:
    #####:  609:      return 5;
        -:  610:    case feast:
    #####:  611:      return 4;
        -:  612:    case gardens:
    #####:  613:      return 4;
        -:  614:    case mine:
    #####:  615:      return 5;
        -:  616:    case remodel:
    #####:  617:      return 4;
        -:  618:    case smithy:
    #####:  619:      return 4;
        -:  620:    case village:
    #####:  621:      return 3;
        -:  622:    case baron:
    #####:  623:      return 4;
        -:  624:    case great_hall:
    #####:  625:      return 3;
        -:  626:    case minion:
    #####:  627:      return 5;
        -:  628:    case steward:
    #####:  629:      return 3;
        -:  630:    case tribute:
    #####:  631:      return 5;
        -:  632:    case ambassador:
    #####:  633:      return 3;
        -:  634:    case cutpurse:
    #####:  635:      return 4;
        -:  636:    case embargo: 
    #####:  637:      return 2;
        -:  638:    case outpost:
    #####:  639:      return 5;
        -:  640:    case salvager:
    #####:  641:      return 4;
        -:  642:    case sea_hag:
    #####:  643:      return 4;
        -:  644:    case treasure_map:
    #####:  645:      return 4;
        -:  646:    }
        -:  647:	
    #####:  648:  return -1;
        -:  649:}
        -:  650:
        -:  651://Assignment #2, Refactor 'Adventurer'
function adventurerEffect called 1 returned 100% blocks executed 100%
        1:  652:int adventurerEffect(int currentPlayer, struct gameState *state){
        -:  653:  int cardDrawn;
        1:  654:  int drawntreasure = 0;
        1:  655:  int z = 0;
        -:  656:  int temphand[MAX_HAND];
        7:  657:  while(drawntreasure < 2) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  658:    //if the deck is empty we need to shuffle discard and add to deck
        -:  659:    //*Introduce a Bug: Instead of shuffling discard empty deck, this will result shuffle the deck with 1 or 0 card
        5:  660:    if (state->deckCount[currentPlayer] < 2) {
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        1:  661:      shuffle(currentPlayer, state);
call    0 returned 100%
        -:  662:    }
        5:  663:    drawCard(currentPlayer, state);
call    0 returned 100%
        5:  664:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
        5:  665:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        2:  666:      drawntreasure++;
        -:  667:    else{
        3:  668:      temphand[z] = cardDrawn;
        3:  669:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        3:  670:      z++;
        -:  671:    }
        -:  672:  }
        5:  673:  while(z - 1 >= 0) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3:  674:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
        3:  675:    z = z - 1;
        -:  676:  }
        1:  677:  return 0;
        -:  678:}
        -:  679:
        -:  680:
        -:  681://Assignment #2, Refactor 'Smithy'
function smithyEffect called 1 returned 100% blocks executed 100%
        1:  682:int smithyEffect(int currentPlayer, struct gameState *state, int handPos)
        -:  683:{
        -:  684:  int i;
        -:  685:  //+3 cards
        -:  686:  //*Introduce a Bug: Draw +4 cards instead of +3
        5:  687:  for (i = 0; i < 4; i++) {
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        4:  688:    drawCard(currentPlayer, state);
call    0 returned 100%
        -:  689:  }  
        -:  690:  //discard card from hand
        1:  691:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  692:  return 0;
        -:  693:}
        -:  694:
        -:  695:
        -:  696://Assignment #2, Refactor 'Counsil_Room'
function counsil_RoomEffect called 1 returned 100% blocks executed 100%
        1:  697:int counsil_RoomEffect(int currentPlayer, struct gameState *state, int handPos)
        -:  698:{
        -:  699:  int i;
        -:  700:
        -:  701:  //+4 Cards
        5:  702:  for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  703:  {
        4:  704:    drawCard(currentPlayer, state);
call    0 returned 100%
        -:  705:  }   
        -:  706:
        -:  707:  //Buy +1
        1:  708:  state->numBuys++;
        -:  709:
        -:  710:  //Each other player draws a card
        3:  711:  for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  712:  {
        2:  713:    if ( i != currentPlayer )
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  714:    {
        1:  715:      drawCard(i, state);
call    0 returned 100%
        -:  716:    }
        -:  717:  }     
        -:  718:  //put played card in played card pile
        -:  719:  //*Introduce a Bug: Trash a card from hand instead of discard
        1:  720:  discardCard(handPos, currentPlayer, state, 1);      
call    0 returned 100%
        1:  721:  return 0;
        -:  722:}
        -:  723:
        -:  724:
        -:  725://Assignment #2, Refactor 'Village'
function villageEffect called 0 returned 0% blocks executed 0%
    #####:  726:int villageEffect(int currentPlayer, struct gameState *state, int handPos)
        -:  727:{
        -:  728:  //+1 Card
    #####:  729:  drawCard(currentPlayer, state); 
call    0 never executed
        -:  730:
        -:  731:  //+2 Actions
    #####:  732:  state->numActions = state->numActions + 2; 
        -:  733:
        -:  734:  //discard played card from hand
        -:  735:  
    #####:  736:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  737:  return 0;
        -:  738:}
        -:  739:
        -:  740:
        -:  741://Assignment #2, Refactor 'Great_Hall'
function great_HallEffect called 0 returned 0% blocks executed 0%
    #####:  742:int great_HallEffect(int currentPlayer, struct gameState *state, int handPos){
        -:  743:  //+1 Card
    #####:  744:  drawCard(currentPlayer, state); 
call    0 never executed
        -:  745:
        -:  746:  //+1 Actions
        -:  747:  //*Introduce a Bug: gain +2 actions instead of +1
    #####:  748:  state->numActions = state->numActions + 2;     
        -:  749:
        -:  750:  //discard card from hand
    #####:  751:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  752:  return 0;
        -:  753:}
        -:  754:
        -:  755:
function cardEffect called 3 returned 100% blocks executed 5%
        3:  756:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  757:{
        -:  758:  int i;
        -:  759:  int j;
        -:  760:  int k;
        -:  761:  int x;
        -:  762:  int index;
        3:  763:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        3:  764:  int nextPlayer = currentPlayer + 1;
        -:  765:
        3:  766:  int tributeRevealedCards[2] = {-1, -1};
        -:  767:  int temphand[MAX_HAND];// moved above the if statement
        -:  768:  //int drawntreasure=0; //moved into adventurerEffect function
        -:  769:  //int cardDrawn;       //moved into adventurerEffect function
        -:  770:  //int z = 0;           //moved into adventurerEffect function
        3:  771:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  772:    nextPlayer = 0;
        -:  773:  }
        -:  774:  
        -:  775:	
        -:  776:  //uses switch to select card and perform actions
        3:  777:  switch( card ) 
branch  0 taken 33%
branch  1 taken 33%
branch  2 taken 33%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  778:  {
        -:  779:    case adventurer:
        -:  780:      //call the adventurer card effect function
        1:  781:      adventurerEffect(currentPlayer, state);
call    0 returned 100%
        1:  782:      return 0;
        -:  783:		
        -:  784:    case smithy:
        -:  785:      //call the smithy card effect function
        1:  786:      smithyEffect(currentPlayer, state, handPos);
call    0 returned 100%
        1:  787:      return 0;
        -:  788:
        -:  789:    case council_room:
        -:  790:      //call the counsil_room card effect function
        1:  791:      counsil_RoomEffect(currentPlayer, state, handPos);
call    0 returned 100%
        1:  792:      return 0;
        -:  793:      
        -:  794:    case village:
        -:  795:      //call the village card effect function
    #####:  796:      villageEffect (currentPlayer, state, handPos);
call    0 never executed
    #####:  797:      return 0;  
        -:  798:			
        -:  799:    case great_hall:
        -:  800:      //call the great_hall card effect function
    #####:  801:      great_HallEffect (currentPlayer, state, handPos);
call    0 never executed
    #####:  802:      return 0;
        -:  803:
        -:  804:    case feast:
        -:  805:      //gain card with cost up to 5
        -:  806:      //Backup hand
    #####:  807:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  808:      	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  809:      	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  810:      }
        -:  811:      //Backup hand
        -:  812:
        -:  813:      //Update Coins for Buy
    #####:  814:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  815:      x = 1;//Condition to loop on
    #####:  816:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  817:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  818:	  if (DEBUG)
        -:  819:	    printf("None of that card left, sorry!\n");
        -:  820:
        -:  821:	  if (DEBUG){
        -:  822:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  823:	  }
        -:  824:	}
    #####:  825:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  826:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  827:
        -:  828:	  if (DEBUG){
        -:  829:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  830:	  }
        -:  831:	}
        -:  832:	else{
        -:  833:
        -:  834:	  if (DEBUG){
        -:  835:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  836:	  }
        -:  837:
    #####:  838:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  839:	  x = 0;//No more buying cards
        -:  840:
        -:  841:	  if (DEBUG){
        -:  842:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  843:	  }
        -:  844:
        -:  845:	}
        -:  846:      }     
        -:  847:
        -:  848:      //Reset Hand
    #####:  849:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  850:	state->hand[currentPlayer][i] = temphand[i];
    #####:  851:	temphand[i] = -1;
        -:  852:      }
        -:  853:      //Reset Hand
        -:  854:      			
    #####:  855:      return 0;
        -:  856:			
        -:  857:    case gardens:
    #####:  858:      return -1;
        -:  859:			
        -:  860:    case mine:
    #####:  861:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  862:
    #####:  863:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  864:	{
    #####:  865:	  return -1;
        -:  866:	}
        -:  867:		
    #####:  868:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  869:	{
    #####:  870:	  return -1;
        -:  871:	}
        -:  872:
    #####:  873:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  874:	{
    #####:  875:	  return -1;
        -:  876:	}
        -:  877:
    #####:  878:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  879:
        -:  880:      //discard card from hand
    #####:  881:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  882:
        -:  883:      //discard trashed card
    #####:  884:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  885:	{
    #####:  886:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  887:	    {
    #####:  888:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  889:	      break;
        -:  890:	    }
        -:  891:	}
        -:  892:			
    #####:  893:      return 0;
        -:  894:			
        -:  895:    case remodel:
    #####:  896:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  897:
    #####:  898:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  899:	{
    #####:  900:	  return -1;
        -:  901:	}
        -:  902:
    #####:  903:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  904:
        -:  905:      //discard card from hand
    #####:  906:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  907:
        -:  908:      //discard trashed card
    #####:  909:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  910:	{
    #####:  911:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  912:	    {
    #####:  913:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  914:	      break;
        -:  915:	    }
        -:  916:	}
        -:  917:
        -:  918:
    #####:  919:      return 0;
        -:  920:		
        -:  921:    
        -:  922:		
        -:  923:    
        -:  924:		
        -:  925:    case baron:
    #####:  926:      state->numBuys++;//Increase buys by 1!
    #####:  927:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  928:	int p = 0;//Iterator for hand!
    #####:  929:	int card_not_discarded = 1;//Flag for discard set!
    #####:  930:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  931:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  932:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  933:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  934:	    state->discardCount[currentPlayer]++;
    #####:  935:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  936:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  937:	    }
    #####:  938:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  939:	    state->handCount[currentPlayer]--;
    #####:  940:	    card_not_discarded = 0;//Exit the loop
        -:  941:	  }
    #####:  942:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  943:	    if(DEBUG) {
        -:  944:	      printf("No estate cards in your hand, invalid choice\n");
        -:  945:	      printf("Must gain an estate if there are any\n");
        -:  946:	    }
    #####:  947:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  948:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  949:	      state->supplyCount[estate]--;//Decrement estates
    #####:  950:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  951:		isGameOver(state);
call    0 never executed
        -:  952:	      }
        -:  953:	    }
    #####:  954:	    card_not_discarded = 0;//Exit the loop
        -:  955:	  }
        -:  956:			    
        -:  957:	  else{
    #####:  958:	    p++;//Next card
        -:  959:	  }
        -:  960:	}
        -:  961:      }
        -:  962:			    
        -:  963:      else{
    #####:  964:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  965:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  966:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  967:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  968:	    isGameOver(state);
call    0 never executed
        -:  969:	  }
        -:  970:	}
        -:  971:      }
        -:  972:	    
        -:  973:      
    #####:  974:      return 0;
        -:  975:		
        -:  976:    
        -:  977:		
        -:  978:    case minion:
        -:  979:      //+1 action
    #####:  980:      state->numActions++;
        -:  981:			
        -:  982:      //discard card from hand
    #####:  983:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  984:			
    #####:  985:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  986:	{
    #####:  987:	  state->coins = state->coins + 2;
        -:  988:	}
        -:  989:			
    #####:  990:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  991:	{
        -:  992:	  //discard hand
    #####:  993:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  994:	    {
    #####:  995:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  996:	    }
        -:  997:				
        -:  998:	  //draw 4
    #####:  999:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1000:	    {
    #####: 1001:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1002:	    }
        -: 1003:				
        -: 1004:	  //other players discard hand and redraw if hand size > 4
    #####: 1005:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1006:	    {
    #####: 1007:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1008:		{
    #####: 1009:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1010:		    {
        -: 1011:		      //discard hand
    #####: 1012:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1013:			{
    #####: 1014:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1015:			}
        -: 1016:							
        -: 1017:		      //draw 4
    #####: 1018:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1019:			{
    #####: 1020:			  drawCard(i, state);
call    0 never executed
        -: 1021:			}
        -: 1022:		    }
        -: 1023:		}
        -: 1024:	    }
        -: 1025:				
        -: 1026:	}
    #####: 1027:      return 0;
        -: 1028:		
        -: 1029:    case steward:
    #####: 1030:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1031:	{
        -: 1032:	  //+2 cards
    #####: 1033:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1034:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1035:	}
    #####: 1036:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1037:	{
        -: 1038:	  //+2 coins
    #####: 1039:	  state->coins = state->coins + 2;
        -: 1040:	}
        -: 1041:      else
        -: 1042:	{
        -: 1043:	  //trash 2 cards in hand
    #####: 1044:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1045:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1046:	}
        -: 1047:			
        -: 1048:      //discard card from hand
    #####: 1049:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1050:      return 0;
        -: 1051:		
        -: 1052:    case tribute:
    #####: 1053:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1054:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1055:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1056:	  state->deckCount[nextPlayer]--;
        -: 1057:	}
    #####: 1058:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1059:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1060:	  state->discardCount[nextPlayer]--;
        -: 1061:	}
        -: 1062:	else{
        -: 1063:	  //No Card to Reveal
        -: 1064:	  if (DEBUG){
        -: 1065:	    printf("No cards to reveal\n");
        -: 1066:	  }
        -: 1067:	}
        -: 1068:      }
        -: 1069:	    
        -: 1070:      else{
    #####: 1071:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1072:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1073:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1074:	    state->deckCount[nextPlayer]++;
    #####: 1075:	    state->discard[nextPlayer][i] = -1;
    #####: 1076:	    state->discardCount[nextPlayer]--;
        -: 1077:	  }
        -: 1078:			    
    #####: 1079:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1080:	} 
    #####: 1081:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1082:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1083:	state->deckCount[nextPlayer]--;
    #####: 1084:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1085:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1086:	state->deckCount[nextPlayer]--;
        -: 1087:      }    
        -: 1088:		       
    #####: 1089:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1090:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1091:	state->playedCardCount++;
    #####: 1092:	tributeRevealedCards[1] = -1;
        -: 1093:      }
        -: 1094:
    #####: 1095:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1096:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1097:	  state->coins += 2;
        -: 1098:	}
        -: 1099:		    
    #####: 1100:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1101:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1102:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1103:	}
        -: 1104:	else{//Action Card
    #####: 1105:	  state->numActions = state->numActions + 2;
        -: 1106:	}
        -: 1107:      }
        -: 1108:	    
    #####: 1109:      return 0;
        -: 1110:		
        -: 1111:    case ambassador:
    #####: 1112:      j = 0;		//used to check if player has enough cards to discard
        -: 1113:
    #####: 1114:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1115:	{
    #####: 1116:	  return -1;				
        -: 1117:	}
        -: 1118:
    #####: 1119:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1120:	{
    #####: 1121:	  return -1;
        -: 1122:	}
        -: 1123:
    #####: 1124:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1125:	{
    #####: 1126:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1127:	    {
    #####: 1128:	      j++;
        -: 1129:	    }
        -: 1130:	}
    #####: 1131:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1132:	{
    #####: 1133:	  return -1;				
        -: 1134:	}
        -: 1135:
        -: 1136:      if (DEBUG) 
        -: 1137:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1138:
        -: 1139:      //increase supply count for choosen card by amount being discarded
    #####: 1140:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1141:			
        -: 1142:      //each other player gains a copy of revealed card
    #####: 1143:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1144:	{
    #####: 1145:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1146:	    {
    #####: 1147:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1148:	    }
        -: 1149:	}
        -: 1150:
        -: 1151:      //discard played card from hand
    #####: 1152:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1153:
        -: 1154:      //trash copies of cards returned to supply
    #####: 1155:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1156:	{
    #####: 1157:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1158:	    {
    #####: 1159:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1160:		{
    #####: 1161:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1162:		  break;
        -: 1163:		}
        -: 1164:	    }
        -: 1165:	}			
        -: 1166:
    #####: 1167:      return 0;
        -: 1168:		
        -: 1169:    case cutpurse:
        -: 1170:
    #####: 1171:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1172:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1173:	{
    #####: 1174:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1175:	    {
    #####: 1176:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1177:		{
    #####: 1178:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1179:		    {
    #####: 1180:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1181:		      break;
        -: 1182:		    }
    #####: 1183:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1184:		    {
    #####: 1185:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1186:			{
        -: 1187:			  if (DEBUG)
        -: 1188:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1189:			}	
    #####: 1190:		      break;
        -: 1191:		    }		
        -: 1192:		}
        -: 1193:					
        -: 1194:	    }
        -: 1195:				
        -: 1196:	}				
        -: 1197:
        -: 1198:      //discard played card from hand
    #####: 1199:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1200:
    #####: 1201:      return 0;
        -: 1202:
        -: 1203:		
        -: 1204:    case embargo: 
        -: 1205:      //+2 Coins
    #####: 1206:      state->coins = state->coins + 2;
        -: 1207:			
        -: 1208:      //see if selected pile is in play
    #####: 1209:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1210:	{
    #####: 1211:	  return -1;
        -: 1212:	}
        -: 1213:			
        -: 1214:      //add embargo token to selected supply pile
    #####: 1215:      state->embargoTokens[choice1]++;
        -: 1216:			
        -: 1217:      //trash card
    #####: 1218:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1219:      return 0;
        -: 1220:		
        -: 1221:    case outpost:
        -: 1222:      //set outpost flag
    #####: 1223:      state->outpostPlayed++;
        -: 1224:			
        -: 1225:      //discard card
    #####: 1226:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1227:      return 0;
        -: 1228:		
        -: 1229:    case salvager:
        -: 1230:      //+1 buy
    #####: 1231:      state->numBuys++;
        -: 1232:			
    #####: 1233:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1234:	{
        -: 1235:	  //gain coins equal to trashed card
    #####: 1236:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1237:	  //trash card
    #####: 1238:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1239:	}
        -: 1240:			
        -: 1241:      //discard card
    #####: 1242:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1243:      return 0;
        -: 1244:		
        -: 1245:    case sea_hag:
    #####: 1246:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1247:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1248:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1249:	  state->discardCount[i]++;
    #####: 1250:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1251:	}
        -: 1252:      }
    #####: 1253:      return 0;
        -: 1254:		
        -: 1255:    case treasure_map:
        -: 1256:      //search hand for another treasure_map
    #####: 1257:      index = -1;
    #####: 1258:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1259:	{
    #####: 1260:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1261:	    {
    #####: 1262:	      index = i;
    #####: 1263:	      break;
        -: 1264:	    }
        -: 1265:	}
    #####: 1266:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1267:	{
        -: 1268:	  //trash both treasure cards
    #####: 1269:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1270:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1271:
        -: 1272:	  //gain 4 Gold cards
    #####: 1273:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1274:	    {
    #####: 1275:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1276:	    }
        -: 1277:				
        -: 1278:	  //return success
    #####: 1279:	  return 1;
        -: 1280:	}
        -: 1281:			
        -: 1282:      //no second treasure_map found in hand
    #####: 1283:      return -1;
        -: 1284:    }
        -: 1285:	
    #####: 1286:  return -1;
        -: 1287:}
        -: 1288:
function discardCard called 2 returned 100% blocks executed 78%
        2: 1289:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1290:{
        -: 1291:	
        -: 1292:  //if card is not trashed, added to Played pile 
        2: 1293:  if (trashFlag < 1)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1294:    {
        -: 1295:      //add card to played pile
        1: 1296:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        1: 1297:      state->playedCardCount++;
        -: 1298:    }
        -: 1299:	
        -: 1300:  //set played card to -1
        2: 1301:  state->hand[currentPlayer][handPos] = -1;
        -: 1302:	
        -: 1303:  //remove card from player's hand
        2: 1304:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1305:    {
        -: 1306:      //reduce number of cards in hand
    #####: 1307:      state->handCount[currentPlayer]--;
        -: 1308:    }
        2: 1309:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1310:    {
        -: 1311:      //reduce number of cards in hand
    #####: 1312:      state->handCount[currentPlayer]--;
        -: 1313:    }
        -: 1314:  else 	
        -: 1315:    {
        -: 1316:      //replace discarded card with last card in hand
        2: 1317:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1318:      //set last card to -1
        2: 1319:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1320:      //reduce number of cards in hand
        2: 1321:      state->handCount[currentPlayer]--;
        -: 1322:    }
        -: 1323:	
        2: 1324:  return 0;
        -: 1325:}
        -: 1326:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1327:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1328:{
        -: 1329:  //Note: supplyPos is enum of choosen card
        -: 1330:	
        -: 1331:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1332:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1333:    {
    #####: 1334:      return -1;
        -: 1335:    }
        -: 1336:	
        -: 1337:  //added card for [whoseTurn] current player:
        -: 1338:  // toFlag = 0 : add to discard
        -: 1339:  // toFlag = 1 : add to deck
        -: 1340:  // toFlag = 2 : add to hand
        -: 1341:
    #####: 1342:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1343:    {
    #####: 1344:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1345:      state->deckCount[player]++;
        -: 1346:    }
    #####: 1347:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1348:    {
    #####: 1349:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1350:      state->handCount[player]++;
        -: 1351:    }
        -: 1352:  else
        -: 1353:    {
    #####: 1354:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1355:      state->discardCount[player]++;
        -: 1356:    }
        -: 1357:	
        -: 1358:  //decrease number in supply pile
    #####: 1359:  state->supplyCount[supplyPos]--;
        -: 1360:	 
    #####: 1361:  return 0;
        -: 1362:}
        -: 1363:
function updateCoins called 3 returned 100% blocks executed 82%
        3: 1364:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1365:{
        -: 1366:  int i;
        -: 1367:	
        -: 1368:  //reset coin count
        3: 1369:  state->coins = 0;
        -: 1370:
        -: 1371:  //add coins for each Treasure card in player's hand
       18: 1372:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1373:    {
       15: 1374:      if (state->hand[player][i] == copper)
branch  0 taken 73% (fallthrough)
branch  1 taken 27%
        -: 1375:	{
       11: 1376:	  state->coins += 1;
        -: 1377:	}
        4: 1378:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1379:	{
    #####: 1380:	  state->coins += 2;
        -: 1381:	}
        4: 1382:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1383:	{
    #####: 1384:	  state->coins += 3;
        -: 1385:	}	
        -: 1386:    }	
        -: 1387:
        -: 1388:  //add bonus
        3: 1389:  state->coins += bonus;
        -: 1390:
        3: 1391:  return 0;
        -: 1392:}
        -: 1393:
        -: 1394:
        -: 1395:
        -: 1396://end of dominion.c
cardtest4.c:
**********************************************
Testing -> Village Card

< P1 Data BEFORE Village Card is Played >
Player 1 has 5 cards in hand.
Player 1 has 5 cards in deck.
Player 1 has 0 cards in discard pile.

< P1 Data AFTER Village Card is Played >
Player 1 has 5 cards in hand.
Player 1 has 4 cards in deck.
Player 1 has 0 cards in discard pile.

***************** RESULTS *********************

TEST 1. Check player 1 gets to draw 1 card 

   Check player 1's deckCount

	Expected value: 5, actual value: 5

	PASS (assertion true)

   Check player 1's deckCount

	Expected value: 4, actual value: 4

	PASS (assertion true)

TEST 2. Check to see discardCard() function within Village Card's code worked

   Checking... 

   Prev # of discard count = 0

   Current # of discard count = 1

	Expected value: 1, actual value: 1

	PASS (assertion true)

TEST 3. Check if player1's numActions increased by +2

   Checking... 

   Prev numActions = 1

   Current of numActions = 3

	Expected value: 3, actual value: 3

	PASS (assertion true)

TEST 4. Check if player 2's hand and deck cards remains the same

   Check player 2's handCount

	Expected value: 0, actual value: 0

	PASS (assertion true)

   Check player 2's deckCount

	Expected value: 10, actual value: 10

	PASS (assertion true)

TEST 5. Check if kingdom and victory cards have any bugs

   Checking kingdom cards' supply piles

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 8, actual value: 8

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 10, actual value: 10

	PASS (assertion true)

	Expected value: 8, actual value: 8

	PASS (assertion true)

   Checking province card pile:

	Expected value: 8, actual value: 8

	PASS (assertion true)

   Checking duchy card pile:

	Expected value: 8, actual value: 8

	PASS (assertion true)

   Checking estate card pile:

	Expected value: 8, actual value: 8

	PASS (assertion true)

PASSED ALL THE TESTS

TEST SUCCESSFULLY COMPLETED

**********************************************
File 'cardtest4.c'
Lines executed:93.06% of 72
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
Calls executed:92.16% of 51
Creating 'cardtest4.c.gcov'

        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:* Author: Ju An
        -:    3:* Date: April 29, 2018
        -:    4:* OSU CS 362 - Assignment 3: Card Test 4
        -:    5:* This is a unit test for Village card in dominion.c
        -:    6:*/
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include "rngs.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:
        -:   14:// for more detailed results, use NOISY_TEST 1
        -:   15:#define NOISY_TEST 1
        -:   16:
        -:   17:// asserttrue function instead of the standard C assert
        -:   18:// if assert is not true return 1
function asserttrue called 19 returned 100% blocks executed 63%
       19:   19:int asserttrue (int expectedVal, int testedVal) 
        -:   20:{
       19:   21:	if (testedVal == expectedVal) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   22:		#if (NOISY_TEST == 1)
       19:   23:			printf("\n	Expected value: %d, actual value: %d\n", expectedVal, testedVal);
call    0 returned 100%
       19:   24:			printf("\n	PASS (assertion true)\n");
call    0 returned 100%
        -:   25:		#endif
       19:   26:		return 0;
        -:   27:	} else {
        -:   28:		#if (NOISY_TEST == 1)
    #####:   29:			printf("\n	Expected value: %d, actual value: %d\n", expectedVal, testedVal);	
call    0 never executed
    #####:   30:			printf("\n	FAIL (assertion false)\n");
call    0 never executed
        -:   31:		#endif
    #####:   32:		return 1;
        -:   33:	}
        -:   34:}
        -:   35:
        -:   36:// testing the cardEffect() function (refactored) from dominion.c
        -:   37:// test should work whether a card is implemented inside cardEffect or in its own function
function main called 1 returned 100% blocks executed 96%
        1:   38:int main()
        -:   39:{
        -:   40:    // counts failed tests
        1:   41:	int failure = 0;
        -:   42:    
        -:   43:    // test variable initialization
        -:   44:	int i;
        1:   45:	int handpos = 0;
        1:   46:	int choice1 = 0;
        1:   47:	int choice2 = 0;
        1:   48:	int choice3 = 0;
        1:   49:	int bonus = 0;
        -:   50:	
        1:   51:	int numPlayer = 2;
        1:   52:	int player1 = 0;
        1:   53:	int player2 = 1;
        -:   54:	
        1:   55:	int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   56:               remodel, smithy, village, baron, great_hall};
        -:   57:	struct gameState G, savedData;
        -:   58:	
        1:   59:	int seed = 5656;
        -:   60:	
        1:   61:	printf("**********************************************\n");
call    0 returned 100%
        1:   62:    printf("Testing -> Village Card\n");
call    0 returned 100%
        1:   63:    memset(&G, 23, sizeof(struct gameState));   		 // clear the game state
        1:   64:    initializeGame(numPlayer, k, seed, &G);   // initialize a new game
call    0 returned 100%
        1:   65:    memcpy(&savedData, &G, sizeof(struct gameState));
        -:   66:	
        1:   67:	printf("\n< P1 Data BEFORE Village Card is Played >\n");
call    0 returned 100%
        -:   68:	// 1. check player 1's # of card in hand
        1:   69:	printf("Player 1 has %d cards in hand.\n", savedData.handCount[player1]);
call    0 returned 100%
        -:   70:	
        -:   71:	// 2. check player 1's # of card in deck
        1:   72:	printf("Player 1 has %d cards in deck.\n", savedData.deckCount[player1]);
call    0 returned 100%
        -:   73:	
        -:   74:	// 3. check player 1's # of card in discard pile
        1:   75:	printf("Player 1 has %d cards in discard pile.\n", savedData.discardCount[player1]);
call    0 returned 100%
        -:   76:	
        -:   77:	// 4. Play Village Card
        1:   78:	cardEffect(village, choice1, choice2, choice3, &G, handpos, &bonus);
call    0 returned 100%
        -:   79:	
        1:   80:	printf("\n< P1 Data AFTER Village Card is Played >\n");
call    0 returned 100%
        -:   81:	// 5. check player 1's # of card in hand
        1:   82:	printf("Player 1 has %d cards in hand.\n", G.handCount[player1]);
call    0 returned 100%
        -:   83:	
        -:   84:	// 6. check player 1's # of card in deck
        1:   85:	printf("Player 1 has %d cards in deck.\n", G.deckCount[player1]);
call    0 returned 100%
        -:   86:	
        -:   87:	// 7. check player 1's # of card in discard pile
        1:   88:	printf("Player 1 has %d cards in discard pile.\n", G.discardCount[player1]);
call    0 returned 100%
        -:   89:	
        -:   90:	
        1:   91:	printf("\n***************** RESULTS *********************\n");
call    0 returned 100%
        -:   92:	
        1:   93:	printf("\nTEST 1. Check player 1 gets to draw 1 card \n");
call    0 returned 100%
        1:   94:	printf("\n   Check player 1's deckCount\n");
call    0 returned 100%
        1:   95:	failure  += asserttrue (savedData.handCount[player1], G.handCount[player1]);
call    0 returned 100%
        1:   96:	printf("\n   Check player 1's deckCount\n");
call    0 returned 100%
        1:   97:	failure  += asserttrue (savedData.deckCount[player1]-1,G.deckCount[player1]);
call    0 returned 100%
        -:   98:	
        1:   99:	printf("\nTEST 2. Check to see discardCard() function within Village Card's code worked\n");
call    0 returned 100%
        -:  100:	// NOTE: used card sent to discardCard() to be added on to a played pile
        1:  101:	printf("\n   Checking... \n");
call    0 returned 100%
        1:  102:	printf("\n   Prev # of discard count = %d\n", savedData.playedCardCount);
call    0 returned 100%
        1:  103:	printf("\n   Current # of discard count = %d\n", G.playedCardCount);
call    0 returned 100%
        1:  104:	failure  += asserttrue (savedData.playedCardCount+1,G.playedCardCount);
call    0 returned 100%
        -:  105:	
        1:  106:	printf("\nTEST 3. Check if player1's numActions increased by +2\n");
call    0 returned 100%
        1:  107:	printf("\n   Checking... \n");
call    0 returned 100%
        1:  108:	printf("\n   Prev numActions = %d\n", savedData.numActions);
call    0 returned 100%
        1:  109:	printf("\n   Current of numActions = %d\n", G.numActions);
call    0 returned 100%
        1:  110:	failure  += asserttrue (savedData.numActions+2,G.numActions);
call    0 returned 100%
        -:  111:	
        1:  112:	printf("\nTEST 4. Check if player 2's hand and deck cards remains the same\n");
call    0 returned 100%
        1:  113:	printf("\n   Check player 2's handCount\n");
call    0 returned 100%
        1:  114:	failure  += asserttrue (savedData.handCount[player2],G.handCount[player2]);
call    0 returned 100%
        1:  115:	printf("\n   Check player 2's deckCount\n");
call    0 returned 100%
        1:  116:	failure  += asserttrue (savedData.deckCount[player2],G.deckCount[player2]);
call    0 returned 100%
        -:  117:	
        1:  118:	printf("\nTEST 5. Check if kingdom and victory cards have any bugs\n");
call    0 returned 100%
        1:  119:	printf("\n   Checking kingdom cards' supply piles\n");
call    0 returned 100%
       11:  120:	for (i = 0; i < 10; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       10:  121:		failure  += asserttrue (savedData.supplyCount[k[i]], G.supplyCount[k[i]]);
call    0 returned 100%
        -:  122:	}
        1:  123:	printf("\n   Checking province card pile:\n");
call    0 returned 100%
        1:  124:	failure  += asserttrue (savedData.supplyCount[province], G.supplyCount[province]);
call    0 returned 100%
        1:  125:	printf("\n   Checking duchy card pile:\n");
call    0 returned 100%
        1:  126:	failure  += asserttrue (savedData.supplyCount[duchy], G.supplyCount[duchy]);
call    0 returned 100%
        1:  127:	printf("\n   Checking estate card pile:\n");
call    0 returned 100%
        1:  128:	failure  += asserttrue (savedData.supplyCount[estate], G.supplyCount[estate]);
call    0 returned 100%
        -:  129:	
        1:  130:    if (failure > 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  131:        printf("\nTEST FAILED\n");
call    0 never executed
    #####:  132:        printf("Count of failed tests: %d\n",failure);
call    0 never executed
        -:  133:    }
        -:  134:    else {
        1:  135:    	printf("\nPASSED ALL THE TESTS\n");
call    0 returned 100%
        1:  136:        printf("\nTEST SUCCESSFULLY COMPLETED\n\n");
call    0 returned 100%
        -:  137:    }
        1:  138:    printf("**********************************************\n");
call    0 returned 100%
        1:  139:	return 0;
        -:  140:}
File 'dominion.c'
Lines executed:27.00% of 563
Branches executed:27.58% of 417
Taken at least once:19.42% of 417
Calls executed:22.11% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:4
        -:    0:Programs:4
        -:    1:/*
        -:    2:Team 4: (ONID: kohy) Kaylie's dominion.c code
        -:    3:https://github.com/kaylieko/CS362-004-S2018/tree/kohy-assignment-3/projects/kohy/dominion
        -:    4:*/
        -:    5:
        -:    6:#include "dominion.h"
        -:    7:#include "dominion_helpers.h"
        -:    8:#include "rngs.h"
        -:    9:#include <stdio.h>
        -:   10:#include <math.h>
        -:   11:#include <stdlib.h>
        -:   12:
function compare called 120 returned 100% blocks executed 83%
      120:   13:int compare(const void* a, const void* b) {
      120:   14:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   15:    return 1;
      120:   16:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       32:   17:    return -1;
       88:   18:  return 0;
        -:   19:}
        -:   20:
function newGame called 0 returned 0% blocks executed 0%
    #####:   21:struct gameState* newGame() {
    #####:   22:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   23:  return g;
        -:   24:}
        -:   25:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   26:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   27:		  int k8, int k9, int k10) {
    #####:   28:  int* k = malloc(10 * sizeof(int));
    #####:   29:  k[0] = k1;
    #####:   30:  k[1] = k2;
    #####:   31:  k[2] = k3;
    #####:   32:  k[3] = k4;
    #####:   33:  k[4] = k5;
    #####:   34:  k[5] = k6;
    #####:   35:  k[6] = k7;
    #####:   36:  k[7] = k8;
    #####:   37:  k[8] = k9;
    #####:   38:  k[9] = k10;
    #####:   39:  return k;
        -:   40:}
        -:   41:
function initializeGame called 4 returned 100% blocks executed 88%
        4:   42:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   43:		   struct gameState *state) {
        -:   44:
        -:   45:  int i;
        -:   46:  int j;
        -:   47:  int it;			
        -:   48:  //set up random number generator
        4:   49:  SelectStream(1);
call    0 returned 100%
        4:   50:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   51:  
        -:   52:  //check number of players
        4:   53:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   54:    {
    #####:   55:      return -1;
        -:   56:    }
        -:   57:
        -:   58:  //set number of players
        4:   59:  state->numPlayers = numPlayers;
        -:   60:
        -:   61:  //check selected kingdom cards are different
       44:   62:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   63:    {
      440:   64:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   65:        {
      400:   66:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   67:	    {
    #####:   68:	      return -1;
        -:   69:	    }
        -:   70:        }
        -:   71:    }
        -:   72:
        -:   73:
        -:   74:  //initialize supply
        -:   75:  ///////////////////////////////
        -:   76:
        -:   77:  //set number of Curse cards
        4:   78:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   79:    {
        4:   80:      state->supplyCount[curse] = 10;
        -:   81:    }
    #####:   82:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   83:    {
    #####:   84:      state->supplyCount[curse] = 20;
        -:   85:    }
        -:   86:  else
        -:   87:    {
    #####:   88:      state->supplyCount[curse] = 30;
        -:   89:    }
        -:   90:
        -:   91:  //set number of Victory cards
        4:   92:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   93:    {
        4:   94:      state->supplyCount[estate] = 8;
        4:   95:      state->supplyCount[duchy] = 8;
        4:   96:      state->supplyCount[province] = 8;
        -:   97:    }
        -:   98:  else
        -:   99:    {
    #####:  100:      state->supplyCount[estate] = 12;
    #####:  101:      state->supplyCount[duchy] = 12;
    #####:  102:      state->supplyCount[province] = 12;
        -:  103:    }
        -:  104:
        -:  105:  //set number of Treasure cards
        4:  106:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        4:  107:  state->supplyCount[silver] = 40;
        4:  108:  state->supplyCount[gold] = 30;
        -:  109:
        -:  110:  //set number of Kingdom cards
       84:  111:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  112:    {
      660:  113:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  114:	{
      620:  115:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  116:	    {
        -:  117:	      //check if card is a 'Victory' Kingdom card
       40:  118:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  119:		{
       16:  120:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        8:  121:		    state->supplyCount[i] = 8; 
        -:  122:		  }
    #####:  123:		  else{ state->supplyCount[i] = 12; }
        -:  124:		}
        -:  125:	      else
        -:  126:		{
       32:  127:		  state->supplyCount[i] = 10;
        -:  128:		}
       40:  129:	      break;
        -:  130:	    }
        -:  131:	  else    //card is not in the set choosen for the game
        -:  132:	    {
      580:  133:	      state->supplyCount[i] = -1;
        -:  134:	    }
        -:  135:	}
        -:  136:
        -:  137:    }
        -:  138:
        -:  139:  ////////////////////////
        -:  140:  //supply intilization complete
        -:  141:
        -:  142:  //set player decks
       12:  143:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  144:    {
        8:  145:      state->deckCount[i] = 0;
       32:  146:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  147:	{
       24:  148:	  state->deck[i][j] = estate;
       24:  149:	  state->deckCount[i]++;
        -:  150:	}
       64:  151:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  152:	{
       56:  153:	  state->deck[i][j] = copper;
       56:  154:	  state->deckCount[i]++;		
        -:  155:	}
        -:  156:    }
        -:  157:
        -:  158:  //shuffle player decks
       12:  159:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  160:    {
        8:  161:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  162:	{
    #####:  163:	  return -1;
        -:  164:	}
        -:  165:    }
        -:  166:
        -:  167:  //draw player hands
       12:  168:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  169:    {  
        -:  170:      //initialize hand size to zero
        8:  171:      state->handCount[i] = 0;
        8:  172:      state->discardCount[i] = 0;
        -:  173:      //draw 5 cards
        -:  174:      // for (j = 0; j < 5; j++)
        -:  175:      //	{
        -:  176:      //	  drawCard(i, state);
        -:  177:      //	}
        -:  178:    }
        -:  179:  
        -:  180:  //set embargo tokens to 0 for all supply piles
      112:  181:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  182:    {
      108:  183:      state->embargoTokens[i] = 0;
        -:  184:    }
        -:  185:
        -:  186:  //initialize first player's turn
        4:  187:  state->outpostPlayed = 0;
        4:  188:  state->phase = 0;
        4:  189:  state->numActions = 1;
        4:  190:  state->numBuys = 1;
        4:  191:  state->playedCardCount = 0;
        4:  192:  state->whoseTurn = 0;
        4:  193:  state->handCount[state->whoseTurn] = 0;
        -:  194:  //int it; move to top
        -:  195:
        -:  196:  //Moved draw cards to here, only drawing at the start of a turn
       24:  197:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       20:  198:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  199:  }
        -:  200:
        4:  201:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  202:
        4:  203:  return 0;
        -:  204:}
        -:  205:
function shuffle called 9 returned 100% blocks executed 94%
        9:  206:int shuffle(int player, struct gameState *state) {
        -:  207: 
        -:  208:
        -:  209:  int newDeck[MAX_DECK];
        9:  210:  int newDeckPos = 0;
        -:  211:  int card;
        -:  212:  int i;
        -:  213:
        9:  214:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  215:    return -1;
        9:  216:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  217:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  218:
       99:  219:  while (state->deckCount[player] > 0) {
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
       81:  220:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
       81:  221:    newDeck[newDeckPos] = state->deck[player][card];
       81:  222:    newDeckPos++;
      263:  223:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
      182:  224:      state->deck[player][i] = state->deck[player][i+1];
        -:  225:    }
       81:  226:    state->deckCount[player]--;
        -:  227:  }
       90:  228:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
       81:  229:    state->deck[player][i] = newDeck[i];
       81:  230:    state->deckCount[player]++;
        -:  231:  }
        -:  232:
        9:  233:  return 0;
        -:  234:}
        -:  235:
function playCard called 0 returned 0% blocks executed 0%
    #####:  236:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  237:{	
        -:  238:  int card;
    #####:  239:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  240:
        -:  241:  //check if it is the right phase
    #####:  242:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  243:    {
    #####:  244:      return -1;
        -:  245:    }
        -:  246:	
        -:  247:  //check if player has enough actions
    #####:  248:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  249:    {
    #####:  250:      return -1;
        -:  251:    }
        -:  252:	
        -:  253:  //get card played
    #####:  254:  card = handCard(handPos, state);
call    0 never executed
        -:  255:	
        -:  256:  //check if selected card is an action
    #####:  257:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  258:    {
    #####:  259:      return -1;
        -:  260:    }
        -:  261:	
        -:  262:  //play card
    #####:  263:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  264:    {
    #####:  265:      return -1;
        -:  266:    }
        -:  267:	
        -:  268:  //reduce number of actions
    #####:  269:  state->numActions--;
        -:  270:
        -:  271:  //update coins (Treasure cards may be added with card draws)
    #####:  272:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  273:	
    #####:  274:  return 0;
        -:  275:}
        -:  276:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  277:int buyCard(int supplyPos, struct gameState *state) {
        -:  278:  int who;
        -:  279:  if (DEBUG){
        -:  280:    printf("Entering buyCard...\n");
        -:  281:  }
        -:  282:
        -:  283:  // I don't know what to do about the phase thing.
        -:  284:
    #####:  285:  who = state->whoseTurn;
        -:  286:
    #####:  287:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  288:    if (DEBUG)
        -:  289:      printf("You do not have any buys left\n");
    #####:  290:    return -1;
    #####:  291:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  292:    if (DEBUG)
        -:  293:      printf("There are not any of that type of card left\n");
    #####:  294:    return -1;
    #####:  295:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  296:    if (DEBUG) 
        -:  297:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  298:    return -1;
        -:  299:  } else {
    #####:  300:    state->phase=1;
        -:  301:    //state->supplyCount[supplyPos]--;
    #####:  302:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  303:  
    #####:  304:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  305:    state->numBuys--;
        -:  306:    if (DEBUG)
        -:  307:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  308:  }
        -:  309:
        -:  310:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  311:  //state->discardCount[who]++;
        -:  312:    
    #####:  313:  return 0;
        -:  314:}
        -:  315:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  316:int numHandCards(struct gameState *state) {
    #####:  317:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  318:}
        -:  319:
function handCard called 0 returned 0% blocks executed 0%
    #####:  320:int handCard(int handPos, struct gameState *state) {
    #####:  321:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  322:  return state->hand[currentPlayer][handPos];
        -:  323:}
        -:  324:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  325:int supplyCount(int card, struct gameState *state) {
    #####:  326:  return state->supplyCount[card];
        -:  327:}
        -:  328:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  329:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  330:  int i;
    #####:  331:  int count = 0;
        -:  332:
    #####:  333:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  344:    {
    #####:  345:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  346:    }
        -:  347:
    #####:  348:  return count;
        -:  349:}
        -:  350:
function whoseTurn called 4 returned 100% blocks executed 100%
        4:  351:int whoseTurn(struct gameState *state) {
        4:  352:  return state->whoseTurn;
        -:  353:}
        -:  354:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  355:int endTurn(struct gameState *state) {
        -:  356:  int k;
        -:  357:  int i;
    #####:  358:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  359:  
        -:  360:  //Discard hand
    #####:  361:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  362:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  363:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  364:  }
    #####:  365:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  366:    
        -:  367:  //Code for determining the player
    #####:  368:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  369:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  370:  }
        -:  371:  else{
    #####:  372:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  373:  }
        -:  374:
    #####:  375:  state->outpostPlayed = 0;
    #####:  376:  state->phase = 0;
    #####:  377:  state->numActions = 1;
    #####:  378:  state->coins = 0;
    #####:  379:  state->numBuys = 1;
    #####:  380:  state->playedCardCount = 0;
    #####:  381:  state->handCount[state->whoseTurn] = 0;
        -:  382:
        -:  383:  //int k; move to top
        -:  384:  //Next player draws hand
    #####:  385:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  386:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  387:  }
        -:  388:
        -:  389:  //Update money
    #####:  390:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  391:
    #####:  392:  return 0;
        -:  393:}
        -:  394:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  395:int isGameOver(struct gameState *state) {
        -:  396:  int i;
        -:  397:  int j;
        -:  398:	
        -:  399:  //if stack of Province cards is empty, the game ends
    #####:  400:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  401:    {
    #####:  402:      return 1;
        -:  403:    }
        -:  404:
        -:  405:  //if three supply pile are at 0, the game ends
    #####:  406:  j = 0;
    #####:  407:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  408:    {
    #####:  409:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  410:	{
    #####:  411:	  j++;
        -:  412:	}
        -:  413:    }
    #####:  414:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  415:    {
    #####:  416:      return 1;
        -:  417:    }
        -:  418:
    #####:  419:  return 0;
        -:  420:}
        -:  421:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  422:int scoreFor (int player, struct gameState *state) {
        -:  423:
        -:  424:  int i;
    #####:  425:  int score = 0;
        -:  426:  //score from hand
    #####:  427:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  428:    {
    #####:  429:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  430:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  431:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  432:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  433:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  434:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  435:    }
        -:  436:
        -:  437:  //score from discard
    #####:  438:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  439:    {
    #####:  440:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  441:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  442:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  443:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  444:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  445:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  446:    }
        -:  447:
        -:  448:  //score from deck
    #####:  449:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  450:    {
    #####:  451:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  452:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  453:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  454:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  455:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  456:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  457:    }
        -:  458:
    #####:  459:  return score;
        -:  460:}
        -:  461:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  462:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  463:  int i;	
        -:  464:  int j;
        -:  465:  int highScore;
        -:  466:  int currentPlayer;
        -:  467:
        -:  468:  //get score for each player
    #####:  469:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  470:    {
        -:  471:      //set unused player scores to -9999
    #####:  472:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  473:	{
    #####:  474:	  players[i] = -9999;
        -:  475:	}
        -:  476:      else
        -:  477:	{
    #####:  478:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  479:	}
        -:  480:    }
        -:  481:
        -:  482:  //find highest score
    #####:  483:  j = 0;
    #####:  484:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  485:    {
    #####:  486:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  487:	{
    #####:  488:	  j = i;
        -:  489:	}
        -:  490:    }
    #####:  491:  highScore = players[j];
        -:  492:
        -:  493:  //add 1 to players who had less turns
    #####:  494:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  495:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  496:    {
    #####:  497:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  498:	{
    #####:  499:	  players[i]++;
        -:  500:	}
        -:  501:    }
        -:  502:
        -:  503:  //find new highest score
    #####:  504:  j = 0;
    #####:  505:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  506:    {
    #####:  507:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  508:	{
    #####:  509:	  j = i;
        -:  510:	}
        -:  511:    }
    #####:  512:  highScore = players[j];
        -:  513:
        -:  514:  //set winners in array to 1 and rest to 0
    #####:  515:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  516:    {
    #####:  517:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  518:	{
    #####:  519:	  players[i] = 1;
        -:  520:	}
        -:  521:      else
        -:  522:	{
    #####:  523:	  players[i] = 0;
        -:  524:	}
        -:  525:    }
        -:  526:
    #####:  527:  return 0;
        -:  528:}
        -:  529:
function drawCard called 35 returned 100% blocks executed 38%
       35:  530:int drawCard(int player, struct gameState *state)
        -:  531:{	int count;
        -:  532:  int deckCounter;
       35:  533:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  534:    
        -:  535:    //Step 1 Shuffle the discard pile back into a deck
        -:  536:    int i;
        -:  537:    //Move discard to deck
    #####:  538:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  539:      state->deck[player][i] = state->discard[player][i];
    #####:  540:      state->discard[player][i] = -1;
        -:  541:    }
        -:  542:
    #####:  543:    state->deckCount[player] = state->discardCount[player];
    #####:  544:    state->discardCount[player] = 0;//Reset discard
        -:  545:
        -:  546:    //Shufffle the deck
    #####:  547:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  548:   
        -:  549:    if (DEBUG){//Debug statements
        -:  550:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  551:    }
        -:  552:    
    #####:  553:    state->discardCount[player] = 0;
        -:  554:
        -:  555:    //Step 2 Draw Card
    #####:  556:    count = state->handCount[player];//Get current player's hand count
        -:  557:    
        -:  558:    if (DEBUG){//Debug statements
        -:  559:      printf("Current hand count: %d\n", count);
        -:  560:    }
        -:  561:    
    #####:  562:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  563:
    #####:  564:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  565:      return -1;
        -:  566:
    #####:  567:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  568:    state->deckCount[player]--;
    #####:  569:    state->handCount[player]++;//Increment hand count
        -:  570:  }
        -:  571:
        -:  572:  else{
       35:  573:    int count = state->handCount[player];//Get current hand count for player
        -:  574:    int deckCounter;
        -:  575:    if (DEBUG){//Debug statements
        -:  576:      printf("Current hand count: %d\n", count);
        -:  577:    }
        -:  578:
       35:  579:    deckCounter = state->deckCount[player];//Create holder for the deck count
       35:  580:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       35:  581:    state->deckCount[player]--;
       35:  582:    state->handCount[player]++;//Increment hand count
        -:  583:  }
        -:  584:
       35:  585:  return 0;
        -:  586:}
        -:  587:
function getCost called 0 returned 0% blocks executed 0%
    #####:  588:int getCost(int cardNumber)
        -:  589:{
    #####:  590:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  591:    {
        -:  592:    case curse:
    #####:  593:      return 0;
        -:  594:    case estate:
    #####:  595:      return 2;
        -:  596:    case duchy:
    #####:  597:      return 5;
        -:  598:    case province:
    #####:  599:      return 8;
        -:  600:    case copper:
    #####:  601:      return 0;
        -:  602:    case silver:
    #####:  603:      return 3;
        -:  604:    case gold:
    #####:  605:      return 6;
        -:  606:    case adventurer:
    #####:  607:      return 6;
        -:  608:    case council_room:
    #####:  609:      return 5;
        -:  610:    case feast:
    #####:  611:      return 4;
        -:  612:    case gardens:
    #####:  613:      return 4;
        -:  614:    case mine:
    #####:  615:      return 5;
        -:  616:    case remodel:
    #####:  617:      return 4;
        -:  618:    case smithy:
    #####:  619:      return 4;
        -:  620:    case village:
    #####:  621:      return 3;
        -:  622:    case baron:
    #####:  623:      return 4;
        -:  624:    case great_hall:
    #####:  625:      return 3;
        -:  626:    case minion:
    #####:  627:      return 5;
        -:  628:    case steward:
    #####:  629:      return 3;
        -:  630:    case tribute:
    #####:  631:      return 5;
        -:  632:    case ambassador:
    #####:  633:      return 3;
        -:  634:    case cutpurse:
    #####:  635:      return 4;
        -:  636:    case embargo: 
    #####:  637:      return 2;
        -:  638:    case outpost:
    #####:  639:      return 5;
        -:  640:    case salvager:
    #####:  641:      return 4;
        -:  642:    case sea_hag:
    #####:  643:      return 4;
        -:  644:    case treasure_map:
    #####:  645:      return 4;
        -:  646:    }
        -:  647:	
    #####:  648:  return -1;
        -:  649:}
        -:  650:
        -:  651://Assignment #2, Refactor 'Adventurer'
function adventurerEffect called 1 returned 100% blocks executed 100%
        1:  652:int adventurerEffect(int currentPlayer, struct gameState *state){
        -:  653:  int cardDrawn;
        1:  654:  int drawntreasure = 0;
        1:  655:  int z = 0;
        -:  656:  int temphand[MAX_HAND];
        7:  657:  while(drawntreasure < 2) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  658:    //if the deck is empty we need to shuffle discard and add to deck
        -:  659:    //*Introduce a Bug: Instead of shuffling discard empty deck, this will result shuffle the deck with 1 or 0 card
        5:  660:    if (state->deckCount[currentPlayer] < 2) {
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        1:  661:      shuffle(currentPlayer, state);
call    0 returned 100%
        -:  662:    }
        5:  663:    drawCard(currentPlayer, state);
call    0 returned 100%
        5:  664:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
        5:  665:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        2:  666:      drawntreasure++;
        -:  667:    else{
        3:  668:      temphand[z] = cardDrawn;
        3:  669:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        3:  670:      z++;
        -:  671:    }
        -:  672:  }
        5:  673:  while(z - 1 >= 0) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3:  674:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
        3:  675:    z = z - 1;
        -:  676:  }
        1:  677:  return 0;
        -:  678:}
        -:  679:
        -:  680:
        -:  681://Assignment #2, Refactor 'Smithy'
function smithyEffect called 1 returned 100% blocks executed 100%
        1:  682:int smithyEffect(int currentPlayer, struct gameState *state, int handPos)
        -:  683:{
        -:  684:  int i;
        -:  685:  //+3 cards
        -:  686:  //*Introduce a Bug: Draw +4 cards instead of +3
        5:  687:  for (i = 0; i < 4; i++) {
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        4:  688:    drawCard(currentPlayer, state);
call    0 returned 100%
        -:  689:  }  
        -:  690:  //discard card from hand
        1:  691:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  692:  return 0;
        -:  693:}
        -:  694:
        -:  695:
        -:  696://Assignment #2, Refactor 'Counsil_Room'
function counsil_RoomEffect called 1 returned 100% blocks executed 100%
        1:  697:int counsil_RoomEffect(int currentPlayer, struct gameState *state, int handPos)
        -:  698:{
        -:  699:  int i;
        -:  700:
        -:  701:  //+4 Cards
        5:  702:  for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  703:  {
        4:  704:    drawCard(currentPlayer, state);
call    0 returned 100%
        -:  705:  }   
        -:  706:
        -:  707:  //Buy +1
        1:  708:  state->numBuys++;
        -:  709:
        -:  710:  //Each other player draws a card
        3:  711:  for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  712:  {
        2:  713:    if ( i != currentPlayer )
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  714:    {
        1:  715:      drawCard(i, state);
call    0 returned 100%
        -:  716:    }
        -:  717:  }     
        -:  718:  //put played card in played card pile
        -:  719:  //*Introduce a Bug: Trash a card from hand instead of discard
        1:  720:  discardCard(handPos, currentPlayer, state, 1);      
call    0 returned 100%
        1:  721:  return 0;
        -:  722:}
        -:  723:
        -:  724:
        -:  725://Assignment #2, Refactor 'Village'
function villageEffect called 1 returned 100% blocks executed 100%
        1:  726:int villageEffect(int currentPlayer, struct gameState *state, int handPos)
        -:  727:{
        -:  728:  //+1 Card
        1:  729:  drawCard(currentPlayer, state); 
call    0 returned 100%
        -:  730:
        -:  731:  //+2 Actions
        1:  732:  state->numActions = state->numActions + 2; 
        -:  733:
        -:  734:  //discard played card from hand
        -:  735:  
        1:  736:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  737:  return 0;
        -:  738:}
        -:  739:
        -:  740:
        -:  741://Assignment #2, Refactor 'Great_Hall'
function great_HallEffect called 0 returned 0% blocks executed 0%
    #####:  742:int great_HallEffect(int currentPlayer, struct gameState *state, int handPos){
        -:  743:  //+1 Card
    #####:  744:  drawCard(currentPlayer, state); 
call    0 never executed
        -:  745:
        -:  746:  //+1 Actions
        -:  747:  //*Introduce a Bug: gain +2 actions instead of +1
    #####:  748:  state->numActions = state->numActions + 2;     
        -:  749:
        -:  750:  //discard card from hand
    #####:  751:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  752:  return 0;
        -:  753:}
        -:  754:
        -:  755:
function cardEffect called 4 returned 100% blocks executed 6%
        4:  756:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  757:{
        -:  758:  int i;
        -:  759:  int j;
        -:  760:  int k;
        -:  761:  int x;
        -:  762:  int index;
        4:  763:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        4:  764:  int nextPlayer = currentPlayer + 1;
        -:  765:
        4:  766:  int tributeRevealedCards[2] = {-1, -1};
        -:  767:  int temphand[MAX_HAND];// moved above the if statement
        -:  768:  //int drawntreasure=0; //moved into adventurerEffect function
        -:  769:  //int cardDrawn;       //moved into adventurerEffect function
        -:  770:  //int z = 0;           //moved into adventurerEffect function
        4:  771:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  772:    nextPlayer = 0;
        -:  773:  }
        -:  774:  
        -:  775:	
        -:  776:  //uses switch to select card and perform actions
        4:  777:  switch( card ) 
branch  0 taken 25%
branch  1 taken 25%
branch  2 taken 25%
branch  3 taken 25%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  778:  {
        -:  779:    case adventurer:
        -:  780:      //call the adventurer card effect function
        1:  781:      adventurerEffect(currentPlayer, state);
call    0 returned 100%
        1:  782:      return 0;
        -:  783:		
        -:  784:    case smithy:
        -:  785:      //call the smithy card effect function
        1:  786:      smithyEffect(currentPlayer, state, handPos);
call    0 returned 100%
        1:  787:      return 0;
        -:  788:
        -:  789:    case council_room:
        -:  790:      //call the counsil_room card effect function
        1:  791:      counsil_RoomEffect(currentPlayer, state, handPos);
call    0 returned 100%
        1:  792:      return 0;
        -:  793:      
        -:  794:    case village:
        -:  795:      //call the village card effect function
        1:  796:      villageEffect (currentPlayer, state, handPos);
call    0 returned 100%
        1:  797:      return 0;  
        -:  798:			
        -:  799:    case great_hall:
        -:  800:      //call the great_hall card effect function
    #####:  801:      great_HallEffect (currentPlayer, state, handPos);
call    0 never executed
    #####:  802:      return 0;
        -:  803:
        -:  804:    case feast:
        -:  805:      //gain card with cost up to 5
        -:  806:      //Backup hand
    #####:  807:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  808:      	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  809:      	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  810:      }
        -:  811:      //Backup hand
        -:  812:
        -:  813:      //Update Coins for Buy
    #####:  814:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  815:      x = 1;//Condition to loop on
    #####:  816:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  817:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  818:	  if (DEBUG)
        -:  819:	    printf("None of that card left, sorry!\n");
        -:  820:
        -:  821:	  if (DEBUG){
        -:  822:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  823:	  }
        -:  824:	}
    #####:  825:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  826:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  827:
        -:  828:	  if (DEBUG){
        -:  829:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  830:	  }
        -:  831:	}
        -:  832:	else{
        -:  833:
        -:  834:	  if (DEBUG){
        -:  835:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  836:	  }
        -:  837:
    #####:  838:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  839:	  x = 0;//No more buying cards
        -:  840:
        -:  841:	  if (DEBUG){
        -:  842:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  843:	  }
        -:  844:
        -:  845:	}
        -:  846:      }     
        -:  847:
        -:  848:      //Reset Hand
    #####:  849:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  850:	state->hand[currentPlayer][i] = temphand[i];
    #####:  851:	temphand[i] = -1;
        -:  852:      }
        -:  853:      //Reset Hand
        -:  854:      			
    #####:  855:      return 0;
        -:  856:			
        -:  857:    case gardens:
    #####:  858:      return -1;
        -:  859:			
        -:  860:    case mine:
    #####:  861:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  862:
    #####:  863:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  864:	{
    #####:  865:	  return -1;
        -:  866:	}
        -:  867:		
    #####:  868:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  869:	{
    #####:  870:	  return -1;
        -:  871:	}
        -:  872:
    #####:  873:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  874:	{
    #####:  875:	  return -1;
        -:  876:	}
        -:  877:
    #####:  878:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  879:
        -:  880:      //discard card from hand
    #####:  881:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  882:
        -:  883:      //discard trashed card
    #####:  884:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  885:	{
    #####:  886:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  887:	    {
    #####:  888:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  889:	      break;
        -:  890:	    }
        -:  891:	}
        -:  892:			
    #####:  893:      return 0;
        -:  894:			
        -:  895:    case remodel:
    #####:  896:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  897:
    #####:  898:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  899:	{
    #####:  900:	  return -1;
        -:  901:	}
        -:  902:
    #####:  903:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  904:
        -:  905:      //discard card from hand
    #####:  906:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  907:
        -:  908:      //discard trashed card
    #####:  909:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  910:	{
    #####:  911:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  912:	    {
    #####:  913:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  914:	      break;
        -:  915:	    }
        -:  916:	}
        -:  917:
        -:  918:
    #####:  919:      return 0;
        -:  920:		
        -:  921:    
        -:  922:		
        -:  923:    
        -:  924:		
        -:  925:    case baron:
    #####:  926:      state->numBuys++;//Increase buys by 1!
    #####:  927:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  928:	int p = 0;//Iterator for hand!
    #####:  929:	int card_not_discarded = 1;//Flag for discard set!
    #####:  930:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  931:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  932:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  933:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  934:	    state->discardCount[currentPlayer]++;
    #####:  935:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  936:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  937:	    }
    #####:  938:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  939:	    state->handCount[currentPlayer]--;
    #####:  940:	    card_not_discarded = 0;//Exit the loop
        -:  941:	  }
    #####:  942:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  943:	    if(DEBUG) {
        -:  944:	      printf("No estate cards in your hand, invalid choice\n");
        -:  945:	      printf("Must gain an estate if there are any\n");
        -:  946:	    }
    #####:  947:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  948:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  949:	      state->supplyCount[estate]--;//Decrement estates
    #####:  950:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  951:		isGameOver(state);
call    0 never executed
        -:  952:	      }
        -:  953:	    }
    #####:  954:	    card_not_discarded = 0;//Exit the loop
        -:  955:	  }
        -:  956:			    
        -:  957:	  else{
    #####:  958:	    p++;//Next card
        -:  959:	  }
        -:  960:	}
        -:  961:      }
        -:  962:			    
        -:  963:      else{
    #####:  964:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  965:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  966:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  967:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  968:	    isGameOver(state);
call    0 never executed
        -:  969:	  }
        -:  970:	}
        -:  971:      }
        -:  972:	    
        -:  973:      
    #####:  974:      return 0;
        -:  975:		
        -:  976:    
        -:  977:		
        -:  978:    case minion:
        -:  979:      //+1 action
    #####:  980:      state->numActions++;
        -:  981:			
        -:  982:      //discard card from hand
    #####:  983:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  984:			
    #####:  985:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  986:	{
    #####:  987:	  state->coins = state->coins + 2;
        -:  988:	}
        -:  989:			
    #####:  990:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  991:	{
        -:  992:	  //discard hand
    #####:  993:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  994:	    {
    #####:  995:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  996:	    }
        -:  997:				
        -:  998:	  //draw 4
    #####:  999:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1000:	    {
    #####: 1001:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1002:	    }
        -: 1003:				
        -: 1004:	  //other players discard hand and redraw if hand size > 4
    #####: 1005:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1006:	    {
    #####: 1007:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1008:		{
    #####: 1009:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1010:		    {
        -: 1011:		      //discard hand
    #####: 1012:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1013:			{
    #####: 1014:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1015:			}
        -: 1016:							
        -: 1017:		      //draw 4
    #####: 1018:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1019:			{
    #####: 1020:			  drawCard(i, state);
call    0 never executed
        -: 1021:			}
        -: 1022:		    }
        -: 1023:		}
        -: 1024:	    }
        -: 1025:				
        -: 1026:	}
    #####: 1027:      return 0;
        -: 1028:		
        -: 1029:    case steward:
    #####: 1030:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1031:	{
        -: 1032:	  //+2 cards
    #####: 1033:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1034:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1035:	}
    #####: 1036:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1037:	{
        -: 1038:	  //+2 coins
    #####: 1039:	  state->coins = state->coins + 2;
        -: 1040:	}
        -: 1041:      else
        -: 1042:	{
        -: 1043:	  //trash 2 cards in hand
    #####: 1044:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1045:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1046:	}
        -: 1047:			
        -: 1048:      //discard card from hand
    #####: 1049:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1050:      return 0;
        -: 1051:		
        -: 1052:    case tribute:
    #####: 1053:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1054:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1055:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1056:	  state->deckCount[nextPlayer]--;
        -: 1057:	}
    #####: 1058:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1059:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1060:	  state->discardCount[nextPlayer]--;
        -: 1061:	}
        -: 1062:	else{
        -: 1063:	  //No Card to Reveal
        -: 1064:	  if (DEBUG){
        -: 1065:	    printf("No cards to reveal\n");
        -: 1066:	  }
        -: 1067:	}
        -: 1068:      }
        -: 1069:	    
        -: 1070:      else{
    #####: 1071:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1072:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1073:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1074:	    state->deckCount[nextPlayer]++;
    #####: 1075:	    state->discard[nextPlayer][i] = -1;
    #####: 1076:	    state->discardCount[nextPlayer]--;
        -: 1077:	  }
        -: 1078:			    
    #####: 1079:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1080:	} 
    #####: 1081:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1082:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1083:	state->deckCount[nextPlayer]--;
    #####: 1084:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1085:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1086:	state->deckCount[nextPlayer]--;
        -: 1087:      }    
        -: 1088:		       
    #####: 1089:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1090:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1091:	state->playedCardCount++;
    #####: 1092:	tributeRevealedCards[1] = -1;
        -: 1093:      }
        -: 1094:
    #####: 1095:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1096:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1097:	  state->coins += 2;
        -: 1098:	}
        -: 1099:		    
    #####: 1100:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1101:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1102:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1103:	}
        -: 1104:	else{//Action Card
    #####: 1105:	  state->numActions = state->numActions + 2;
        -: 1106:	}
        -: 1107:      }
        -: 1108:	    
    #####: 1109:      return 0;
        -: 1110:		
        -: 1111:    case ambassador:
    #####: 1112:      j = 0;		//used to check if player has enough cards to discard
        -: 1113:
    #####: 1114:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1115:	{
    #####: 1116:	  return -1;				
        -: 1117:	}
        -: 1118:
    #####: 1119:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1120:	{
    #####: 1121:	  return -1;
        -: 1122:	}
        -: 1123:
    #####: 1124:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1125:	{
    #####: 1126:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1127:	    {
    #####: 1128:	      j++;
        -: 1129:	    }
        -: 1130:	}
    #####: 1131:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1132:	{
    #####: 1133:	  return -1;				
        -: 1134:	}
        -: 1135:
        -: 1136:      if (DEBUG) 
        -: 1137:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1138:
        -: 1139:      //increase supply count for choosen card by amount being discarded
    #####: 1140:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1141:			
        -: 1142:      //each other player gains a copy of revealed card
    #####: 1143:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1144:	{
    #####: 1145:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1146:	    {
    #####: 1147:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1148:	    }
        -: 1149:	}
        -: 1150:
        -: 1151:      //discard played card from hand
    #####: 1152:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1153:
        -: 1154:      //trash copies of cards returned to supply
    #####: 1155:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1156:	{
    #####: 1157:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1158:	    {
    #####: 1159:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1160:		{
    #####: 1161:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1162:		  break;
        -: 1163:		}
        -: 1164:	    }
        -: 1165:	}			
        -: 1166:
    #####: 1167:      return 0;
        -: 1168:		
        -: 1169:    case cutpurse:
        -: 1170:
    #####: 1171:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1172:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1173:	{
    #####: 1174:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1175:	    {
    #####: 1176:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1177:		{
    #####: 1178:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1179:		    {
    #####: 1180:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1181:		      break;
        -: 1182:		    }
    #####: 1183:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1184:		    {
    #####: 1185:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1186:			{
        -: 1187:			  if (DEBUG)
        -: 1188:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1189:			}	
    #####: 1190:		      break;
        -: 1191:		    }		
        -: 1192:		}
        -: 1193:					
        -: 1194:	    }
        -: 1195:				
        -: 1196:	}				
        -: 1197:
        -: 1198:      //discard played card from hand
    #####: 1199:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1200:
    #####: 1201:      return 0;
        -: 1202:
        -: 1203:		
        -: 1204:    case embargo: 
        -: 1205:      //+2 Coins
    #####: 1206:      state->coins = state->coins + 2;
        -: 1207:			
        -: 1208:      //see if selected pile is in play
    #####: 1209:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1210:	{
    #####: 1211:	  return -1;
        -: 1212:	}
        -: 1213:			
        -: 1214:      //add embargo token to selected supply pile
    #####: 1215:      state->embargoTokens[choice1]++;
        -: 1216:			
        -: 1217:      //trash card
    #####: 1218:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1219:      return 0;
        -: 1220:		
        -: 1221:    case outpost:
        -: 1222:      //set outpost flag
    #####: 1223:      state->outpostPlayed++;
        -: 1224:			
        -: 1225:      //discard card
    #####: 1226:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1227:      return 0;
        -: 1228:		
        -: 1229:    case salvager:
        -: 1230:      //+1 buy
    #####: 1231:      state->numBuys++;
        -: 1232:			
    #####: 1233:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1234:	{
        -: 1235:	  //gain coins equal to trashed card
    #####: 1236:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1237:	  //trash card
    #####: 1238:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1239:	}
        -: 1240:			
        -: 1241:      //discard card
    #####: 1242:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1243:      return 0;
        -: 1244:		
        -: 1245:    case sea_hag:
    #####: 1246:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1247:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1248:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1249:	  state->discardCount[i]++;
    #####: 1250:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1251:	}
        -: 1252:      }
    #####: 1253:      return 0;
        -: 1254:		
        -: 1255:    case treasure_map:
        -: 1256:      //search hand for another treasure_map
    #####: 1257:      index = -1;
    #####: 1258:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1259:	{
    #####: 1260:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1261:	    {
    #####: 1262:	      index = i;
    #####: 1263:	      break;
        -: 1264:	    }
        -: 1265:	}
    #####: 1266:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1267:	{
        -: 1268:	  //trash both treasure cards
    #####: 1269:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1270:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1271:
        -: 1272:	  //gain 4 Gold cards
    #####: 1273:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1274:	    {
    #####: 1275:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1276:	    }
        -: 1277:				
        -: 1278:	  //return success
    #####: 1279:	  return 1;
        -: 1280:	}
        -: 1281:			
        -: 1282:      //no second treasure_map found in hand
    #####: 1283:      return -1;
        -: 1284:    }
        -: 1285:	
    #####: 1286:  return -1;
        -: 1287:}
        -: 1288:
function discardCard called 3 returned 100% blocks executed 78%
        3: 1289:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1290:{
        -: 1291:	
        -: 1292:  //if card is not trashed, added to Played pile 
        3: 1293:  if (trashFlag < 1)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -: 1294:    {
        -: 1295:      //add card to played pile
        2: 1296:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        2: 1297:      state->playedCardCount++;
        -: 1298:    }
        -: 1299:	
        -: 1300:  //set played card to -1
        3: 1301:  state->hand[currentPlayer][handPos] = -1;
        -: 1302:	
        -: 1303:  //remove card from player's hand
        3: 1304:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1305:    {
        -: 1306:      //reduce number of cards in hand
    #####: 1307:      state->handCount[currentPlayer]--;
        -: 1308:    }
        3: 1309:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1310:    {
        -: 1311:      //reduce number of cards in hand
    #####: 1312:      state->handCount[currentPlayer]--;
        -: 1313:    }
        -: 1314:  else 	
        -: 1315:    {
        -: 1316:      //replace discarded card with last card in hand
        3: 1317:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1318:      //set last card to -1
        3: 1319:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1320:      //reduce number of cards in hand
        3: 1321:      state->handCount[currentPlayer]--;
        -: 1322:    }
        -: 1323:	
        3: 1324:  return 0;
        -: 1325:}
        -: 1326:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1327:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1328:{
        -: 1329:  //Note: supplyPos is enum of choosen card
        -: 1330:	
        -: 1331:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1332:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1333:    {
    #####: 1334:      return -1;
        -: 1335:    }
        -: 1336:	
        -: 1337:  //added card for [whoseTurn] current player:
        -: 1338:  // toFlag = 0 : add to discard
        -: 1339:  // toFlag = 1 : add to deck
        -: 1340:  // toFlag = 2 : add to hand
        -: 1341:
    #####: 1342:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1343:    {
    #####: 1344:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1345:      state->deckCount[player]++;
        -: 1346:    }
    #####: 1347:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1348:    {
    #####: 1349:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1350:      state->handCount[player]++;
        -: 1351:    }
        -: 1352:  else
        -: 1353:    {
    #####: 1354:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1355:      state->discardCount[player]++;
        -: 1356:    }
        -: 1357:	
        -: 1358:  //decrease number in supply pile
    #####: 1359:  state->supplyCount[supplyPos]--;
        -: 1360:	 
    #####: 1361:  return 0;
        -: 1362:}
        -: 1363:
function updateCoins called 4 returned 100% blocks executed 82%
        4: 1364:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1365:{
        -: 1366:  int i;
        -: 1367:	
        -: 1368:  //reset coin count
        4: 1369:  state->coins = 0;
        -: 1370:
        -: 1371:  //add coins for each Treasure card in player's hand
       24: 1372:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1373:    {
       20: 1374:      if (state->hand[player][i] == copper)
branch  0 taken 70% (fallthrough)
branch  1 taken 30%
        -: 1375:	{
       14: 1376:	  state->coins += 1;
        -: 1377:	}
        6: 1378:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1379:	{
    #####: 1380:	  state->coins += 2;
        -: 1381:	}
        6: 1382:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1383:	{
    #####: 1384:	  state->coins += 3;
        -: 1385:	}	
        -: 1386:    }	
        -: 1387:
        -: 1388:  //add bonus
        4: 1389:  state->coins += bonus;
        -: 1390:
        4: 1391:  return 0;
        -: 1392:}
        -: 1393:
        -: 1394:
        -: 1395:
        -: 1396://end of dominion.c
