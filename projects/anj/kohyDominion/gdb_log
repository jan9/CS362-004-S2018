flip1 ~/CS362/CS362-004-S2018/projects/anj/kohyDominion 224% gdb cardtest2
GNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-100.el7
Copyright (C) 2013 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-redhat-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /nfs/stak/users/anj/CS362/CS362-004-S2018/projects/anj/kohyDominion/cardtest2...done.
(gdb) start
Temporary breakpoint 1 at 0x401164: file cardtest2.c, line 41.
Starting program: /nfs/stak/users/anj/CS362/CS362-004-S2018/projects/anj/kohyDominion/cardtest2 

Temporary breakpoint 1, main () at cardtest2.c:41
41		int failure = 0;
Missing separate debuginfos, use: debuginfo-install glibc-2.17-196.el7_4.2.x86_64
(gdb) next
45		int handpos = 0;
(gdb) 
46		int choice1 = 0;
(gdb) 
47		int choice2 = 0;
(gdb) 
48		int choice3 = 0;
(gdb) 
49		int bonus = 0;
(gdb) 
51		int numPlayer = 2;
(gdb) 
52		int player1 = 0;
(gdb) 
53		int player2 = 1;
(gdb) 
55		int k[10] = {adventurer, council_room, feast, gardens, mine,
(gdb) 
59		int seed = 5656;
(gdb) 
61		printf("**********************************************\n");
(gdb) 
**********************************************
62	    printf("Testing -> Smithy Card\n");
(gdb) 
Testing -> Smithy Card
63	    memset(&G, 23, sizeof(struct gameState));   		 // clear the game state
(gdb) 
64	    initializeGame(numPlayer, k, seed, &G);   // initialize a new game
(gdb) 
65	    memcpy(&savedData, &G, sizeof(struct gameState));
(gdb) 
69		G.hand[player1][0] = smithy;	// first card on hand will be smithy cards
(gdb) 
70		for (i = 1; i < G.handCount[player1]; i++) 
(gdb) 
73			G.hand[player1][i] = rand() % 27;
(gdb) 
70		for (i = 1; i < G.handCount[player1]; i++) 
(gdb) 
73			G.hand[player1][i] = rand() % 27;
(gdb) 
70		for (i = 1; i < G.handCount[player1]; i++) 
(gdb) 
73			G.hand[player1][i] = rand() % 27;
(gdb) 
70		for (i = 1; i < G.handCount[player1]; i++) 
(gdb) 
73			G.hand[player1][i] = rand() % 27;
(gdb) 
70		for (i = 1; i < G.handCount[player1]; i++) 
(gdb) 
76		printf("\n< P1 Data BEFORE Smithy Card is Played >\n");
(gdb) 

< P1 Data BEFORE Smithy Card is Played >
78		printf("Player 1 has %d cards in hand.\n", savedData.handCount[player1]);
(gdb) 
Player 1 has 5 cards in hand.
81		printf("Player 1 has %d cards in deck.\n", savedData.deckCount[player1]);
(gdb) 
Player 1 has 5 cards in deck.
84		printf("Player 1 has %d cards in discard pile.\n", savedData.discardCount[player1]);
(gdb) 
Player 1 has 0 cards in discard pile.
87		cardEffect(smithy, choice1, choice2, choice3, &G, handpos, &bonus);
(gdb) 
89		printf("\n< P1 Data AFTER Smithy Card is Played >\n");
(gdb) 

< P1 Data AFTER Smithy Card is Played >
91		printf("Player 1 has %d cards in hand.\n", G.handCount[player1]);
(gdb) 
Player 1 has 8 cards in hand.
94		printf("Player 1 has %d cards in deck.\n", G.deckCount[player1]);
(gdb) 
Player 1 has 1 cards in deck.
97		printf("Player 1 has %d cards in discard pile.\n", G.discardCount[player1]);
(gdb) 
Player 1 has 0 cards in discard pile.
100		printf("\n***************** RESULTS *********************\n");
(gdb) 

***************** RESULTS *********************
102		printf("\nTEST 1. Check to see whether or not player 1 got 3 extra cards \n");
(gdb) 

TEST 1. Check to see whether or not player 1 got 3 extra cards 
103		printf("\n   Checking to see if player1 got 3 cards\n");
(gdb) 

   Checking to see if player1 got 3 cards
104		failure  += asserttrue (savedData.handCount[player1]+2, G.handCount[player1]);
(gdb) 

	Expected value: 7, actual value: 8

	FAIL (assertion false)
106		printf("\n   Checking to see if the 3 cards were from current player's deck?\n");
(gdb) 

   Checking to see if the 3 cards were from current player's deck?
107		failure  += asserttrue (savedData.deckCount[player1]-3, G.deckCount[player1]);
(gdb) 

	Expected value: 2, actual value: 1

	FAIL (assertion false)
109		printf("\nTEST 2. Check to see discardCard() function within Smithy Card's code worked\n");
(gdb) 

TEST 2. Check to see discardCard() function within Smithy Card's code worked
111		printf("\n   Checking... \n");
(gdb) 

   Checking... 
112		printf("\n   Prev # of discard count = %d\n", savedData.playedCardCount);
(gdb) 

   Prev # of discard count = 0
113		printf("\n   Current # of discard count = %d\n", G.playedCardCount);
(gdb) 

   Current # of discard count = 1
114		failure  += asserttrue (savedData.playedCardCount+1,G.playedCardCount);
(gdb) 

	Expected value: 1, actual value: 1

	PASS (assertion true)
116		printf("\nTEST 3. Check to see if player 2's handCount and deckCount remains the same\n");
(gdb) 

TEST 3. Check to see if player 2's handCount and deckCount remains the same
117		printf("\n   Checking player 2's handCount\n");
(gdb) 

   Checking player 2's handCount
118		failure  += asserttrue (savedData.handCount[player2],G.handCount[player2]);
(gdb) 

	Expected value: 0, actual value: 0

	PASS (assertion true)
119		printf("\n   Checking player 2's  deckCount\n");
(gdb) 

   Checking player 2's  deckCount
120		failure  += asserttrue (savedData.deckCount[player2],G.deckCount[player2]);
(gdb) 

	Expected value: 10, actual value: 10

	PASS (assertion true)
122		printf("\nTEST 4. Check if kingdom and victory cards have any bugs\n");
(gdb) 

TEST 4. Check if kingdom and victory cards have any bugs
123		printf("\n   Checking kingdom cards' supply piles\n");
(gdb) 

   Checking kingdom cards' supply piles
124		for (i = 0; i < 10; i++) {
(gdb) 
125			failure  += asserttrue (savedData.supplyCount[k[i]], G.supplyCount[k[i]]);
(gdb) 

	Expected value: 10, actual value: 10

	PASS (assertion true)
124		for (i = 0; i < 10; i++) {
(gdb) 
125			failure  += asserttrue (savedData.supplyCount[k[i]], G.supplyCount[k[i]]);
(gdb) 

	Expected value: 10, actual value: 10

	PASS (assertion true)
124		for (i = 0; i < 10; i++) {
(gdb) 
125			failure  += asserttrue (savedData.supplyCount[k[i]], G.supplyCount[k[i]]);
(gdb) 

	Expected value: 10, actual value: 10

	PASS (assertion true)
124		for (i = 0; i < 10; i++) {
(gdb) 
125			failure  += asserttrue (savedData.supplyCount[k[i]], G.supplyCount[k[i]]);
(gdb) 

	Expected value: 8, actual value: 8

	PASS (assertion true)
124		for (i = 0; i < 10; i++) {
(gdb) 
125			failure  += asserttrue (savedData.supplyCount[k[i]], G.supplyCount[k[i]]);
(gdb) 

	Expected value: 10, actual value: 10

	PASS (assertion true)
124		for (i = 0; i < 10; i++) {
(gdb) 
125			failure  += asserttrue (savedData.supplyCount[k[i]], G.supplyCount[k[i]]);
(gdb) 

	Expected value: 10, actual value: 10

	PASS (assertion true)
124		for (i = 0; i < 10; i++) {
(gdb) 
125			failure  += asserttrue (savedData.supplyCount[k[i]], G.supplyCount[k[i]]);
(gdb) 

	Expected value: 10, actual value: 10

	PASS (assertion true)
124		for (i = 0; i < 10; i++) {
(gdb) 
125			failure  += asserttrue (savedData.supplyCount[k[i]], G.supplyCount[k[i]]);
(gdb) 

	Expected value: 10, actual value: 10

	PASS (assertion true)
124		for (i = 0; i < 10; i++) {
(gdb) 
125			failure  += asserttrue (savedData.supplyCount[k[i]], G.supplyCount[k[i]]);
(gdb) 

	Expected value: 10, actual value: 10

	PASS (assertion true)
124		for (i = 0; i < 10; i++) {
(gdb) 
125			failure  += asserttrue (savedData.supplyCount[k[i]], G.supplyCount[k[i]]);
(gdb) 

	Expected value: 8, actual value: 8

	PASS (assertion true)
124		for (i = 0; i < 10; i++) {
(gdb) 
127		printf("\n   Checking province card pile:\n");
(gdb) 

   Checking province card pile:
128		failure  += asserttrue (savedData.supplyCount[province], G.supplyCount[province]);
(gdb) 

	Expected value: 8, actual value: 8

	PASS (assertion true)
129		printf("\n   Checking duchy card pile:\n");
(gdb) 

   Checking duchy card pile:
130		failure  += asserttrue (savedData.supplyCount[duchy], G.supplyCount[duchy]);
(gdb) 

	Expected value: 8, actual value: 8

	PASS (assertion true)
131		printf("\n   Checking estate card pile:\n");
(gdb) 

   Checking estate card pile:
132		failure  += asserttrue (savedData.supplyCount[estate], G.supplyCount[estate]);
(gdb) 

	Expected value: 8, actual value: 8

	PASS (assertion true)
134	    if (failure > 0) {
(gdb) 
135	        printf("\nTEST FAILED\n");
(gdb) 

TEST FAILED
136	        printf("Count of failed tests: %d\n",failure);
(gdb) 
Count of failed tests: 2
142	    printf("**********************************************\n");
(gdb) 
**********************************************
143		return 0;
(gdb) 
144	}(gdb) 
0x00007ffff7737c05 in __libc_start_main () from /lib64/libc.so.6
(gdb) 
Single stepping until exit from function __libc_start_main,
which has no line number information.
[Inferior 1 (process 10679) exited normally]
(gdb) 
The program is not being run.
(gdb) 
The program is not being run.
(gdb) quit
flip1 ~/CS362/CS362-004-S2018/projects/anj/kohyDominion 225% gdb cardtest3
GNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-100.el7
Copyright (C) 2013 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-redhat-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /nfs/stak/users/anj/CS362/CS362-004-S2018/projects/anj/kohyDominion/cardtest3...done.
(gdb) start
Temporary breakpoint 1 at 0x401124: file cardtest3.c, line 41.
Starting program: /nfs/stak/users/anj/CS362/CS362-004-S2018/projects/anj/kohyDominion/cardtest3 

Temporary breakpoint 1, main () at cardtest3.c:41
41		int failure = 0;
Missing separate debuginfos, use: debuginfo-install glibc-2.17-196.el7_4.2.x86_64
(gdb) 
(gdb) next
45		int handpos = 0;
(gdb) 
46		int choice1 = 0;
(gdb) 
47		int choice2 = 0;
(gdb) 
48		int choice3 = 0;
(gdb) 
49		int bonus = 0;
(gdb) 
51		int numPlayer = 2;
(gdb) 
52		int player1 = 0;
(gdb) 
53		int player2 = 1;
(gdb) 
55		int k[10] = {adventurer, council_room, feast, gardens, mine,
(gdb) 
59		int seed = 5656;
(gdb) 
61		printf("**********************************************\n");
(gdb) 
**********************************************
62	    printf("Testing -> Council Room Card\n");
(gdb) 
Testing -> Council Room Card
63	    memset(&G, 23, sizeof(struct gameState));   		 // clear the game state
(gdb) 
64	    initializeGame(numPlayer, k, seed, &G);   // initialize a new game
(gdb) 
65	    memcpy(&savedData, &G, sizeof(struct gameState));
(gdb) 
67		printf("\n< P1 Data BEFORE Council Room Card is Played >\n");
(gdb) 

< P1 Data BEFORE Council Room Card is Played >
69		printf("Player 1 has %d cards in hand.\n", savedData.handCount[player1]);
(gdb) 
Player 1 has 5 cards in hand.
72		printf("Player 1 has %d cards in deck.\n", savedData.deckCount[player1]);
(gdb) 
Player 1 has 5 cards in deck.
75		printf("Player 1 has %d cards in discard pile.\n", savedData.discardCount[player1]);
(gdb) 
Player 1 has 0 cards in discard pile.
78		cardEffect(council_room, choice1, choice2, choice3, &G, handpos, &bonus);
(gdb) 
80		printf("\n< P1 Data AFTER Council Room Card is Played >\n");
(gdb) 

< P1 Data AFTER Council Room Card is Played >
82		printf("Player 1 has %d cards in hand.\n", G.handCount[player1]);
(gdb) 
Player 1 has 8 cards in hand.
85		printf("Player 1 has %d cards in deck.\n", G.deckCount[player1]);
(gdb) 
Player 1 has 1 cards in deck.
88		printf("Player 1 has %d cards in discard pile.\n", G.discardCount[player1]);
(gdb) 
Player 1 has 0 cards in discard pile.
92		printf("\n***************** RESULTS *********************\n");
(gdb) 

***************** RESULTS *********************
93		printf("\nTEST 1. Check player 1 get 4 extra cards from player's card pile \n");
(gdb) 

TEST 1. Check player 1 get 4 extra cards from player's card pile 
94		printf("\n   Checking player 1's handCount\n");
(gdb) 

   Checking player 1's handCount
95		failure  += asserttrue (savedData.handCount[player1]+3, G.handCount[player1]);
(gdb) 

	Expected value: 8, actual value: 8

	PASS (assertion true)
96		printf("\n   Checking player 1's deckCount\n");
(gdb) 

   Checking player 1's deckCount
97		failure  += asserttrue (savedData.deckCount[player1]-4,G.deckCount[player1]);
(gdb) 

	Expected value: 1, actual value: 1

	PASS (assertion true)
99		printf("\nTEST 2. Check to see discardCard() function within Council Room Card's code worked\n");
(gdb) 

TEST 2. Check to see discardCard() function within Council Room Card's code worked
101		printf("\n   Checking... \n");
(gdb) 

   Checking... 
102		printf("\n   Prev # of discard count = %d\n", savedData.playedCardCount);
(gdb) 

   Prev # of discard count = 0
103		printf("\n   Current # of discard count = %d\n", G.playedCardCount);
(gdb) 

   Current # of discard count = 0
104		failure  += asserttrue (savedData.playedCardCount+1,G.playedCardCount);
(gdb) 

	Expected value: 1, actual value: 0

	FAIL (assertion false)
106		printf("\nTEST 3. Check if player1's numBuys increased from 1\n");
(gdb) 

TEST 3. Check if player1's numBuys increased from 1
107		printf("\n   Checking... \n");
(gdb) 

   Checking... 
108		printf("\n   Prev # of discard count = %d\n", savedData.numBuys);
(gdb) 

   Prev # of discard count = 1
109		printf("\n   Current # of discard count = %d\n", G.numBuys);
(gdb) 

   Current # of discard count = 2
110		failure  += asserttrue (savedData.numBuys+1,G.numBuys);
(gdb) 

	Expected value: 2, actual value: 2

	PASS (assertion true)
112		printf("\nTEST 4. Check if player 2's gets to draw one card for free\n");
(gdb) 

TEST 4. Check if player 2's gets to draw one card for free
113		printf("\n   Checking player 2's handCount\n");
(gdb) 

   Checking player 2's handCount
114		failure  += asserttrue (savedData.handCount[player2]+1,G.handCount[player2]);
(gdb) 

	Expected value: 1, actual value: 1

	PASS (assertion true)
115		printf("\n   Checking player 2's deckCount\n");
(gdb) 

   Checking player 2's deckCount
116		failure  += asserttrue (savedData.deckCount[player2]-1,G.deckCount[player2]);
(gdb) 

	Expected value: 9, actual value: 9

	PASS (assertion true)
118		printf("\nTEST 5. Check if kingdom and victory cards have any bugs\n");
(gdb) 

TEST 5. Check if kingdom and victory cards have any bugs
119		printf("\n   Checking kingdom cards' supply piles\n");
(gdb) 

   Checking kingdom cards' supply piles
120		for (i = 0; i < 10; i++) {
(gdb) 
121			failure  += asserttrue (savedData.supplyCount[k[i]], G.supplyCount[k[i]]);
(gdb) 

	Expected value: 10, actual value: 10

	PASS (assertion true)
120		for (i = 0; i < 10; i++) {
(gdb) 
121			failure  += asserttrue (savedData.supplyCount[k[i]], G.supplyCount[k[i]]);
(gdb) 

	Expected value: 10, actual value: 10

	PASS (assertion true)
120		for (i = 0; i < 10; i++) {
(gdb) 
121			failure  += asserttrue (savedData.supplyCount[k[i]], G.supplyCount[k[i]]);
(gdb) 

	Expected value: 10, actual value: 10

	PASS (assertion true)
120		for (i = 0; i < 10; i++) {
(gdb) 
121			failure  += asserttrue (savedData.supplyCount[k[i]], G.supplyCount[k[i]]);
(gdb) 

	Expected value: 8, actual value: 8

	PASS (assertion true)
120		for (i = 0; i < 10; i++) {
(gdb) 
121			failure  += asserttrue (savedData.supplyCount[k[i]], G.supplyCount[k[i]]);
(gdb) 

	Expected value: 10, actual value: 10

	PASS (assertion true)
120		for (i = 0; i < 10; i++) {
(gdb) 
121			failure  += asserttrue (savedData.supplyCount[k[i]], G.supplyCount[k[i]]);
(gdb) 

	Expected value: 10, actual value: 10

	PASS (assertion true)
120		for (i = 0; i < 10; i++) {
(gdb) 
121			failure  += asserttrue (savedData.supplyCount[k[i]], G.supplyCount[k[i]]);
(gdb) 

	Expected value: 10, actual value: 10

	PASS (assertion true)
120		for (i = 0; i < 10; i++) {
(gdb) 
121			failure  += asserttrue (savedData.supplyCount[k[i]], G.supplyCount[k[i]]);
(gdb) 

	Expected value: 10, actual value: 10

	PASS (assertion true)
120		for (i = 0; i < 10; i++) {
(gdb) 
121			failure  += asserttrue (savedData.supplyCount[k[i]], G.supplyCount[k[i]]);
(gdb) 

	Expected value: 10, actual value: 10

	PASS (assertion true)
120		for (i = 0; i < 10; i++) {
(gdb) 
121			failure  += asserttrue (savedData.supplyCount[k[i]], G.supplyCount[k[i]]);
(gdb) 

	Expected value: 8, actual value: 8

	PASS (assertion true)
120		for (i = 0; i < 10; i++) {
(gdb) 
123		printf("\n   Checking province card pile:\n");
(gdb) 

   Checking province card pile:
124		failure  += asserttrue (savedData.supplyCount[province], G.supplyCount[province]);
(gdb) 

	Expected value: 8, actual value: 8

	PASS (assertion true)
125		printf("\n   Checking duchy card pile:\n");
(gdb) 

   Checking duchy card pile:
126		failure  += asserttrue (savedData.supplyCount[duchy], G.supplyCount[duchy]);
(gdb) 

	Expected value: 8, actual value: 8

	PASS (assertion true)
127		printf("\n   Checking estate card pile:\n");
(gdb) 

   Checking estate card pile:
128		failure  += asserttrue (savedData.supplyCount[estate], G.supplyCount[estate]);
(gdb) 

	Expected value: 8, actual value: 8

	PASS (assertion true)
130	    if (failure > 0) {
(gdb) 
131	        printf("\nTEST FAILED\n");
(gdb) 

TEST FAILED
132	        printf("Count of failed tests: %d\n",failure);
(gdb) 
Count of failed tests: 1
138	    printf("**********************************************\n");
(gdb) 
**********************************************
139		return 0;
(gdb) 
140	}(gdb) 
0x00007ffff7737c05 in __libc_start_main () from /lib64/libc.so.6
(gdb) 
Single stepping until exit from function __libc_start_main,
which has no line number information.
[Inferior 1 (process 10886) exited normally]
(gdb) 
The program is not being run.
(gdb) 
The program is not being run.
(gdb) quit
flip1 ~/CS362/CS362-004-S2018/projects/anj/kohyDominion 226% gdb cardtest4
GNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-100.el7
Copyright (C) 2013 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-redhat-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /nfs/stak/users/anj/CS362/CS362-004-S2018/projects/anj/kohyDominion/cardtest4...done.
(gdb) start
Temporary breakpoint 1 at 0x401124: file cardtest4.c, line 41.
Starting program: /nfs/stak/users/anj/CS362/CS362-004-S2018/projects/anj/kohyDominion/cardtest4 

Temporary breakpoint 1, main () at cardtest4.c:41
41		int failure = 0;
Missing separate debuginfos, use: debuginfo-install glibc-2.17-196.el7_4.2.x86_64
(gdb) next
45		int handpos = 0;
(gdb) 
46		int choice1 = 0;
(gdb) 
47		int choice2 = 0;
(gdb) 
48		int choice3 = 0;
(gdb) 
49		int bonus = 0;
(gdb) 
51		int numPlayer = 2;
(gdb) 
52		int player1 = 0;
(gdb) 
53		int player2 = 1;
(gdb) 
55		int k[10] = {adventurer, council_room, feast, gardens, mine,
(gdb) 
59		int seed = 5656;
(gdb) 
61		printf("**********************************************\n");
(gdb) 
**********************************************
62	    printf("Testing -> Village Card\n");
(gdb) 
Testing -> Village Card
63	    memset(&G, 23, sizeof(struct gameState));   		 // clear the game state
(gdb) 
64	    initializeGame(numPlayer, k, seed, &G);   // initialize a new game
(gdb) 
65	    memcpy(&savedData, &G, sizeof(struct gameState));
(gdb) 
67		printf("\n< P1 Data BEFORE Village Card is Played >\n");
(gdb) 

< P1 Data BEFORE Village Card is Played >
69		printf("Player 1 has %d cards in hand.\n", savedData.handCount[player1]);
(gdb) 
Player 1 has 5 cards in hand.
72		printf("Player 1 has %d cards in deck.\n", savedData.deckCount[player1]);
(gdb) 
Player 1 has 5 cards in deck.
75		printf("Player 1 has %d cards in discard pile.\n", savedData.discardCount[player1]);
(gdb) 
Player 1 has 0 cards in discard pile.
78		cardEffect(village, choice1, choice2, choice3, &G, handpos, &bonus);
(gdb) 
80		printf("\n< P1 Data AFTER Village Card is Played >\n");
(gdb) 

< P1 Data AFTER Village Card is Played >
82		printf("Player 1 has %d cards in hand.\n", G.handCount[player1]);
(gdb) 
Player 1 has 5 cards in hand.
85		printf("Player 1 has %d cards in deck.\n", G.deckCount[player1]);
(gdb) 
Player 1 has 4 cards in deck.
88		printf("Player 1 has %d cards in discard pile.\n", G.discardCount[player1]);
(gdb) 
Player 1 has 0 cards in discard pile.
91		printf("\n***************** RESULTS *********************\n");
(gdb) 

***************** RESULTS *********************
93		printf("\nTEST 1. Check player 1 gets to draw 1 card \n");
(gdb) 

TEST 1. Check player 1 gets to draw 1 card 
94		printf("\n   Check player 1's handCount\n");
(gdb) 

   Check player 1's handCount
95		failure  += asserttrue (savedData.handCount[player1], G.handCount[player1]);
(gdb) 

	Expected value: 5, actual value: 5

	PASS (assertion true)
96		printf("\n   Check player 1's deckCount\n");
(gdb) 

   Check player 1's deckCount
97		failure  += asserttrue (savedData.deckCount[player1]-1,G.deckCount[player1]);
(gdb) 

	Expected value: 4, actual value: 4

	PASS (assertion true)
99		printf("\nTEST 2. Check to see discardCard() function within Village Card's code worked\n");
(gdb) 

TEST 2. Check to see discardCard() function within Village Card's code worked
101		printf("\n   Checking... \n");
(gdb) 

   Checking... 
102		printf("\n   Prev # of discard count = %d\n", savedData.playedCardCount);
(gdb) 

   Prev # of discard count = 0
103		printf("\n   Current # of discard count = %d\n", G.playedCardCount);
(gdb) 

   Current # of discard count = 1
104		failure  += asserttrue (savedData.playedCardCount+1,G.playedCardCount);
(gdb) 

	Expected value: 1, actual value: 1

	PASS (assertion true)
106		printf("\nTEST 3. Check if player1's numActions increased by +2\n");
(gdb) 

TEST 3. Check if player1's numActions increased by +2
107		printf("\n   Checking... \n");
(gdb) 

   Checking... 
108		printf("\n   Prev numActions = %d\n", savedData.numActions);
(gdb) 

   Prev numActions = 1
109		printf("\n   Current of numActions = %d\n", G.numActions);
(gdb) 

   Current of numActions = 3
110		failure  += asserttrue (savedData.numActions+2,G.numActions);
(gdb) 

	Expected value: 3, actual value: 3

	PASS (assertion true)
112		printf("\nTEST 4. Check if player 2's hand and deck cards remains the same\n");
(gdb) 

TEST 4. Check if player 2's hand and deck cards remains the same
113		printf("\n   Check player 2's handCount\n");
(gdb) 

   Check player 2's handCount
114		failure  += asserttrue (savedData.handCount[player2],G.handCount[player2]);
(gdb) 

	Expected value: 0, actual value: 0

	PASS (assertion true)
115		printf("\n   Check player 2's deckCount\n");
(gdb) 

   Check player 2's deckCount
116		failure  += asserttrue (savedData.deckCount[player2],G.deckCount[player2]);
(gdb) 

	Expected value: 10, actual value: 10

	PASS (assertion true)
118		printf("\nTEST 5. Check if kingdom and victory cards have any bugs\n");
(gdb) 

TEST 5. Check if kingdom and victory cards have any bugs
119		printf("\n   Checking kingdom cards' supply piles\n");
(gdb) 

   Checking kingdom cards' supply piles
120		for (i = 0; i < 10; i++) {
(gdb) 
121			failure  += asserttrue (savedData.supplyCount[k[i]], G.supplyCount[k[i]]);
(gdb) 

	Expected value: 10, actual value: 10

	PASS (assertion true)
120		for (i = 0; i < 10; i++) {
(gdb) 
121			failure  += asserttrue (savedData.supplyCount[k[i]], G.supplyCount[k[i]]);
(gdb) 

	Expected value: 10, actual value: 10

	PASS (assertion true)
120		for (i = 0; i < 10; i++) {
(gdb) 
121			failure  += asserttrue (savedData.supplyCount[k[i]], G.supplyCount[k[i]]);
(gdb) 

	Expected value: 10, actual value: 10

	PASS (assertion true)
120		for (i = 0; i < 10; i++) {
(gdb) 
121			failure  += asserttrue (savedData.supplyCount[k[i]], G.supplyCount[k[i]]);
(gdb) 

	Expected value: 8, actual value: 8

	PASS (assertion true)
120		for (i = 0; i < 10; i++) {
(gdb) 
121			failure  += asserttrue (savedData.supplyCount[k[i]], G.supplyCount[k[i]]);
(gdb) 

	Expected value: 10, actual value: 10

	PASS (assertion true)
120		for (i = 0; i < 10; i++) {
(gdb) 
121			failure  += asserttrue (savedData.supplyCount[k[i]], G.supplyCount[k[i]]);
(gdb) 

	Expected value: 10, actual value: 10

	PASS (assertion true)
120		for (i = 0; i < 10; i++) {
(gdb) 
121			failure  += asserttrue (savedData.supplyCount[k[i]], G.supplyCount[k[i]]);
(gdb) 

	Expected value: 10, actual value: 10

	PASS (assertion true)
120		for (i = 0; i < 10; i++) {
(gdb) 
121			failure  += asserttrue (savedData.supplyCount[k[i]], G.supplyCount[k[i]]);
(gdb) 

	Expected value: 10, actual value: 10

	PASS (assertion true)
120		for (i = 0; i < 10; i++) {
(gdb) 
121			failure  += asserttrue (savedData.supplyCount[k[i]], G.supplyCount[k[i]]);
(gdb) 

	Expected value: 10, actual value: 10

	PASS (assertion true)
120		for (i = 0; i < 10; i++) {
(gdb) 
121			failure  += asserttrue (savedData.supplyCount[k[i]], G.supplyCount[k[i]]);
(gdb) 

	Expected value: 8, actual value: 8

	PASS (assertion true)
120		for (i = 0; i < 10; i++) {
(gdb) 
123		printf("\n   Checking province card pile:\n");
(gdb) 

   Checking province card pile:
124		failure  += asserttrue (savedData.supplyCount[province], G.supplyCount[province]);
(gdb) 

	Expected value: 8, actual value: 8

	PASS (assertion true)
125		printf("\n   Checking duchy card pile:\n");
(gdb) 

   Checking duchy card pile:
126		failure  += asserttrue (savedData.supplyCount[duchy], G.supplyCount[duchy]);
(gdb) 

	Expected value: 8, actual value: 8

	PASS (assertion true)
127		printf("\n   Checking estate card pile:\n");
(gdb) 

   Checking estate card pile:
128		failure  += asserttrue (savedData.supplyCount[estate], G.supplyCount[estate]);
(gdb) 

	Expected value: 8, actual value: 8

	PASS (assertion true)
130	    if (failure > 0) {
(gdb) 
135	    	printf("\nPASSED ALL THE TESTS\n");
(gdb) 

PASSED ALL THE TESTS
136	        printf("\nTEST SUCCESSFULLY COMPLETED\n\n");
(gdb) 

TEST SUCCESSFULLY COMPLETED

138	    printf("**********************************************\n");
(gdb) 
**********************************************
139		return 0;
(gdb) 
140	}(gdb) 
0x00007ffff7737c05 in __libc_start_main () from /lib64/libc.so.6
(gdb) 
Single stepping until exit from function __libc_start_main,
which has no line number information.
[Inferior 1 (process 11078) exited normally]
(gdb) 
The program is not being run.
(gdb) 
The program is not being run.